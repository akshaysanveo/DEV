<html>
<head>
    <link rel="shortcut icon" type="image/x-icon" href="@Url.Content("~")Content/sanveo_rgb-a-57x60.png" />
    <title>Sanveo Inspire</title>
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <link href="@Url.Content("~")Content/Skins/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    @*<link href="~/bower_components/morrisjs/morris.css" rel="stylesheet">*@
    <link href="@Url.Content("~")Content/Skins/dist/css/AdminLTE.min.css" rel="stylesheet" />
    <link href="@Url.Content("~")Content/Skins/dist/css/skins/_all-skins.min.css" rel="stylesheet" />
    <!-- Morris Charts CSS -->
    <link rel="stylesheet" href="https://autodeskviewer.com/viewers/1.2.23/style.css" type="text/css">
    @*<link rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.min.css?v=v2.10" />*@
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.common.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.rtl.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.silver.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.mobile.all.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.common-material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.material.mobile.min.css" />
    <!-- Latest compiled JavaScript -->
    <script src="https://code.jquery.com/jquery-1.12.3.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2017.2.504/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2016.3.1028/js/angular.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2016.3.1028/js/jszip.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2015.3.1111/js/kendo.aspnetmvc.min.js"></script>
    <script src="https://the360view.typepad.com/files/glue-embedded.js"></script>
    <!-- Autodesk Forge Viewer files -->
    <script src="https://ase-cdn.autodesk.com/adp/v1.0.3/js/adp-web-analytics-sdk.min.js"></script>
    <link rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.min.css?v=v2.10" type="text/css" />
    <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/three.min.js"></script>
    <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/viewer3D.min.js?v=v2.10"></script>


    <script>
        window.onload = func1;
        function func1() {

            (".k-window-content").each(function () {
                $(this).data("kendoWindow").close();
                alert('kldfkhkfdh');
            });
            //       
            //alert("This is the first.");
            //var window = $("#AdminWindow").data("kendoWindow");
            //window.close();
            
            //var window11 = $("#VisibilityWindow").data("kendoWindow");
            //window11.close();
            //var window9 = $("#ADAClearanceWindow").data("kendoWindow");
            //window9.close();
            ////var window01 = $("#Divviewer2D").data("kendoWindow");
            ////window01.close();

            //var window12 = $("#DivMarkUp").data("kendoWindow");
            //window12.close();
            //var window1 = $("#DivAutotext").data("kendoWindow");
            //window1.close();
            //var window2 = $("#FeedBack").data("kendoWindow");
            //window2.close();
            //var window3 = $("#SuperAdminWindow").data("kendoWindow");
            //window3.close();
            //var window4 = $("#SearchWindow").data("kendoWindow");
            //window4.close();
            //var window5 = $("#PropertyMapWindow").data("kendoWindow");
            //window5.close();
            //var window6 = $("#CobieExcel").data("kendoWindow");
            //window6.close();
            //var window7 = $("#RunReportWindow").data("kendoWindow");
            //window7.close();
            //var window8 = $("#QuantityTestWindow").data("kendoWindow");
            //window8.close();
          
            //var window10 = $("#Electrical360Window").data("kendoWindow");
            //window10.close();


        }

        window.onresize = function onresize() {


            var w = window.innerWidth
                || document.documentElement.clientWidth
                || document.body.clientWidth;

            var h = window.innerHeight
                || document.documentElement.clientHeight
                || document.body.clientHeight;

            var x = "Browser inner window width: " + w + ", height: " + h + ".";

            //  alert(x);
            //var r = DetectZoom.ratios();
            //zoomLevel.innerHTML =
            //    "Zoom level: " + r.zoom +
            //    (r.zoom !== r.devicePxPerCssPx
            //        ? "; device to CSS pixel ratio: " + r.devicePxPerCssPx
            //        : "");
        }
        var coordinatesx = [];
        var coordinatesy = [];
    </script>

    <script src="~/Scripts/MeasureTool.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/math.min.js"></script>
    <script type="text/javascript" src="~/Views/ADAClearance/ADAClearance.cshtml"></script>
    <style type="text/css">
        span.themeChooser {
            margin-left: 30px;
        }

        div.form-group {
            visibility: hidden;
        }

        #control-sidebar-heading {
            margin-top: 1000px;
        }

        /*#body {
            zoom: 80%;
        }
        #viewer {
            zoom: 80%;
        }


        .main-footer {
            zoom: 120%;
        }*/
        /*#sidebar {
            zoom: 120%;
        }*/


        .wrapper {
            zoom: 0.8;
        }


        #main {
            min-height: 740px;
        }
        /*.zoom-moz {
            -moz-transform: scale(3);
            -moz-transform-origin: 0 0;
        }*/
    </style>

    <style>
        .sunny, .cloudy, .rainy {
            display: block;
            width: 128px;
            height: 128px;
        }

        .colored-yellow {
            background-color: #e1d837;
            color: black;
        }

        .colored-red {
            background-color: #ed3636;
            color: black;
        }

        .colored-green {
            background-color: #a2efa2;
            color: black;
        }

        .boxxi {
            box-shadow: 0 1px 2px 1px rgba(0,0,0,.08), 0 3px 6px rgba(0,0,0,.08);
            height: 185px;
        }

        .cloudy {
            background-position: -128px 0;
        }

        .rainy {
            background-position: -256px 0;
        }

        .weather {
            margin: 0 auto 30px;
            text-align: center;
        }

        .progressBar {
            /*display: block;*/
            width: 80%;
            margin-bottom: 5px;
        }

        #tabstrip h2 {
            font-weight: lighter;
            font-size: 5em;
            line-height: 1;
            padding: 0 0 0 0px;
            margin: 0;
        }

            #tabstrip h2 span {
                background: none;
                padding-left: 0px;
                font-size: .3em;
                vertical-align: top;
            }

        #tabstrip p {
            margin: 0;
            padding: 0;
        }

        td {
            border: inset 1px;
        }

        table {
            display: table;
            border-collapse: separate;
            border: Solid 0.5px;
            border-color: black;
        }

        .treeInlineEdit > input {
            font-size: 1.5em;
            min-width: 10em;
            min-height: 2em;
            border-radius: 5px 5px 5px 5px;
            -moz-border-radius: 5px 5px 5px 5px;
            border: 0px solid #ffffff;
        }

        .k-window div.k-window-content {
            overflow: hidden;
        }

        .dash {
            left: 10% !important;
            top: 20% !important;
        }

        .datac {
            left: 30% !important;
            top: 20% !important;
        }

        .degree1 {
            width: 170px !important;
        }
    </style>

    <style>
        body, html {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            font-family: 'Source Sans Pro','Helvetica Neue',Helvetica,Arial,sans-serif;
            overflow: hidden;
        }

        .clearfix:after {
            content: '';
            display: table;
            clear: both;
        }

        .k-progress-status {
            display: none;
        }

        .k-upload-button {
            background-color: #357ebd;
            color: white;
        }

        .Btn--prim {
            background: #ee5315;
            background: -webkit-gradient(linear, 0% 0%,0% 100%, from(#ab9999), to(#ee5315));
            background: -webkit-linear-gradient(0% 0%, 0% 100%, from(#ab9999), to(#ee5315));
            background: -moz-linear-gradient(top,#ee5315);
            color: white;
            font-size: larger;
        }

        #DashTblGrid tr.red {
            background-color: red;
        }

        #RulesTabStrip-1 {
            overflow-x: hidden;
        }

        .k-grid > .k-grouping-header {
            color: black;
        }

        .k-gantt-toolbar .k-button, .k-gantt > .k-header .k-link, .k-gantt > .k-header li, .k-grid .k-header .k-button, .k-scheduler .k-header .k-button, .k-scheduler .k-header .k-link, .k-scheduler .k-header li, .km-pane-wrapper .k-header .k-button {
            background-color: #ebebeb;
        }

        .adsk-viewing-viewer {
            position: relative;
            padding: 0px;
            height: 100%;
        }

        /*.k-window-titlebar, k-header {
            background-color: #3c8dbc;
        }*/

        .k-window-titlebar .k-link {
            background-color: #3c8dbc;
            border-color: #3c8dbc;
        }

        .k-grid td.k-state-selected:hover, .k-grid tr.k-state-selected:hover {
            background-color: #3c8dbc !important;
            border-color: #367fa9 !important;
        }

        .k-grid td.k-state-selected, .k-grid tr.k-state-selected > td {
            background-color: #3c8dbc !important;
            border-color: #367fa9 !important;
        }

        .k-header.k-grid-toolbar {
            background-color: #3c8dbc !important;
            border-color: #367fa9 !important;
        }

        #main {
            margin-left: 400px;
            height: 300px;
        }

        #sidebar {
            width: 400px;
            float: left;
            height: 300px;
        }

        #split-bar {
            background-color: grey;
            height: 100%;
            float: right;
            width: 6px;
            cursor: col-resize;
        }



        .k-icon.k-filter {
            background-image: url('../Content/1496062054_funnel.png');
        }

        .k-button.k-button-icontext.k-grid-excel {
            /*background-color: #3f51b5;*/
        }

        .table-fixed tbody {
            display: block;
            height: 300px;
            overflow: auto;
        }

        /*.table-fixed thead, #vTable tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .table-fixed thead {
            width: calc( 100% - 1em );
        }*/

        .Highlightrow {
            background-color: #3c8dbc !important;
            border-color: #367fa9 !important;
            color: white;
        }

        #myProgress {
            width: 100%;
            background-color: #ddd;
        }

        #myBar {
            width: 1%;
            height: 30px;
            background-color: #4CAF50;
        }

        svg {
            padding-left: 50px;
        }
    </style>

    <style>
        .tablink {
            background-color: #555;
            color: white;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            font-size: 17px;
            width: 48.5%; /*If tab increase then adjust width according to that(eg.(4Tab--24.2)*/
            text-align: center;
            height: 30px;
            /*border:1px solid;*/
        }


            .tablink:hover {
                background-color: #777;
            }

        /*.datatablink {
            background-color: #555;
            color: white;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            font-size: 17px;
            text-align: center;
            height: 30px;
        }*/


        /* Style the tab content */
        .tabcontent {
            color: white;
            display: none;
            padding: 5px;
        }



        .canvas-wrap canvas {
            width: 100% !important;
            height: 100% !important;
        }
    </style>

    <style>
        .viewer-panel {
            width: 75%;
            height: calc(90% - 55px);
            display: block;
            position: absolute;
        }

        .viewer-box {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .notouch .modelStructurePanel {
            background: rgb(74, 74, 74);
        }

        /*.draggable {
            left: 68%;
            top: 44%;
            width: 30%;
            height: 50%;
            max-width: 400px;
            max-height: 300px;
            z-index: 107;
            position: absolute;
            -moz-box-shadow: 1 3px 6px -3px gray;
            -webkit-box-shadow: 1 3px 6px -3px gray;
            box-shadow: 1 3px 6px -3px gray;
        }

        .draggable-nav {
            height: 15px;
            width: 100%;
            top: 0px;
            left: 0px;
            position: absolute;
            z-index: 109;
            background-color: rgb(34, 37, 34);
            cursor: pointer;
            -moz-box-shadow: 0 3px 5px -3px black;
            -webkit-box-shadow: 0 3px 5px -3px black;
            box-shadow: 0 3px 5px -3px black;
        }

        .draggable-body {
            top: 15px;
            left: 0px;
            right: 0px;
            bottom: 0px;
            position: absolute;
            z-index: 108;
            border: black 1px solid;
        }*/


        @@media only screen and (min-width: 768px) and (max-width: 991px) {


            .navbar-nav > li > a {
                padding-top: 15px;
                padding-bottom: 15px;
                padding-right: 1px;
            }


            div.navbar-custom-menu {
                display: block;
            }

            #SideBarLogoutMenu {
                display: block;
            }

            #FileNavigator {
                margin-top: 63px;
            }

            .main-footer {
                display: none;
            }
            /*.content-wrapper{
                    min-height: 800px;
            }*/
            body, html {
                width: 108%;
                height: 108%;
                padding: 0;
                margin: 0;
                font-family: 'Source Sans Pro','Helvetica Neue',Helvetica,Arial,sans-serif;
            }

            #split-bar {
                height: 118.5%;
            }

            .content-wrapper {
                /*min-height: 100% !important;*/
                min-height: 635px;
            }

            .viewer-panel {
                height: 100%;
            }
        }




        /* Large desktops and laptops */
        @@media (min-width: 1200px) {
            div.navbar-custom-menu {
                display: block;
            }

            .skin-blue-light .main-footer {
                border-top-color: rgb(255, 255, 255);
            }

            #SideBarLogoutMenu {
                display: none;
            }
        }
        /* Landscape tablets and medium desktops */
        @@media (min-width: 992px) and (max-width: 1199px) {
            div.navbar-custom-menu {
                display: block;
            }

            #SideBarLogoutMenu {
                display: none;
            }
        }
        /* Portrait tablets and small desktops */
        @@media (min-width: 768px) and (max-width: 991px) {
            div.navbar-custom-menu {
                display: block;
            }

            #SideBarLogoutMenu {
                display: none;
            }
        }
    </style>
</head>
<body class="hold-transition sidebar-mini skin-blue">
    <div id="body">
        <div class="wrapper" style="max-height:100%">
            <header class="main-header" id="menu">
                <!-- Logo -->
                <a href="#" class="logo" style="text-decoration : none;">
                    <!-- mini logo for sidebar mini 50x50 pixels -->
                    <span class="logo-mini">Inspire</span>
                    <!-- logo for regular state and mobile devices -->
                    <span class="logo-lg"><img src="~/content/SanveoInspire.png" style="max-width:230px;max-height:45px; padding-top: 7px; padding-right: 20px;" id="CompanyLogo" /></span>
                </a>
                <nav class="navbar navbar-static-top" role="navigation">
                    <!-- Sidebar toggle button-->
                    <a href="javascript:void(0);" class="sidebar-toggle" role="button">
                        <span class="sr-only">Toggle navigation</span>
                    </a>
                    <ul class="nav navbar-nav">
                        @if (Session["GID"].ToString() == "1")
                        {
                            <li>
                                <a href="javascript:void(0);" role="button" onclick="OpenSuperAdminWindow();"><i class="fa fa-user-secret"></i> SuperAdmin</a>
                            </li>
                        }
                        @if (Session["GID"].ToString() == "1" || Session["GID"].ToString() == "2" || Session["GID"].ToString() == "4")
                        {
                            <li>
                                <a href="javascript:void(0);" onclick="OpenAdminWindow();"><i class="fa fa-user"></i> Admin</a>
                            </li>
                        }
                    </ul>

                    <div class="navbar-custom-menu">
                        <ul class="nav navbar-nav">
                            <li>
                                <a id="btnMarkUp" href="javascript:void(0);" onclick="clickMarkup();" style="float:left;display:none;">
                                    <i class="fa fa-scissors" aria-hidden="true" title="MarkUp"></i>
                                </a>
                            </li>
                            <li>
                                <a id="btnAutoSearch" href="javascript:void(0);" onclick="clickme();" style="float:left">
                                    <i class="fa fa-search" aria-hidden="true" title="Search"></i>
                                </a>
                            </li>
                            <li>
                                <a id="VisibilityBtn" href="javascript:void(0);" style="color:white;display:none;" onclick="OpenVisibilityWindow();">
                                    <i class="fa fa-eye fa-lg" aria-hidden="true" title="Visibility"></i>
                                </a>
                            </li>
                            <li>
                                <a id="Excel2d" href="javascript:void(0);" style="color:white;display:none;">
                                    <i class="fa fa-file-excel-o" aria-hidden="true" title="Cobie-Excel"></i>
                                </a>
                            </li>
                            <li style="text-overflow:ellipsis;">
                                <a href="javascript:void(0);">
                                    Hello : <span id="EmailId"></span>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" title="@ViewBag.validity Days Remaining of your trail period">
                                    <span><i class="fa fa-clock-o" aria-hidden="true" title="@ViewBag.validity Days Remaining of your trail period"></i> @ViewBag.validity Days</span>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" title="Feedback">
                                    <i class="fa fa-comments-o" aria-hidden="true" title="Feedback" onclick="feebackform();"></i>
                                </a>
                            </li>
                            <li class="dropdown user user-menu">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" style="white-space:nowrap;text-overflow:ellipsis;width:180px;display:inline-block;overflow: hidden;float:right">
                                    <i class="fa fa-user"></i>
                                    <span class="hidden-xs" id="UserName">
                                    </span>
                                    <i class="caret"></i>
                                </a>
                                <ul class="dropdown-menu" style="float:right;">
                                    <!-- User image -->
                                    <li class="user-header" style="height:195px;">
                                        <img id="ProfileImageLayout" style="border-radius: 30%;width:30%;height:50%;" src="@Url.Content("~/UploadFiles/ProfilePic/Avatar.png")">
                                        <div style="margin-left:1px;font-size:17px;color:white;" id="Userfullname">
                                        </div>
                                        <div style="margin-left:1px;font-size:17px;color:white;" id="MailId">
                                        </div>
                                        <div id="Designation" style="font-size:17px;color:white;">
                                        </div>
                                        <div id="Company" style="font-size:17px;color:white;">
                                        </div>
                                    </li>
                                    <!-- Menu Body -->
                                    <!-- Menu Footer-->
                                    <li class="user-footer">
                                        <div class="pull-left">
                                            <button type="button" class="btn btn-default btn-flat" data-toggle="modal" data-target="#passwordModal">Change Password</button>
                                        </div>
                                        <div class="pull-right">
                                            <a href="@Url.Content("~")Login/Logout" class="btn btn-default btn-flat">Sign out</a>
                                        </div>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                @*<a href="#" data-toggle="control-sidebar">
                                <i class="fa fa-gears"></i>
                            </a>*@

                                <a id="ControlSidebargears" href="javascript:void(0);" onclick="sidebargear();">
                                    <i class="fa fa-gears"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                    <form class="navbar-form navbar-right">
                        <div class="input-group">
                            <select id="pu_FileToLoad" class="input-sm" style="display:none;width:120px" onchange="Load2d3d();">
                                <option value="">Select File</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <select id="pu_viewToLoad" class="input-sm" style="display:none;width:120px"></select>
                        </div>
                    </form>

                </nav>
            </header>

            <aside class="main-sidebar" id="sidebar">
                <div id="split-bar"></div>
                @if (ViewBag.compType == "Enterprise 360 Account" || ViewBag.compType == "")
                {
                    <center id="prjname" style="background-color:#ededed;height:30px;font-size:12px;padding-top:10px;display:none">
                        <b></b>
                    </center>
                }
                else
                { <center id="prjname" style="background-color:#ededed;height:30px;font-size:12px;padding-top:10px;display:none">
                        <b></b>
                    </center>
                }


                @*tabs*@
                <div style="height:30%">

                    <div style="width:100%;height:10px">
                        @*<center id="FileNavigator" style="background-color:#ededed;font-size:15px;height:25px"><b>File Navigator<i style="font-size:11px">(Select Model to Load)</i></b></center>*@
                        <center id="defaultOpen" class="datatablink" onclick="opentab('Data', this)" style="background-color:#555; color:white; font-size:18px;height:30px;"><b>Data</b></center>
                        @*<button class="tablink" onclick="opentab('Data', this)" id="defaultOpen" style="width:394px;">Data</button>*@
                        <button class="tablink" onclick="opentab('Geometry', this)" style="display:none;">Geometry</button>
                        @*<button class="tablink" style="text-align:left;" onclick="opentab('physics', this)">physics</button>
                    <button class="tablink" style="text-align:left;" onclick="opentab('chemistry', this)">chemistry</button>*@
                    </div>

                    @* Buttons *@
                    <div id="Data" class="tabcontent">
                        <div style="margin-top:25px" ;>
                            <button id="btnGetData" style="width:49%" class="btn btn-default">Dextract <i style='color:red;' class="fa fa-exclamation-circle fa-lg"></i></button>
                            <input type="submit" id="btnVersionTagging" value="Version Control" style="width:49%" class="btn btn-default" onclick="OpenVersionWindow();" />
                        </div>
                        <div style="margin-top:5px">
                            @*<input type="submit" id="btnSearch" value="Search" style="width:49%" class="btn btn-default" onclick="OpenSeacrhWindow();" />*@
                            <input type="submit" id="btnShow2D" value="Plan View" style="width:49%;display:none;" class="btn btn-default" onclick="Show2D();" />
                            <input type="submit" id="btnQuantity" value="Quantity" style="width:49%;margin-top:3px;" class="btn btn-default" onclick="OpenQuantityWindow();" />
                            <input type="submit" id="btnRunReport" value="Report" style="width:49%;margin-top:3px;" class="btn btn-default" />
                        </div>
                        <div style="margin-top:5px;display:none;">
                            <input type="submit" id="btnRuleEngine" value="Rule Engine" style="width:49%" class="btn btn-default" onclick="OpenRuleEngineWindow();" />
                            <input type="submit" id="btnRunReport" value="Report" style="width:49%" class="btn btn-default" />
                        </div>
                        @*<div style="margin-top:5px">
                        <input type="submit" id="btnShader" value="Shader" style="width:49%" class="btn btn-default" onclick="RunShader();" />
                        <input type="submit" id="btnRunReport" value="Report" style="width:49%" class="btn btn-default" />
                    </div>*@
                    </div>
                    <div id="Geometry" class="tabcontent">
                        <div style="margin-top:25px">
                            <input type="submit" id="btnClear" value="Clearance" style="width:49%" class="btn btn-default" />
                            <input type="submit" id="btnPropertyMap" value="Property Map" style="width:49%" class="btn btn-default" />
                        </div>
                        <div style="margin-top:5px">
                            @*<input type="submit" id="btnADA" value="ADA" style="width:49%" class="btn btn-default" />*@
                            @*<input type="submit" id="btnQuantityTest" value="QuantityTest" style="width:49%;margin-top:3px;" class="btn btn-default" onclick="OpenQuantityWindowTest();" />*@
                            <input type="submit" id="btnADAClearance" value="ADA Clearance" style="width:49%;margin-top:3px;" class="btn btn-default" onclick="OpenADAClearance();" />
                            <input type="submit" id="btnElectrical360" value="Electrical-360" style="width:49%;margin-top:3px;" class="btn btn-default" onclick="OpenElectrical360();" />
                        </div>
                        @*<div style="margin-top:5px">
                        <input type="submit" id="btnElectrical360" value="Electrical-360" style="width:49%;margin-top:3px;" class="btn btn-default" onclick="OpenElectrical360();" />
                    </div>*@
                    </div>
                </div>
                <center id="FileNavigator" style="background-color:#ededed;font-size:15px;height:25px"><b>File Navigator<i style="font-size:11px">(Select Model to Load)</i></b></center>
                <section class="sidebar" id="divtreeview">
                    <div>
                        <label style="color: #fff;"><input type="checkbox" value="1" id="GetLatestChk" onchange="loadfileData();" />Show Latest Version</label>
                        <label style="padding-top: 10px;margin-left:50%"><input type="button" class="btn-primary" value="Sync" id="btnSync" onClick="SyncFiles();" /></label>
                        <br />
                    </div>

                    <ul id="treeview" class="sidebar-menu" style="overflow: auto; height: 25%">
                        @* File names *@
                        <li style="text-align: center; color: white">Loading.. Please Wait !!</li>
                    </ul>
                </section>
                <center style="background-color:#ededed;font-size:15px;height:25px">
                    <b>Selected File<i style="font-size:11px">(Model)</i></b>
                </center>
                <section class="sidebar" id="divtreeviewModel">
                    <center><a href="javascript:void(0)" onclick="clearall()">Clear All</a></center>
                    <ul id="treeviewmodel" class="sidebar-menu" style="overflow:auto;padding-left:5px;line-height:20px;height:25%">
                        @* Selected File names *@
                    </ul>
                </section>
                <!-- /.sidebar -->
            </aside>

            <div class="content-wrapper" style="background-color:#ffffff;padding-top:0;" id="main">
                <section class="content" style="overflow:hidden;">
                    @* popups here *@


                    <div id="DivAutotext" style="display:none">
                        <ul class="nav nav-tabs" id="SearchTabStrip">
                            <li class="active" id="SearchTab1"><a data-toggle="tab" href="#SearchOption1">Option 1</a></li>
                            <li id="SearchTab2"><a data-toggle="tab" href="#SearchOption2">Option 2</a></li>
                            <li id="SearchTab3"><a data-toggle="tab" href="#SearchOption3">Option 3</a></li>
                        </ul>

                        <div class="tab-content">
                            <div id="SearchOption1" class="tab-pane fade in active " style=";overflow-x:auto;margin-top:5px;">
                                <div class="col-xs-10">
                                    <input type="text" placeholder="Type Category Name and press Enter key" class="form-control input" id="txtSearch" style="display:none;font-size:15px;" onkeydown="GetAutoCompleteText(event);" onclick="ShowSearchDiv();" title="Type Category Name and press Enter key" />
                                </div>
                                <div class="col-xs-11">
                                    <div class="box-body" id="BindAutoText" style="height:220px;width:92%;overflow-y:auto;border:1px solid lightgray;display:none;font-size:10px;">
                                    </div>
                                </div>
                            </div>

                            <div id="SearchOption2" class="tab-pane fade in" style="overflow-x:auto;margin-top:5px;">

                                <div class="col-xs-11">
                                    <form class="form-inline">
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchCategory" placeholder="Category" style="width:102px">
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchPropName" placeholder="Property Name" style="width:102px">
                                        <select class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" style="" id="SearchOptionAdv">
                                            <option value="" style="font-size:large"></option>
                                            <option value="<="><=</option>
                                            <option value=">=">>=</option>
                                            <option value="=">=</option>
                                        </select>
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchPropValue" placeholder="Property Value" style="width:102px">
                                        <input type="button" class="btn-primary form-control input-sm mb-2 mr-sm-2 mb-sm-0" value="Search" id="BtnAdvsearch" style="width:40px" />

                                    </form>
                                </div>
                                <div class="col-xs-11">
                                    <div class="box-body" id="BindAutoTextAdvance" style="height:220px;width:98%;overflow: auto;border:1px solid lightgray;font-size:10px;">
                                    </div>
                                </div>
                            </div>

                            <div id="SearchOption3" class="tab-pane fade in" style="overflow-x:auto;margin-top:5px;">

                                <div class="col-xs-11">
                                    <form class="form-inline">
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchCategory2" placeholder="Category" style="width:102px">
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchFamily2" placeholder="Family Name" style="width:102px">

                                    </form>
                                </div>
                                <div class="col-xs-11">
                                    <form class="form-inline">
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchPropName2" placeholder="Property Name" style="width:102px">
                                        <select class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" style="" id="SearchOptionAdv2">
                                            <option value="" style="font-size:large"></option>
                                            <option value="<="><=</option>
                                            <option value=">=">>=</option>
                                            <option value="=">=</option>
                                        </select>
                                        <input type="text" class="form-control input-sm mb-2 mr-sm-2 mb-sm-0" id="txtSearchPropValue2" placeholder="Property Value" style="width:102px">
                                        <input type="button" class="btn-primary form-control input-sm mb-2 mr-sm-2 mb-sm-0" value="Search" id="BtnAdvsearch2" style="width:40px" />

                                    </form>
                                </div>
                                <div class="col-xs-11">
                                    <div class="box-body" id="BindAutoTextAdvance2" style="height:180px;width:98%;overflow: auto;border:1px solid lightgray;font-size:10px;">
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div id="DivMarkUp" style="display:none">
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="ArrowButton">Arrow</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="CircleButton">Circle</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="PolylineButton">Polyline</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="RectangleButton">Rectangle</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="CloudButton">Cloud</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="FreehandButton">Freehand</button>
                        </div>
                        <div id="" class="" style="overflow-x:auto;margin-top:5px;">
                            <button id="UnloadMarkup">Unload Markup</button>
                            <button id="GetDataMarkup">GetData</button>
                            <a href="" id="a">click here to download your file</a>
                        </div>
                    </div>

                    @(Html.Kendo().Window()
                                    .Name("CobieExcel")
                                    .Title("Download Excel")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("COBIEExl", "COBIEExl")
                                         .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(580)
                                                 .Width(1100)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                                    .Name("QuantityWindow")
                                    .Title("Quantity")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("Quantity", "Quantity")
                                       .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(545)
                                                 .Width(1200)
                                                 .Iframe(true)

                    )


                    @(Html.Kendo().Window()
                                    .Name("QuantityTestWindow")
                                    .Title("QuantityTest")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("QuantityTest", "QuantityTest")
                                       .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(590)
                                                 .Width(1350)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                                    .Name("ADAClearanceWindow")
                                    .Title("ADAClearance")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("ADAClearance", "ADAClearance")
                                       .Actions(action =>
                                       {
                                           action.Minimize();
                                           action.Refresh();
                                           action.Close();
                                       })
                                         .Draggable()
                                                .Resizable()
                                                .Height(590)
                                                 .Width(1450)
                                                 .Iframe(true)

                    )


                    @(Html.Kendo().Window()
                                    .Name("Electrical360Window")
                                    .Title("Electrical-360")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("Electrical360", "Electrical360")
                                       .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(575)
                                                 .Width(1350)
                                                 .Iframe(true)

                    )








                    @(Html.Kendo().Window()
                                    .Name("RuleEngineWindow")
                                    .Title("RuleEngine")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("RuleEngine", "RuleEngine")
                                         .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(590)
                                                 .Width(1340)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                                    .Name("SearchWindow")
                                    .Title("Search")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("Search", "Search")
                                         .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(700)
                                                 .Width(1400)
                                                 .Iframe(true)

                    )



                    @(Html.Kendo().Window()
                                    .Name("RunReportWindow")
                                    .Title("Report")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("Report", "Report")
                                         .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(610)
                                                 .Width(1340)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                                    .Name("VersionWindow")
                                    .Title("Version")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("VersionTag", "VersionTag")
                                         .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(440)
                                                 .Width(511)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                                    .Name("ClearanceWindow")
                                    .Title("Clearance")
                                   .LoadContentFrom("Clearance", "Clearance")
                                        .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(570)
                                                 .Width(1340)
                                                 .Iframe(true)

                    )
                    @(Html.Kendo().Window()
                              .Name("PropertyMapWindow")
                              .Title("Property Map")
                              .LoadContentFrom("PropertyMap", "PropertyMap")
                              .Actions(action => { action.Refresh(); action.Close(); })
                              .Draggable()
                              .Resizable()
                              .Height(550)
                              .Width(1350)
                              .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                              .Name("ADAWindow")
                              .Title("ADA")
                              .LoadContentFrom("ADA", "ADA")
                              .Actions(action => { action.Refresh(); action.Close(); })
                              .Draggable()
                              .Resizable()
                              .Height(550)
                              .Width(1400)
                              .Iframe(true)

                    )
                    @(Html.Kendo().Window()
                                    .Name("VisibilityWindow")
                                    .Title("Visibility")
                                   // .Content(Html.Partial("PartialName").ToHtmlString())
                                   .LoadContentFrom("NewDoc", "NewDoc")
                                           .Actions(action => { action.Refresh(); action.Close(); })
                                         .Draggable()
                                                .Resizable()
                                                .Height(555)
                                                 .Width(1100)
                                                 .Iframe(true)

                    )

                    @(Html.Kendo().Window()
                            .Name("SlabSlopeWindow")
                            .Title("SlabSlop")
                            .Visible(false)
                                  .Content(@<text>
                                    <div id="divCanvas">
                                        <canvas id="slopeCanvas" width="500" height="300" style="border:1px solid #d3d3d3;"></canvas>
                                    </div>
                                    <br />
                                    <div class="k-content col-xs-6" style="height:350px;overflow-x:auto;width: 200px">
                                        <table id="NonComplaintLineslope" class="table table-striped table-bordered" cellspacing="0" style="font-size: 14px;width:200px;">

                                            <thead>
                                                <tr>
                                                    <th>Line</th>
                                                    <th>Slope</th>
                                                </tr>

                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>

                                </text>
                      )
                      .Actions(action => { action.Refresh(); action.Close(); })
                      .Draggable()
                      .Resizable()
                      .Height(489)
                      .Width(543)

                    )

                    @if (Session["GID"].ToString() == "1")
                    {
                        @*<div id="SuperAdminWindow"></div>*@

                        @(Html.Kendo().Window()
                                                        .Name("SuperAdminWindow")
                                                        .Title("SuperAdmin")
                                                       // .Content(Html.Partial("PartialName").ToHtmlString())
                                                       .LoadContentFrom("SuperAdminPopUp", "Inspire")
                                                             .Actions(action => { action.Refresh(); action.Close(); })
                                                             .Draggable()
                                                                    .Resizable()
                                                                    .Height(552)
                                                                     .Width(1350)
                                                                     .Iframe(true)

                        )
                    }

                    @if (Session["GID"].ToString() == "1" || Session["GID"].ToString() == "2" || Session["GID"].ToString() == "4")
                    {
                        @(Html.Kendo().Window()
                                                        .Name("AdminWindow")
                                                        .Title("Admin")
                                                       // .Content(Html.Partial("PartialName").ToHtmlString())
                                                       .LoadContentFrom("AdminPopUp", "Inspire")
                                                             .Actions(action => { action.Refresh(); action.Close(); })
                                                             .Draggable()
                                                                    .Resizable()
                                                                    .Height(500)
                                                                     .Width(950)
                                                                     .Iframe(true)

                        )
                    }

                    @* Main Viewer DIV *@
                    @*<div id="viewer" style="height:96%"></div>*@
                    <div class="viewer-panel">
                        <div id="viewer" class="viewer-box"></div>
                        <div style="display:none" id="Divviewer2D">
                            <div id="viewer2D" style="width:200%;height:200%"></div>
                        </div>
                    </div>
                </section>
            </div>
            <div id="footernew" class="footer navbar-fixed-bottom col-xs-12" style="padding-left: 170px;position:fixed;">
                <footer class="main-footer" id="footer" style="width: 1308px;">
                    <div class="pull-right hidden-xs">
                        <b>Version</b> 1.01
                    </div>
                    <span class="logo-lg"><img src="~/content/SanveoInspire.png" style="width:12%;padding-bottom:5px"></span>
                    <strong>Copyright &copy;2017 <a href="http://www.sanveo.com/" target="_blank">Sanveo</a>.</strong> All rights reserved.
                </footer>
            </div>
           
          
        </div>
    </div>

    @* Modal popup *@
    <div class="modal fade" id="passwordModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h4>Change Password</h4>
                </div>
                <form action="javascript:ChangePassword();">
                    <div class="modal-body">
                        <div class="form-group" style="visibility:visible">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon glyphicon-lock"></span></div>
                                <input class="form-control" type="password" id="oldpwd" placeholder="Current Password" required>
                            </div>
                        </div>
                        <div class="form-group" style="visibility:visible">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon glyphicon-log-in"></span></div>
                                <input class="form-control" type="password" id="newpwd" placeholder="New Password" required>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                        <button class="btn btn-primary" type="submit">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @* progress Bar *@
    <div class="modal fade" id="DextractModal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h4 id="h4msg">Dextracting</h4>
                </div>
                <div class="modal-body">
                    <label id="lblpercent" style="display:none">0%</label>
                    <div id=@ViewBag.userid class="progressBar" style="width:100%"></div>
                </div>
            </div>
        </div>
    </div>

    @(Html.Kendo().Window()
                            .Name("FeedBack")
                            .Title("FeedBackForm")
                            .Content(@<text>
                                <div style="padding-left:50px">
                                    <h3>  Any Suggestions/Feedback?</h3>
                                    <h3>  Any Suggestions/Feedback?</h3>
                                </div>
                                <div style="padding-left:50px">
                                    <p>  Your feedback/suggestion is valuable to us . We hope it will make SanveoInspire more awesome</p>
                                </div>
                                <br />
                                <div style="padding-left:50px">
                                    <input class="form-control" type="text" id="FBtxtname" placeholder="YourName" required style="width:300px ; height:15px">
                                </div>
                                <br />
                                <div style="padding-left:50px">
                                    <textarea name="Text1" class="form-control" id="FBtxtarea" placeholder="Your Suggestion/FeedBack" cols="40" rows="3" style="width:300px"></textarea>
                                </div>
                                <br />

                                <div style="padding-left:50px">
                                    <input type="button" id="btnFBsubmit" value="!!! Submit Message !!!" style="width:300px ; color:white;background-color:darkblue" class="btn btn-default" />
                                </div>

                            </text>)
                                 .Draggable()
                                        .Resizable()
                                        .Height(350)
                                         .Width(450)

    )

    <aside id="ControlSidebar" class="control-sidebar control-sidebar-light control-sidebar-close" style="height: 93%;display:none">
        <!-- Tab panes -->
        <div class="tab-content">
            <div id="control-sidebar-theme-demo-options-tab" class="tab-pane active">
                <div>
                    <h4 class="control-sidebar-heading">Skins</h4>
                    <ul class="list-unstyled clearfix">
                        <li style="float:left; width: 33.33333%; padding: 5px;">
                            <a href="javascript:void(0);" data-skin="skin-blue" onclick="setGlobalThemeValue('skin-blue');" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">
                                <div>
                                    <span style="display:block; width: 20%; float: left; height: 7px; background: #367fa9;">
                                    </span><span class="bg-light-blue" style="display:block; width: 80%; float: left; height: 7px;">
                                    </span>
                                </div><div>
                                    <span style="display:block; width: 20%; float: left; height: 20px; background: #222d32;">
                                    </span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span>
                                </div>
                            </a><p class="text-center no-margin">Blue</p>
                        </li>
                        <li style="float:left; width: 33.33333%; padding: 5px;">
                            <a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-black');" data-skin="skin-black" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover">
                                <div style="box-shadow: 0 0 2px rgba(0,0,0,0.1)" class="clearfix">
                                    <span style="display:block; width: 20%; float: left; height: 7px; background: #fefefe;"></span>
                                    <span style="display:block; width: 80%; float: left; height: 7px; background: #fefefe;"></span>
                                </div>
                                <div>
                                    <span style="display:block; width: 20%; float: left; height: 20px; background: #222;"></span>
                                    <span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span>
                                </div>
                            </a><p class="text-center no-margin">Black</p>
                        </li>
                        <li style="float:left; width: 33.33333%; padding: 5px;">
                            <a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-purple');" data-skin="skin-purple" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-purple-active"></span><span class="bg-purple" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin">Purple</p>
                        </li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-green');" data-skin="skin-green" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-green-active"></span><span class="bg-green" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin">Green</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-red');" data-skin="skin-red" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-red-active"></span><span class="bg-red" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin">Red</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-yellow');" data-skin="skin-yellow" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-yellow-active"></span><span class="bg-yellow" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #222d32;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin">Yellow</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-blue-light');" data-skin="skin-blue-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px; background: #367fa9;"></span><span class="bg-light-blue" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px">Blue Light</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-black-light');" data-skin="skin-black-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div style="box-shadow: 0 0 2px rgba(0,0,0,0.1)" class="clearfix"><span style="display:block; width: 20%; float: left; height: 7px; background: #fefefe;"></span><span style="display:block; width: 80%; float: left; height: 7px; background: #fefefe;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px">Black Light</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-purple-light');" data-skin="skin-purple-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-purple-active"></span><span class="bg-purple" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px">Purple Light</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-green-light');" data-skin="skin-green-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-green-active"></span><span class="bg-green" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px">Green Light</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-red-light');" data-skin="skin-red-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-red-active"></span><span class="bg-red" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px">Red Light</p></li>
                        <li style="float:left; width: 33.33333%; padding: 5px;"><a href="javascript:void(0);" onclick="setGlobalThemeValue('skin-yellow-light');" data-skin="skin-yellow-light" style="display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)" class="clearfix full-opacity-hover"><div><span style="display:block; width: 20%; float: left; height: 7px;" class="bg-yellow-active"></span><span class="bg-yellow" style="display:block; width: 80%; float: left; height: 7px;"></span></div><div><span style="display:block; width: 20%; float: left; height: 20px; background: #f9fafc;"></span><span style="display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;"></span></div></a><p class="text-center no-margin" style="font-size: 12px;">Yellow Light</p></li>
                    </ul>
                </div>

            </div>

        </div>
        <div style="margin-top:10px;">
            <h6 style="margin-left:10px">Grid Themes</h6>
            <input class="themeChooser" id="themeKendo" value="default" />
        </div>
    </aside>


    <script src="@Url.Content("~")Content/Skins/bootstrap/js/bootstrap.min.js"></script>
    <!-- AdminLTE App -->
    <script src="@Url.Content("~")Content/Skins/dist/js/app.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="@Url.Content("~")Content/Skins/dist/js/demo.js"></script>
    <script src="@Url.Content("~")Content/Skins/plugins/confirm/jquery.confirm.js"></script>
    <script src="~/Scripts/table2excel.js"></script>


    @*Advance Search Bar*@

    <script type="text/javascript">
        var global2dfilevalue='';
        var View_RuleEngine = "@ViewBag.View_RuleEngine";
        var View_Report = "@ViewBag.View_Report";
        $(document).ready(function (e) {

            if (View_RuleEngine == "False") {
                $("#btnRuleEngine").hide();
            }
            if (View_Report == "False") {
                $("#btnRunReport").hide();
            }
        });

        $(document).click(function (e) {

        });

        $('#BtnAdvsearch2').click(function (e) {

            if(_URN_=="")
            {
                alert("Please Load Model")
                return;
            }

            if($('#txtSearchCategory2').val()=="")
            {
                alert("Please Enter Category Name")
                return;
            }

            if($('#txtSearchFamily2').val()=="")
            {
                alert("Please Enter Family Name")
                return;
            }
            if($('#txtSearchPropName2').val()=="")
            {
                alert("Please Enter Property Name")
                return;
            }

            if($('#SearchOptionAdv2 option:selected').text()=="")
            {
                alert("Please Select Operator")
                return;
            }
            else
            {
                if($('#txtSearchPropValue2').val()=="")
                {
                    alert("Please Enter Property Value")
                    return;
                }

            }
            $("#BindAutoTextAdvance2").html("<center style='font-size:15px'>Loading Please Wait.....</center>");
            var value = JSON.stringify({
                "Urn":_URN_,
                "Categoryname": $('#txtSearchCategory2').val(),
                "Familyname": $('#txtSearchFamily2').val(),
                "Propertyname": $('#txtSearchPropName2').val(),
                "Propertyvalue": $('#txtSearchPropValue2').val(),
                "Operator": $('#SearchOptionAdv2 option:selected').text(),

            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                data:value,
                url: '@Url.Action("GetAdvanceSearch2", "Home")',
                dataType: "json",
                success: function (result) {

                    BindAdvanceSearch2(result);
                },
                error: function (result) {

                }
            });

        });

        $('#BtnAdvsearch').click(function (e) {

            if(_URN_=="")
            {
                alert("Please Load Model")
                return;
            }

            if($('#txtSearchCategory').val()=="")
            {
                alert("Please Enter Category Name")
                return;
            }

            if($('#txtSearchPropName').val()=="")
            {
                alert("Please Enter Property Name")
                return;
            }

            if($('#SearchOptionAdv option:selected').text()=="")
            {
                alert("Please Select Operator")
                return;
            }
            else
            {
                if($('#txtSearchPropValue').val()=="")
                {
                    alert("Please Enter Property Value")
                    return;
                }

            }
            $("#BindAutoTextAdvance").html("<center style='font-size:15px'>Loading Please Wait.....</center>");
            var value = JSON.stringify({
                "Urn":_URN_,
                "Categoryname": $('#txtSearchCategory').val(),
                "Propertyname": $('#txtSearchPropName').val(),
                "Propertyvalue": $('#txtSearchPropValue').val(),
                "Operator": $('#SearchOptionAdv option:selected').text(),

            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                data:value,
                url: '@Url.Action("GetAdvanceSearch", "Home")',
                dataType: "json",
                success: function (result) {

                    BindAdvanceSearch(result);
                },
                error: function (result) {

                }
            });

        });

        function BindAdvanceSearch2(result) {
            var AutoText = "";
            var GetdetailsTable = result.detailsTable;
            if (AutoText == "") {
                $("#BindAutoTextAdvance2").html("");
            }
            AutoText += " <ul class='clearfix' style='list-style-type:none;font-size:15px;'> ";
            AutoText +='<li style="float:right;"><span class="fa fa-times" onClick="AdvClearText2();"></span></li>';

            if (GetdetailsTable != null && GetdetailsTable != undefined) {
                for (var i = 0; i < GetdetailsTable.length; i++) {
                    //console.log(GetdetailsTable[i].Category_Name);
                    AutoText += '<li class="text-light-black" style=><a style="cursor:pointer;" onclick="Forgeid('+ GetdetailsTable[i].Forgeid +');">' + GetdetailsTable[i].Category_Name + '<a/></li>';
                    AutoText += "<br/>";
                }
                AutoText += "</ul>";
            }


            if (GetdetailsTable.length == 0) {
            }
            $("#BindAutoTextAdvance2").html(AutoText);

        }

        function BindAdvanceSearch(result) {
            var AutoText = "";
            var GetdetailsTable = result.detailsTable;
            if (AutoText == "") {
                $("#BindAutoTextAdvance").html("");
            }
            AutoText += " <ul class='clearfix' style='list-style-type:none;font-size:15px;'> ";
            AutoText +='<li style="float:right;"><span class="fa fa-times" onClick="AdvClearText();"></span></li>';

            if (GetdetailsTable != null && GetdetailsTable != undefined) {
                for (var i = 0; i < GetdetailsTable.length; i++) {
                    //console.log(GetdetailsTable[i].Category_Name);
                    AutoText += '<li class="text-light-black" style=><a style="cursor:pointer;" onclick="Forgeid('+ GetdetailsTable[i].Forgeid +');">' + GetdetailsTable[i].Category_Name + '<a/></li>';
                    AutoText += "<br/>";
                }
                AutoText += "</ul>";
            }


            if (GetdetailsTable.length == 0) {
            }
            $("#BindAutoTextAdvance").html(AutoText);

        }

        function ShowSearchDiv()
        {

            if($('#txtSearch').val()!=" ")
            {

                // $("#BindAutoText").css("display", "block");
            }


        }

        function GetAutoCompleteText(e) {
            var key = e.keyCode || e.which;
            if (key == 13) {
                $("#BindAutoText").css("display", "block");

                $("#BindAutoText").html("<ul style='list-style-type:none;font-size:15px;'><li>Loading......</li></ul>");


                var URL="";
                @*if($('#txtSearch').val().indexOf('+') !== -1)
                {
                    URL='@Url.Action("GetSearchByCategoryNProperty", "Home")';

                }
                else
                {
                      URL='@Url.Action("GetAutoTextCategoryDIV", "Home")';
                }*@

                var value = JSON.stringify({
                    "Urn":_URN_,  // "dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLnFiNGR2b2ktUkJTRFU5Q29lbEVoS2c_dmVyc2lvbj0x",
                    "AutoCat": $('#txtSearch').val(),

                });
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    data:value,
                    //url: 'Home/GetAutoTextCategoryDIV',
                    url: '@Url.Action("GetSearchByCategoryNProperty", "Home")',
                    dataType: "json",

                    success: function (result) {

                        BindAutoCompleteText(result);
                    },
                    error: function (result) {

                    }
                });
            }

        }


        function BindAutoCompleteText(result) {
            var AutoText = "";
            var GetdetailsTable = result.detailsTable;
            if (AutoText == "") {
                $("#BindAutoText").html("");
            }
            AutoText += " <ul class='clearfix' style='list-style-type:none;font-size:15px;'> ";
            AutoText +='<li style="float:right;"><span class="fa fa-times" onClick="ClearText();"></span></li>';

            if (GetdetailsTable != null && GetdetailsTable != undefined) {
                for (var i = 0; i < GetdetailsTable.length; i++) {
                    //console.log(GetdetailsTable[i].Category_Name);
                    AutoText += '<li class="text-light-black" style=><a style="cursor:pointer;" onclick="Forgeid('+ GetdetailsTable[i].Forgeid +');">' + GetdetailsTable[i].Category_Name + '<a/></li>';
                    AutoText += "<br/>";
                }
                AutoText += "</ul>";
            }


            if (GetdetailsTable.length == 0) {
            }
            $("#BindAutoText").html(AutoText);

        }

        function highlight(Id)
        {
            alert("RevitId- "+Id);
        }
        function AdvClearText2()
        {
            $('#txtSearchCategory2').val(" "),
                $('#txtSearchPropName2').val(" "),
                $('#txtSearchPropValue2').val(" "),
            $('#txtSearchFamily2').val(" ")
            $("#BindAutoTextAdvance2").html("");
        }
        function AdvClearText()
        {
            $('#txtSearchCategory').val(" "),
             $('#txtSearchPropName').val(" "),
             $('#txtSearchPropValue').val(" "),

           $("#BindAutoTextAdvance").html("");
        }
        function ClearText()
        {

            $('#txtSearch').val(" ");
            $("#BindAutoText").html("");
        }
        function clickme()
        {

            if( $('#txtSearch').css('display') == 'none')
            {
                $('#txtSearch').css('display','block');
                $("#BindAutoText").css("display", "block");

                $('#pu_viewToLoad').css('display','none');
                $('#pu_FileToLoad').css('display','none');
                $(".draggable").css("display", "none");
                $("#Divviewer2D").data("kendoWindow").close();
                $("#DivAutotext").data("kendoWindow").open();

            }
            else
            {
                $('#txtSearch').css('display','none');
                $("#BindAutoText").css("display", "none");

                $('#pu_viewToLoad').css('display','none');
                $('#pu_FileToLoad').css('display','none');
                $(".draggable").css("display", "none");
                $("#Divviewer2D").data("kendoWindow").close();
                $("#DivAutotext").data("kendoWindow").close();

            }

        }

        function clickMarkup()
        {
            $("#DivMarkUp").data("kendoWindow").open();

        }

        function sidebargear()
        {

            if ($("#ControlSidebar").css('display') == 'none') {
                $("#ControlSidebar").css('display', 'block');
                $("#ControlSidebar").removeClass("control-sidebar-close");
                $("#ControlSidebar").addClass("control-sidebar-open");

            }
            else if ($("#ControlSidebar").css('display') == 'block') {
                $("#ControlSidebar").css('display', 'none');
                $("#ControlSidebar").addClass("control-sidebar-close");
                $("#ControlSidebar").removeClass("control-sidebar-open");
            }

        }

    </script>
    @* Theme Sidebar  *@

    <script type="text/javascript">

        var mastertheme = '';
        var KendoThemeGlobal = '';
        var mainThemeValue=''
        LoadUserKendoGlobalTheme();

        function LoadUserKendoGlobalTheme()
        {
            $.ajax({
                url: '@Url.Action("GetThemeBasedOnUserId", "LayoutData")',

                type: "post",
                success: function (response) {
                    var dbkendovalue = response.kendos;
                    mainThemeValue=response.globals;
                    //console.log(response.kendos);


                    if(mainThemeValue=="skin-black" || mainThemeValue=="skin-black-light")
                    {
                        $('a.logo').css("color", "black");
                    }
                    else if (mainThemeValue == "" || mainThemeValue == undefined)
                    {
                        mainThemeValue="skin-blue";
                    }
                    else
                    {
                        $('a.logo').css("color", "white");
                    }


                    var clsName=$('body').attr('class');

                    $("body").removeClass(clsName);
                    $("body").addClass("sidebar-mini k-content "+ mainThemeValue);
                    // document.getElementById("kendoCSS").href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo."+dbkendovalue+".min.css";
                    //   var root = document.getElementsByTagName( 'html' )[0];
                    //   root.className += ' k-'+dbkendovalue;


                    var dropdownlists = $("#themeKendo").data("kendoDropDownList");
                    dropdownlists.select(function (dataItem) {

                        if(dbkendovalue==undefined)
                        {
                            return dataItem.text==='Default';
                        }
                        else
                        {
                            return dataItem.text === dbkendovalue;
                        }


                    });


                },
                error: function (xhr, ajaxOptions, thrownError) {
                }
            });
        }

        $(function () {

            $(document.body).addClass("k-content");

            // theme chooser dropdown
            //kendo theme saving starts
            $(".themeChooser").kendoDropDownList({
                dataSource: [
                  { text: "Black", value: "black" },
                  { text: "Blue Opal", value: "blueopal" },
                  { text: "Default", value: "default" },
                  { text: "Material", value: "material" },
                  { text: "Metro", value: "metro" },
                  { text: "Silver", value: "silver" },
                { text: "BootStrap", value: "bootstrap" },
                { text: "Flat", value: "flat" },
                { text: "HighContrast", value: "highcontrast" },
                { text: "MaterialBlack", value: "MaterialBlack" },
                { text: "Fiori", value: "fiori" },
                { text: "Nova", value: "nova" },
                { text: "MoonLight", value: "moonlight" },
                { text: "MetroBlack", value: "metroblack" }
                ],
                dataTextField: "text",
                dataValueField: "value",
                change: function (e) {
                    var theme = (this.value() || "default").toLowerCase();;
                    mastertheme = theme;
                    changeTheme(theme);
                    saveTheme(this.text());
                }
            });

            function saveTheme(theme) {
                $.ajax({
                    url: '@Url.Action("SaveKendoThemeBasedOnUserId", "LayoutData")',
                    data: { 'themeval': theme },
                    type: "post",
                    success: function (response) {

                    },
                    error: function (xhr, ajaxOptions, thrownError) {

                    }
                });

            }


            function changeTheme(skinName) {

                var doc = document,
                    kendoLinks = $("link[href*='kendo.']"),
                    commonLink = kendoLinks.filter("[href*='kendo.common']"),
                    skinLink = kendoLinks.filter(":not([href*='kendo.common'])"),
                    href = location.href,
                    skinRegex = /kendo\.\w+(\.min)?\.css/i,
                    extension = skinLink.attr("rel") === "stylesheet" ? ".css" : ".less",
                    newSkinUrl = skinLink.attr("href").replace(skinRegex, "kendo." + skinName + "$1" + extension);

                var browser = kendo.support.browser,
                   oldSkinName = $(doc).data("kendoSkin"),
                   newLink;
                if (browser.msie && browser.version < 10) {
                    newLink = doc.createStyleSheet(newSkinUrl);
                } else {
                    newLink = skinLink.eq(0).clone().attr("href", newSkinUrl);
                    newLink.insertBefore(skinLink[0]);
                }
                skinLink.remove();
                $(doc.documentElement).removeClass("k-" + oldSkinName).addClass("k-" + skinName);
            };

        });

        function setGlobalThemeValue(skinname)
        {
            if(skinname=="skin-black" || skinname=="skin-black-light")
            {
                $('a.logo').css("color", "black");
            }

            else
            {
                $('a.logo').css("color", "white");
            }

            $.ajax({
                url: '@Url.Action("SaveGlobalThemeBasedOnUserId", "LayoutData")',
                data: { 'themeval': skinname },
                type: "post",
                success: function (response) {
                },
                error: function (xhr, ajaxOptions, thrownError) {
                }
            });

            setTimeout(function () {

                getWindowHeadercolor();

            }, 1000);
        }

    </script>


    <!-- Script for Main Layout -->
    <script type="text/javascript">
        var mastertheme = '';
        $(document).ready(function () {
            var checkforadmin="@Session["GID"].ToString()";
            var val = '@ViewBag.ViewSanveo';
            SetCurrentUserProfileInfo();
            //SetProfilePicInLayout();
            document.getElementById("defaultOpen").click();
            $('.dropdown-menu').click(function (e) {
                if (e.target.nodeName !== 'BUTTON') e.stopPropagation();
            });
            var window = $("#FeedBack").data("kendoWindow").close();
            if (checkforadmin == "1" || checkforadmin == "2" || checkforadmin == "4"){
                var window = $("#AdminWindow").data("kendoWindow").close();
            }
            $("#CobieExcel").data("kendoWindow").close();
            $("#QuantityWindow").data("kendoWindow").close();
            $("#QuantityTestWindow").data("kendoWindow").close();
            $("#ADAClearanceWindow").data("kendoWindow").close();
            $("#Electrical360Window").data("kendoWindow").close();
            $("#RuleEngineWindow").data("kendoWindow").close();
            $("#SearchWindow").data("kendoWindow").close();
            $("#RunReportWindow").data("kendoWindow").close();
            $("#VersionWindow").data("kendoWindow").close();
            if(checkforadmin==1){

                $("#SuperAdminWindow").data("kendoWindow").close();
            }
            $("#ClearanceWindow").data("kendoWindow").close();
            $("#VisibilityWindow").data("kendoWindow").close();
            $("#PropertyMapWindow").data("kendoWindow").close();
            $("#ADAWindow").data("kendoWindow").close();
            GetCompanyLogo();

            getWindowHeadercolor();
        });

        function opentab(cityName,elmnt) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablink");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].style.backgroundColor = "";
            }
            document.getElementById(cityName).style.display = "block";
            elmnt.style.backgroundColor= '#808080';
        }

        function ChangePassword() {
            if ($("#newpwd").val().length < 8) {
                alert("Password Should Be Atleast 8 Characters");
            }
            else if (!$("#newpwd").val().match(/[A-z]/)) {
                alert("Password Should Be Atleast 1 Small Letter");
            }
            else if (!$("#newpwd").val().match(/[A-Z]/)) {
                alert("Password Should Be Atleast 1 Capital Letter");
            }
            else if (!$("#newpwd").val().match(/\d/)) {
                alert("Password Should Be Atleast 1 Number");
            }
            else if ($("#newpwd").val().length >= 8) {
                var value = JSON.stringify({
                    'oldpass': $("#oldpwd").val(),
                    'newpass': $("#newpwd").val()
                });
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("ChangePassword", "LayoutData")',
                    dataType: "json",
                    data: value,
                    success: function(result) {
                        alert(result);
                        if (result == "Password Updated Successfully") {
                            $("#oldpwd").val('');
                            $("#newpwd").val('');
                            $('#passwordModal').modal('hide');
                        }
                    },
                    error: function(result) {
                        //alert("Error while saving Data");
                    }
                });
            }
        }

        function SetCurrentUserProfileInfo() {

            var fullname = "@Session["FullName"].ToString()";
            var emailid = "@Session["EmailId"].ToString()";
            var groupname = "@Session["GroupName"].ToString()";
            var companyname = "@Session["CompanyName"].ToString()";
            $("#Userfullname").text(fullname);
            $("#MailId").text(emailid);
            if (groupname == null)
                groupname = ' - ';

            $("#Designation").text("Group : " + groupname);
            $("#Company").text("Company : " + companyname);
            //$("#UserName").text(result.username);
            $("#UserName").text(fullname);
            if (emailid == null) {
                emailid = ' - ';
            }

            $("#EmailId").text(emailid);

            @*$.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("SetCurrentUserProfileInfo", "LayoutData")',
                dataType: "json",
                success: function (result) {
                    $("#Userfullname").text(result.firstname + " " + result.lastname);
                    $("#MailId").text(result.emailid);
                    if (result.groupname == null)
                        result.groupname = ' - ';
                    $("#Designation").text("Group : " + result.groupname);
                    $("#Company").text("Company : " + result.compname);
                    //$("#UserName").text(result.username);
                    $("#UserName").text(result.firstname + " " + result.lastname);
                    if (result.emailid == null)
                        result.emailid = ' - ';
                    $("#EmailId").text(result.emailid);
                },
                error: function (result) {
                    // alert("Error");
                }
            });*@
        }

        function SyncFiles() {

            if ('@ViewBag.compType' == "Personal Account") {
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetLatestPersoanl", "Home")',
                    dataType: 'json',
                    success: function (data) {
                        alert("Sync Successfully done")
                        loadfileData();
                    },
                    error: function () {
                        alert('error');
                    }
                });

            }
            else  if ('@ViewBag.compType' == "Enterprise 360 Account") {

                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetLatestEnterPrise", "Home")',
                    dataType: 'json',
                    success: function (data) {
                        alert("Sync Successfully done")
                        loadfileData();
                        //alert(data);
                    },
                    error: function () {
                        alert('error');
                    }
                });
            }


        }


    </script>

    <!-- Script for Viewer Load -->
    <script src="~/Scripts/loadModel.js"></script>
    <script src="~/Scripts/boudingboxextension.js"></script>
    <script>

        viewer.window = '';
        function authMe() { return (_ACCESS_TOKEN_); }
        function initialize (u) {
            var globalOffset='';
            var options = {
                document: "urn:" + u,
                env: 'AutodeskProduction',
                getAccessToken: authMe,
                globalOffset:'',
            };
            if(viewer){
                if(viewer.impl.selector){
                    viewer.tearDown();
                    viewer.finish();
                    viewer=null;
                }
            }

            var config3d = {
                extensions: ['MyAwesomeExtension']
            };



            var viewerElement = document.getElementById('viewer');
            viewer = new Autodesk.Viewing.Private.GuiViewer3D(viewerElement, {});
            Autodesk.Viewing.Initializer(options, function () {
                viewer.initialize();
                //console.log(u);
                for (var i = 0; i < u.length; i++) {
                    ////console.log(u[i]);
                    //loadDocument(viewer, "urn:" + u[i]);
                    if(i>0){
                        viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, function () {
                            globalOffset = viewer.model.getData().globalOffset;
                            options = {globalOffset: globalOffset}
                            //console.log("globalOffset");
                            //console.log(globalOffset);
                        });
                        loadDocument(viewer, "urn:" + u[i]);
                    }
                    else
                        loadDocument(viewer, "urn:" + u[i]);
                }
            });



            //Autodesk.Viewing.Initializer(options, function () {

            //    var config3d = {
            //        extensions: ['MyAwesomeExtension']
            //    };

            //    for (var i = 0; i < u.length; i++) {
            //        viewer = new Autodesk.Viewing.ViewingApplication('viewer');
            //        viewer.registerViewer(viewer.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);
            //        viewer.loadDocument("urn:" + u[0], onDocumentLoadSuccess, onDocumentLoadFailure);
            //    }


            //});
        }

        function loadDocument(viewer, documentId) {
            Autodesk.Viewing.Document.load(
                documentId,
                function (doc) {
                    var geometryItems = [];
                    geometryItems = Autodesk.Viewing.Document.getSubItemsWithProperties(
                        doc.getRootItem(),
                        { 'type': 'geometry', 'role': '3d' },
                        true
                    );

                    viewer.loadExtension("Autodesk.InViewerSearch");
                    $(".adsk-button-icon-search").addClass("fa fa-search");

                    if (geometryItems.length <= 0) {
                        geometryItems = Autodesk.Viewing.Document.getSubItemsWithProperties(
                            doc.getRootItem(),
                            { 'type': 'geometry', 'role': '2d' },
                            true
                        );
                    }
                    if (geometryItems.length > 0)
                        viewer.load(
                            doc.getViewablePath(geometryItems[0])//,
                        );
                },
                function (errorMsg) { // onErrorCallback
                    alert("Load Error: " + errorMsg);
                }
            );
        }

        function onDocumentLoadSuccess(doc) {

            // We could still make use of Document.getSubItemsWithProperties()
            // However, when using a ViewingApplication, we have access to the **bubble** attribute,
            // which references the root node of a graph that wraps each object from the Manifest JSON.

            console.log("onDocumentLoadSuccess(doc)");
            viewer.impl.canvas.addEventListener('mousedown', function (e) {

                // Get 2D drawing dimension
                var layoutBox = viewer.impl.getVisibleBounds();
                var width = layoutBox.max.x - layoutBox.min.x;
                var height = layoutBox.max.y - layoutBox.min.y;

                var viewport = viewer.impl.clientToViewport(e.clientX, e.clientY);
                var point = [viewport.x * width, viewport.y * height, viewport.z];

                // Show the 2D drawing X, Y coordinates on mouse click
                console.log("point");
                console.log(point);
            });
          iewer.bubble.search({ 'type': 'geometry' });
            if (viewables.length === 0) {
                console.error('Document contains no viewables.');
                return;
            }
            viewer.selectItem(viewables[0].data, onItemLoadSuccess, onItemLoadFail);
        }

        function onDocumentLoadFailure(viewerErrorCode) {
            console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);
        }

        function onItemLoadSuccess(viewer, item) {

        }

        function onItemLoadFail(errorCode) {
            console.error('onItemLoadFail() - errorCode:' + errorCode);
        }


        function onDocumentLoadSuccess(doc) {

            console.log("onDocumentLoadSuccess(viewer, item)");
            viewer.impl.canvas.addEventListener('mousedown', function (e) {
                // Get 2D drawing dimension
                var layoutBox = viewer.impl.getVisibleBounds();
                var width = layoutBox.max.x - layoutBox.min.x;
                var height = layoutBox.max.y - layoutBox.min.y;

                var viewport = viewer.impl.clientToViewport(e.clientX, e.clientY);
                var point = [viewport.x * width, viewport.y * height, viewport.z];

                // Show the 2D drawing X, Y coordinates on mouse click
                console.log("point");
                console.log(point);
            });


        }


        function onItemLoadFail(errorCode) {
            console.error('onItemLoadFail() - errorCode:' + errorCode);
        }


        //function onDocumentLoadFailure(viewerErrorCode) {
        //    console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);
        //}

        //var modelid = '';
        //function onLoadModelError(viewerErrorCode) {
        //    console.error('onLoadModelError() - errorCode:' + viewerErrorCode);
        //}

        function Forgeid(id) {
            var id1 = parseInt(id);
            viewer.showAll();
            viewer.impl.selector.setSelection(id1, viewer.model);
            viewer.fitToView(id1);
            viewer.isolateById(id1);

            viewer.impl.selector.setSelection(id1, viewer.model);
            viewer.fitToView(id1);
            viewer.isolateById(id1);

        }

        function DisableElements(dbIds)
        {
            console.log(dbIds);
            //viewer.showAll();
            //viewer.hide(dbIds);
            var vm = new Autodesk.Viewing.Private.VisibilityManager(viewer.impl, viewer.model);
            for (var i = 0; i < dbIds.length; i++) {
                vm.setNodeOff(dbIds[i], true);
            }
        }

        function EnableElements(urn){
            //console.log(dbIds);
            //var vm = new Autodesk.Viewing.Private.VisibilityManager(viewer.impl, viewer.model);
            //for (var i = 0; i < dbIds.length; i++) {
            //    vm.setNodeOn(dbIds[i], true);
            //}
            var dd = [];
            dd[0] = urn;
            console.log(urn);
            initialize(dd);
            // loadDocument(viewer,"urn:" +urn);
        }

        function Load2d3d(){
            if (viewer==undefined) {
                var inURN=[];
                inURN.push($("#pu_FileToLoad option:selected").val());
                //console.log(inURN);
                _ACCESS_TOKEN_ = "";
                _URN_ = "";
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetAuthentication", "Home")',
                    dataType: "json",
                    success: function (result) {
                        _ACCESS_TOKEN_ = result.auth;
                        initialize(inURN);
                        loadInitialModel($("#pu_FileToLoad option:selected").val());
                    },
                });
            }
            else{
                loadInitialModel($("#pu_FileToLoad option:selected").val());
            }
        }

        function Show2D(){
            if(viewer!=undefined)
            {
                $('#pu_FileToLoad').val(global2dfilevalue);
            }
            if( $('#pu_viewToLoad').css('display') == 'none')
            {
                $('#pu_viewToLoad').css('display','block');
                $('#pu_FileToLoad').css('display','block');
                $(".draggable").css("display", "block");
                $('#txtSearch').css('display','none');
                $("#BindAutoText").css("display", "none");
                $("#Divviewer2D").data("kendoWindow").open();
              //  $("#btnAutoSearch").css("display", "none");
                $("#DivAutotext").data("kendoWindow").close();
            }
            else
            {
                $('#pu_viewToLoad').css('display','none');
                $('#pu_FileToLoad').css('display','none');
                $(".draggable").css("display", "none");
                $('#txtSearch').css('display','none');
                $("#BindAutoText").css("display", "none");
                $("#Divviewer2D").data("kendoWindow").close();
              //  $("#btnAutoSearch").css("display", "block");
                $("#DivAutotext").data("kendoWindow").close();
            }

            if((_URN_ == "" || _URN_ == undefined || _URN_ == null) || (Version_No == "" || Version_No == undefined || Version_No == null))
            {
                e.preventDefault();
            }
            else
            {
                Load2d3d();
            }
        }

        $(document).ready(function () {
            $("#Divviewer2D").kendoWindow({
                modal:false,
                resizable: true,
                draggable: true,
                title:"2D view",
                width:"25%",
                height:"40%",
                position: {
                    top: "35%",
                    left: "70%"
                },
                close: function() {
                    $('#pu_viewToLoad').css('display','none');
                    $('#pu_FileToLoad').css('display','none');
                }
            }).data("kendoWindow");
            // $("#Divviewer2D").parent().find(".k-window-action").css("visibility", "hidden");

            var  kwindow= $("#DivAutotext").kendoWindow({
                modal:false,
                resizable: true,
                draggable: true,
                title:"Search",
                width:"35%",
                height:"65%",
                position: {
                    top: "7%",
                    left: "60%"
                },
                actions: ["Close"],
            }).data("kendoWindow");
            // $("#DivAutotext").parent().find(".k-window-action").css("visibility", "hidden");

            var  kwindow= $("#DivMarkUp").kendoWindow({
                modal:false,
                resizable: true,
                draggable: true,
                title:"Markup Extension",
                width:"25%",
                height:"38%",
                position: {
                    top: "7%",
                    left: "60%"
                },
                actions: ["Close"],
            }).data("kendoWindow");

        });


    </script>

    <!-- Script for Drag Bar -->
    <script>
        var min = 230;
        var max = 3600;
        var mainmin = 200;

        $('#split-bar').mousedown(function (e) {
            e.preventDefault();
           

            $(document).mousemove(function (e) {
                e.preventDefault();

                $('#footernew').css("padding-left","0px");
                var x = e.pageX - $('#sidebar').offset().left;
                if (x > min && x < max && e.pageX < ($(window).width() - mainmin)) {
                    $('#sidebar').css("width", x);
                    $('#main').css("margin-left", x);
                    $('#footer').css("margin-left", x);
                }
            })
        });
        $(document).mouseup(function (e) {
            $(document).unbind('mousemove');
        });


        var i = 0;
        var dragging = false;
        $('#dragbar').mousedown(function (e) {
            e.preventDefault();
            dragging = true;
            var main = $('#main');
            var ghostbar = $('<div>',
                             {
                                 id: 'ghostbar',
                                 css: {
                                     height: main.outerHeight(),
                                     top: main.offset().top,
                                     left: main.offset().left
                                 }
                             }).appendTo('body');

            $(document).mousemove(function (e) {
                ghostbar.css("left", e.pageX + 2);
            });
        });

        $(document).mouseup(function (e) {
            if (dragging) {
                var percentage = (e.pageX / window.innerWidth) * 100;
                var mainPercentage = 100 - percentage;
                $('#console').text("side:" + percentage + " main:" + mainPercentage);
                $('#sidebar').css("width", percentage + "%");
                $('#main').css("width", mainPercentage + "%");
                $('#ghostbar').remove();
                $(document).unbind('mousemove');
                dragging = false;
            }
        });


    </script>

    <!-- Script for Pop size define -->
    <script type="text/javascript">
        var _ACCESS_TOKEN_ = "";
        var _URN_ = "";
        var propIds = "";
        var searchText = "";
        var finalST = "";
        var Version_No = "";


        var tblddat = "";
        var tblddat1 = "";
        var runrulecnt = 0;
        var gridcount;
        var dashcoldata = "";

        $(document).ready(function () {


            $(progressuserbar).kendoProgressBar({
                min: 0,
                max: 100,
                type: "percent",
                change: onChangeProgressBar
            });

            $("#Projectfiles").closest(".k-upload-button").find("span").text("Upload");

        });

    </script>

    <!-- Script Dextract and Delete Upload files and Zoom   -->
    <script type="text/JavaScript">
        var DextractFileName = "";
        $("#BtnDeleteFile").click(function () {

            var moddata = JSON.stringify({
                'ModelName': modelnames
            });
            if (confirm("Do you really want to delete?")) {
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("DeleteModelFile", "Home")',
                    data: moddata,
                    dataType: "json",
                    success: function (result) {
                        alert("Model File Deleted Successfully");
                    },
                    error: function (result) {
                        alert("Error in deleting File");
                    }
                });
            }
            else { }

        });

        $("#btnGetData").click(function (e) {
            if((_URN_ == "" || _URN_ == undefined || _URN_ == null) || (Version_No == "" || Version_No == undefined || Version_No == null))
            {
                alert("Please select model");
                e.preventDefault();
            }
            else {
                if (confirm("Do you really want to Dextract. It will take some time?")) {
                    var DextractText="Dextracting "+DextractFileName;


                    var afterDot = DextractFileName.substr(DextractFileName.lastIndexOf('.') + 1);
                    console.log(afterDot);

                    document.getElementById("h4msg").innerHTML = DextractText;

                    $("#DextractModal").modal('show');
                    progress();
                    var moddata = JSON.stringify({
                        'ModelData': _URN_,
                        'VersionNo': Version_No
                    });

                    if(afterDot=="nwd ")
                    {
                        $.ajax({
                            type: "POST",
                            contentType: 'application/json',
                            url: '@Url.Action("SaveModelDataNwd", "Home")',
                            data: moddata,
                            dataType: "json",
                            success: function (result) {
                                $("#DextractModal").modal('hide');
                                $("#treeviewmodel li span[id='"+_URN_+"']").remove();
                                $("#treeview span[id='"+_URN_+"']").remove();
                                $("#prjname  span[id='"+_URN_+"']").remove();
                            },
                            error: function (result) {
                                alert("Select Model or Try After Some Time.");
                            }
                        });
                    }
                    else
                    {
                        $.ajax({
                            type: "POST",
                            contentType: 'application/json',
                            url: '@Url.Action("SaveModelData", "Home")',
                            data: moddata,
                            dataType: "json",
                            success: function (result) {
                                $("#DextractModal").modal('hide');
                                $("#treeviewmodel li span[id='"+_URN_+"']").remove();
                                $("#treeview span[id='"+_URN_+"']").remove();
                                $("#prjname  span[id='"+_URN_+"']").remove();
                            },
                            error: function (result) {
                                alert("Select Model or Try After Some Time.");
                            }
                        });
                    }
                }
            }
        });

        $("#btnZoom").click(function () {
            viewer.clearSelection();
            viewer.fitToView();

        });

        function GetCompanyLogo(){
            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetCompanyLogo", "Inspire")',
                dataType: "json",
                // data: value,
                success: function (result) {
                    var path = "@Url.Content("~")" +"Content/" +result;
                    //console.log(result);
                    //console.log(path);
                    var path1="~/content/"+path;
                    //console.log(path1);
                    if(result!="")
                        $("#CompanyLogo").attr('src', path);


                },
                error: function (result) {
                    // alert(result);

                }
            });
        }

    </script>

    <!-- Script for Popup click Events and Page Load and progress bar -->
    <script type="text/JavaScript">

        var modelnames = '';
        loadfileData();
        var foldercheck = "";
        var fck = "";
        var foldern = 1;

        var filecheck = "";
        var fil = "";
        var fileee = 1;
        var progressuserbar=@ViewBag.userid;

        function loadfileData() {
            var act = "";
            $("#divtreeview ul").html('<li style="text-align:center;color:white">Loading.. Please Wait !!</li>');
            if($("#GetLatestChk").prop("checked")){
                act = '@Url.Action("GetFileUploadData_LatestVersion", "Home")';
            }
            else{
                act = '@Url.Action("GetFileUploadData", "Home")';
            }
            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: act,
                dataType: "json",
                success: function (result) {
                    var treefile = "";
                    foldercheck="0";
                    fck="1";
                    var Data = result.split('|');
                    var cnt = Data.length;

                    treefile = "";
                    if (Data.length > 0) {
                        for (var i = 0; i < Data.length - 1; i++) {
                            var rt = Data[i].split(',');
                            var filename = rt[1].split("<span");
                            $("#pu_FileToLoad").append('<option value="'+rt[0]+'">'+rt[1]+'</option>');
                            if (rt[0].length == 0)
                                treefile += '<li><a href="javascript:void(0);"><i class="fa fa-folder"></i><span>' + rt[2] + '</span></a>' + '</li>';
                            else {
                                foldercheck = rt[2];
                                if (foldercheck != fck) {

                                    if (fileee == 2)
                                        treefile += '</ul></li></li></ul>';
                                    if (foldern == 2)
                                        treefile += '</ul></li></li></ul>';

                                    treefile += '<li class="treeview">';
                                    treefile += '<a href="javascript:void(0);"><i class="fa fa-folder" style="color:#fbd58c"></i><span>' + rt[2] + '</span><i class="fa fa-angle-left pull-right"></i> </a>';
                                    treefile += '<ul class="treeview-menu" style="padding-left:15px;line-height:0px;">';
                                    treefile += '<li class="treeview">';
                                    treefile += '<a href="javascript:void(0);"><i class="fa fa-folder" style="color:#fbd58c"></i><span>' + rt[4] + '</span><i class="fa fa-angle-left pull-right"></i> </a>';
                                    treefile += '<ul class="treeview-menu" style="padding-left:15px;line-height:0px;">';
                                    treefile += '<li class="treeview" urn-id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] + '" >';
                                    treefile += '<a href="javascript:void(0);"><label><input type="checkbox" class="submenu-linkclick" id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] +'">&nbsp;';
                                    if (rt[1].toLowerCase().indexOf(".rvt") >= 0) {
                                        treefile += '<i class="fa fa-registered" style="color:#fff"></i>';
                                    }
                                    if (rt[1].toLowerCase().indexOf(".nwd") >= 0) {
                                        treefile += '<img src="../Content/Nlogo.png" style="height:20px;width:20px"/>';
                                    }
                                    else {
                                        treefile += '';
                                    }
                                    treefile += '<span> ' + rt[1] + '</span></label></a></li>';

                                    foldern = 2;
                                    fck = foldercheck;

                                    fil = rt[4];
                                }
                                else if (foldercheck == fck) {
                                    foldern = 2;
                                    filecheck = rt[4]
                                    if (filecheck != fil) {
                                        treefile += '</ul></li></li></ul>';
                                        treefile += '<ul class="treeview-menu" style="padding-left:15px;line-height:0px;">';
                                        treefile += '<li class="treeview">';
                                        treefile += '<a href="javascript:void(0);"><i class="fa fa-folder" style="color:#fbd58c"></i><span>' + rt[4] + '</span><i class="fa fa-angle-left pull-right"></i></a>';
                                        treefile += '<ul class="treeview-menu" style="padding-left:15px;line-height:0px;">';
                                        treefile += '<li class="treeview" urn-id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] + '" >';
                                        treefile += '<a href="javascript:void(0);"><label><input type="checkbox" class="submenu-linkclick" id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] +'">&nbsp;';
                                        if (rt[1].toLowerCase().indexOf(".rvt") >= 0) {
                                            treefile += '<i class="fa fa-registered"></i>';
                                        }
                                        if (rt[1].toLowerCase().indexOf(".nwd") >= 0) {
                                            treefile += '<img src="../Content/Nlogo.png" style="height:20px;width:20px"/>';
                                        }
                                        else {
                                            treefile += '';
                                        }
                                        treefile += '<span> ' + rt[1] + '</span></label></a></li>';
                                        fil = rt[4];
                                        fileee = 2;
                                    }
                                    else {
                                        fileee = 2;
                                        treefile += '<li class="treeview" urn-id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] + '" >';
                                        treefile += '<a href="javascript:void(0);"><label><input type="checkbox" class="submenu-linkclick" id="' + rt[0] + '" file-name="' + rt[1] + '" version-no="' + rt[3] +'">&nbsp;';
                                        if (rt[1].toLowerCase().indexOf(".rvt") >= 0) {
                                            treefile += '<i class="fa fa-registered" style="color:#fff"></i>';
                                        }
                                        if (rt[1].toLowerCase().indexOf(".nwd") >= 0) {
                                            treefile += '<img src="../Content/Nlogo.png" style="height:20px;width:20px"/>';
                                        }
                                        else {
                                            treefile += '';
                                        }
                                        treefile += '<span> ' + rt[1] + '</span></a></label></li>';
                                    }

                                }
                            }
                        }

                        treefile += '</ul></li></li></ul>';
                        $("#divtreeview ul").html('');
                        $("#divtreeview ul").append(treefile);
                    }
                },
            });
        }


        $(document).on('change', "input.submenu-linkclick", function () {
            $("#divtreeviewmodel ul").html('');
            databind = "";
            Version_No = "";
            $("a").find("input:checked").each(function () {
                databind += '<li class="treeview" style="color:White;"><span class="fa fa-times-circle liclose" style="cursor:pointer;color:#cc3f3f" urn="' + $(this).attr("id") + '"> </span>&nbsp;' + $(this).attr("file-name") + ' </li> ';
            });
            $("#divtreeviewmodel ul").append(databind);
            var name = $(this).attr("file-name");
            var itemId = $(this).attr("id");
            Version_No = $(this).attr("version-no");

            var n = name.indexOf('<');
            DextractFileName=name.substring(0, n != -1 ? n : name.length);
            $("#viewer").html('');

            if(databind!=""){
                $("#prjname").html("");
                $("#prjname").append("<b>" + name + "</b>");
                var prjId = "";
                prjId = itemId;

                _ACCESS_TOKEN_ = "";
                _URN_ = "";
                _URN_ = prjId.trim();
                global2dfilevalue=_URN_;
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetAuthentication", "Home")',
                    dataType: "json",
                    success: function (result) {
                        _ACCESS_TOKEN_ = result.auth;
                        var urndetails = [];
                        $("a").find("input:checked").each(function () {

                            urndetails.push(this.id);
                        });
                        initialize(urndetails);
                    },
                });
            }
        });

        $(document).on('click', ".liclose", function () {
            //console.log($(this).attr("urn"));
            $(this).parent("li").remove();
            $("[id=" + $(this).attr("urn") + "][type=checkbox]").prop('checked', false);
            $("#divtreeviewmodel ul").html('');
            databind = "";
            Version_No = "";
            $("a").find("input:checked").each(function () {
                databind += '<li class="treeview" style="color:White;"><span class="fa fa-times-circle liclose" style="cursor:pointer;color:#cc3f3f" urn="' + $(this).attr("id") + '"> </span>&nbsp;' + $(this).attr("file-name") + ' </li> ';
            });
            $("#divtreeviewmodel ul").append(databind);
            $("#viewer").html('');

            if(databind!=""){
                _ACCESS_TOKEN_ = "";
                _URN_ = "";
                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetAuthentication", "Home")',
                    dataType: "json",
                    success: function (result) {
                        _ACCESS_TOKEN_ = result.auth;
                        var urndetails = [];
                        $("a").find("input:checked").each(function () {
                            _URN_ = this.id;
                            urndetails.push(this.id);
                        });
                        initialize(urndetails);
                    },
                });
            }
        });

        $(document).on('click', "li.treeview", function (e) {
            e.stopPropagation();
            $(this).find("> ul").slideToggle();
            $(this).siblings("li").find("> ul").slideUp();
        });

        $(document).on('click', ".sidebar-toggle", function () {
            if ($(".main-sidebar").css('display') != 'none')
            {
                $("#sidebar").css('width', '400px');
                $(".main-sidebar").hide(100);
                $("#main").css('margin-left', '0px');
                $(".main-footer").css('margin-left', '0px');
                $(".viewer-panel").css('width', '97%');
                $("#viewer").css('width', '100%');
            }
            else if ($(".main-sidebar").css('display') == 'none') {
                $(".main-sidebar").show(100);
                $("#main").css('margin-left', '400px');
                $(".main-footer").css('margin-left', '400px');
                $(".viewer-panel").css('width', '75%');
                resizeWrapper();
            }
        });





        function clearall() {
            $("#divtreeviewmodel ul").html('');
            $("#viewer").html('');
            $("a").find("input:checked").each(function () {
                $(this).prop('checked', false);
            });

        }

        var modeldata;
        var viewer;
        var listdata = "";
        var rootName = "";
        var listnodeid = [];
        var catgarray = [];
        var listnodecategory = [];
        var listnodecategoryModel = [];


        $("#tree").kendoTreeView(
            {
                select: function (event) {
                    var $item = $(event.node);
                    //console.log($item);
                }
            })
            .on('dblclick', '.k-in', function (event) {

                $target = $(event.target);
                $target.editable(function (value, settings) {
                    return value;
                },
                    {
                        event: 'dblclick',
                        cssclass: 'treeInlineEdit'
                    });

                $target.trigger('dblclick', [event]);

            });


        function onChangeProgressBar(e) {
            this.progressWrapper.css({
                "background-color": "#00a65a",
                "border-color": "#00a65a"
            });
            $("#lblpercent").text(countper+"%");
        }


        function progress() {

            var progressNotifier = $.connection.progressHub;

            progressNotifier.client.sendMessage = function (message, count) {

                // $(".progressBar").data("kendoProgressBar").value(count);
            };

            // client-side sendMessage function that will be called from the server-side
            progressNotifier.client.getloop = function (message, count,userid) {
                var userdataID=$(progressuserbar).prop('id');
                //console.log(count);
                //console.log(userdataID);
                //console.log(progressuserbar);
                if(userdataID==userid){
                    $(progressuserbar).data("kendoProgressBar").value(count);
                }
                countper=count;
                //console.log("message");
                //console.log(message);
            };

            // establish the connection to the server and start server-side operation
            $.connection.hub.start().done(function () {
                // call the method CallLongOperation defined in the Hub
                progressNotifier.server.getCountAndMessage();
            });
        }

        function StartInvoicing() {
            var progressNotifier = $.connection.progressHub;


            // client-side sendMessage function that will be called from the server-side
            progressNotifier.client.sendMessage = function (message, count) {
                // update progress
                UpdateProgress(message, count);
                // alert(message);

            };

            // establish the connection to the server and start server-side operation
            $.connection.hub.start().done(function () {
                // call the method CallLongOperation defined in the Hub
                progressNotifier.server.getCountAndMessage();
            });
        }

        // Update the progress bar Fready
        function UpdateProgress(message, count) {
            // $(".progressBar").data("kendoProgressBar").value(count);
            $(progressuserbar).data("kendoProgressBar").value(count);
        }

        function feebackform() {
            
            var window = $("#FeedBack").data("kendoWindow");
            // ShowTaskDescription();
            window.open();
            window.center();
        }

        $("#btnFBsubmit").click(function (e) {

            var username = $("#FBtxtname").val();
            var feedback = $("#FBtxtarea").val();

            var value = JSON.stringify({
                'username': username,
                'feedback': feedback

            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("SaveFeedback", "Home")',

                data: value,
                dataType: "json",
                success: function (result) {
                    alert(result);
                },
                error: function (result) {
                    alert(result);

                }
            });

        });
    </script>

    @* Admin popup code *@
    @if (Session["GID"].ToString() == "1" || Session["GID"].ToString() == "2" || Session["GID"].ToString() == "4")
    {
        <script type="text/javascript">
            function OpenAdminWindow() {

                $("#AdminWindow").data("kendoWindow").center();
                $("#AdminWindow").data("kendoWindow").open();
                //  $("#AdminWindow").data("kendoWindow").refresh();
            }
        </script>
    }

    @* SuperAdmin popup code *@
    @if (Session["GID"].ToString() == "1")
    {
        <script type="text/javascript">
            function OpenSuperAdminWindow() {

                $("#SuperAdminWindow").data("kendoWindow").center();
                $("#SuperAdminWindow").data("kendoWindow").open();
                // $("#SuperAdminWindow").data("kendoWindow").refresh();
            }
        </script>
    }

    @* Search popup code *@
    <script type="text/javascript">
        function OpenSeacrhWindow() {
           
            $("#SearchWindow").data("kendoWindow").center();
            $("#SearchWindow").data("kendoWindow").open();
        }

    </script>

    @* Clearance popup code *@
    <script type="text/javascript">
        $("#btnClear").click(function () {

            $('#ClearanceWindow').data('kendoWindow').center();
            $('#ClearanceWindow').data('kendoWindow').open();
        });
        $("#btnPropertyMap").click(function () {
            
            $('#PropertyMapWindow').data('kendoWindow').center();
            $('#PropertyMapWindow').data('kendoWindow').open();
        });

    </script>

    @* Report popup code *@
    <script type="text/javascript">
        $("#Excel2d").click(function () {
            
            $('#CobieExcel').data('kendoWindow').center();
            $('#CobieExcel').data('kendoWindow').open();

        });

        $("#btnRunReport").click(function () {
            
            $('#RunReportWindow').data('kendoWindow').center();
            $('#RunReportWindow').data('kendoWindow').open();

        });


    </script>

    @* Quantity popup code *@
    <script type="text/javascript">

        function OpenQuantityWindow() {

            $("#QuantityWindow").data("kendoWindow").center();
            $("#QuantityWindow").data("kendoWindow").open();
            
        }

        function OpenQuantityWindowTest() {
            
            $("#QuantityTestWindow").data("kendoWindow").center();
            $("#QuantityTestWindow").data("kendoWindow").open();
        }

        function OpenADAClearance()
        {
            
            $("#ADAClearanceWindow").data("kendoWindow").center();
            $("#ADAClearanceWindow").data("kendoWindow").open();
        }

        function OpenElectrical360()
        {
            
            $("#Electrical360Window").data("kendoWindow").center();
            $("#Electrical360Window").data("kendoWindow").open();

        }

    </script>

    @* RuleEngine popup code *@
    <script type="text/javascript">
        function OpenRuleEngineWindow() {
            $("#RuleEngineWindow").data("kendoWindow").center();
            $("#RuleEngineWindow").data("kendoWindow").open();
        }

    </script>

    @* VersionTag popup code *@
    <script>
        function OpenVersionWindow() {

            $("#VersionWindow").data("kendoWindow").center();
            $("#VersionWindow").data("kendoWindow").open();
        }

    </script>


    <script type="text/javascript">
        @* Visibility popup code *@
        function OpenVisibilityWindow()
        {
            $("#VisibilityWindow").data("kendoWindow").center();
            $("#VisibilityWindow").data("kendoWindow").open();

        }
    </script>

    @* Clearance *@
    <script type="text/javascript">

        function ClearanceCheck(forgeids, alldbId,filenameset1, categoryset1, revitidset1, filenameset2, categoryset2, revitidset2) {
            //var progressbarwidth=20;
            var _viewer = viewer;
            var instanceTree;
            var set1Ids = new Array();
            var set2Ids = new Array();

            ///click id////////
            //var screenPoint = {
            //    x: event.clientX,
            //    y: event.clientY
            //};

            //var n = normalize(screenPoint);
            //var dbId = getHitDbId(n.x, n.y);
            //console.log("ClickID");
            //console.log(dbId);
            //set1Ids.push(dbId);

            ///click id////////

            var iv;
            var obj1x;
            for (let iv = viewer.impl.scene.children.length - 1; iv >= 0 ; iv--) {
                obj1x = viewer.impl.scene.children[iv];
                viewer.impl.scene.remove(obj1x);
            }

            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            set1Ids = forgeids;
            set2Ids = alldbId;

            var front_clear_value = $('iframe[title=Clearance]').contents().find("#clear_fronttext").val();
            var side_clear_value =$('iframe[title=Clearance]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=Clearance]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=Clearance]').contents().find("#clear_bottomtext").val();
            var back_clear_value =$('iframe[title=Clearance]').contents().find("#clear_backtext").val();

            var front_clear =parseInt(front_clear_value);
            var side_clear = parseInt(side_clear_value);
            var top_clear = parseInt(top_clear_value);
            var bot_clear =parseInt(bot_clear_value);
            var back_clear = parseInt(back_clear_value);

            console.log("boxx values");
            console.log(front_clear);
            console.log(side_clear);
            console.log(top_clear);
            console.log(bot_clear);
            console.log(back_clear);
            // //var w = set1Ids.length/100;
            // alert(w);
            var w = (70/set1Ids.length);
            var progressbarwidth=30;
            for (var i = 0; i < set1Ids.length; i++) {
                progressbarwidth+=w;
                $('iframe[title=Clearance]').contents().find("#myBar").css("width", progressbarwidth+'%');

                var id1 = parseInt(set1Ids[i]);
                var filenameset1value =filenameset1[i];
                var categoryset1value =categoryset1 [i];
                var revitidset1value =revitidset1 [i];

                let bounds = new THREE.Box3()
              , box = new THREE.Box3()
              , instanceTree = viewer.impl.model.getData().instanceTree
              , fragList = viewer.impl.model.getFragmentList()

                instanceTree.enumNodeFragments(id1, function (fragId) {
                    fragList.getWorldBounds(fragId, box)
                    bounds.union(box);
                }, true)

                var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
                var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
                var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);

                //var side_angle1 = Math.round(bottomPnt3.angleTo(bottomPnt4));
                var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
                var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
                var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
                var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side1x);

                var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
                var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
                var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side1y);

                var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
                var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
                var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
                var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side2x);

                var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
                var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
                var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side2y);

                var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
                bounds.expandByPoint(bottomPnt1_Top1);

                var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
                bounds.expandByPoint(bottomPnt1_Bot1);

                //var front_angle1 = Math.round(bottomPnt1.angleTo(bottomPnt4));
                var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
                var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

                var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
                var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
                var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Front1x);

                var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
                var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
                var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Front1y);

                ////var back_angle1 = Math.round(bottomPnt1.angleTo(bottomPnt4));
                var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
                var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

                var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
                var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
                var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Back1x);

                var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
                var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
                var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Back1x);

                var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
                var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
                var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);


                var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
                var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z);
                var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
                var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z);


                geometry = new THREE.Geometry();
                geometry.vertices.push(bottomPnt1x);
                geometry.vertices.push(bottomPnt2x);
                geometry.vertices.push(bottomPnt3x);
                geometry.vertices.push(bottomPnt4x);
                geometry.vertices.push(bottomPnt1x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt1);
                geometry.vertices.push(topPnt2);
                geometry.vertices.push(topPnt3);
                geometry.vertices.push(topPnt4);
                geometry.vertices.push(topPnt1);
                line = new THREE.Line(geometry, material2);
                //  viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt1);
                geometry.vertices.push(bottomPnt1x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt2);
                geometry.vertices.push(bottomPnt2x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt3);
                geometry.vertices.push(bottomPnt3x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt4);
                geometry.vertices.push(bottomPnt4x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                var pt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var pt2 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z);
                var bBox_new1a = new THREE.Box3(pt1, pt2);


                geometry = new THREE.Geometry();
                geometry.vertices.push(pt1);
                geometry.vertices.push(pt2);
                line = new THREE.Line(geometry, material1);
                // viewer.impl.scene.add(line);

                for (var y = 0; y < set2Ids.length; y++) {
                    var id2 = parseInt(set2Ids[y]);
                    var filenameset2value =filenameset2[i];
                    var categoryset2value =categoryset2[i];
                    var revitidset2value =revitidset2[i];

                    let bound2 = new THREE.Box3()
                  , box2 = new THREE.Box3()
                  , instanceTree = viewer.impl.model.getData().instanceTree
                  , fragList = viewer.impl.model.getFragmentList()

                    instanceTree.enumNodeFragments(id2, function (fragId) {
                        fragList.getWorldBounds(fragId, box2)
                        bound2.union(box2);
                    }, true)

                    var pt1x = new THREE.Vector3(bound2.min.x, bound2.min.y, bound2.min.z);
                    var pt2x = new THREE.Vector3(bound2.max.x, bound2.max.y, bound2.max.z);
                    var pt3x = new THREE.Vector3(bound2.min.x, bound2.max.y, bound2.max.z);
                    var pt4x = new THREE.Vector3(bound2.max.x, bound2.min.y, bound2.min.z);
                    var bBox_new2a = new THREE.Box3(pt1x, pt2x);


                    if (bBox_new2a.isIntersectionBox(bBox_new1a) == true) {
                        console.log("final result");
                        console.log((id1 + "/" + id2 + ","));
                        $('iframe[title=Clearance]').contents().find("#clearancedatatable tbody").append('<tr><td style="width:12%">'+filenameset1value+'</td><td style="width:12%">'+categoryset1value+'</td><td style="width:12%">'+revitidset1value+'</td><td style="width:12%"><input type ="button" value = '+ id1 +'  id ='+ id1 +' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:12%"><input type ="button" value = '+ id1 +'  id ='+ id1 +' onclick="window.parent.Highlightbox1(this.id)"/></td><td style="width:12%">'+filenameset2value+'</td><td style="width:12%">'+categoryset2value+'</td><td style="width:12%">'+revitidset2value+'</td><td style="width:12%"><input type ="button" value = '+ id2 +'  id ="'+ id2 +'" onclick="window.parent.Forgeid(this.id)"/></td><td style="width:12%"><input type ="button" value = '+ id2 +'  id ='+ id2 +' onclick="window.parent.Highlightbox2(this.id)"/></td></tr>');

                        //<td style="width:15px">' + id1 + '</td> <td>' + id2 + '</td>);
                        $('iframe[title=Clearance]').contents().find("#clearancedatatable").show();
                        // $("#showids").append(id1 + "/" + id2 + ",")
                        //alert(id1)                        }
                    }
                    var size = "";
                    if (size == null) return;
                };
                //set1Ids = [];
                //set2Ids = [];
            }

            if ($('iframe[title=Clearance]').contents().find("#clearancedatatable tbody").children().length == 0) {
                $('iframe[title=Clearance]').contents().find("#clearancedatatable tbody").append('<tr><td colspan="2">No records found !!</td></tr>');
                $('iframe[title=Clearance]').contents().find("#clearancedatatable").show();
                var ClearanceWindow = $('#ClearanceWindow').data('kendoWindow');
                kendo.ui.progress(ClearanceWindow.element, false);
            }
            var ClearanceWindow = $('#ClearanceWindow').data('kendoWindow');
            kendo.ui.progress(ClearanceWindow.element, false);
        }



        function Highlightbox1(id)
        {
            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });


            var front_clear_value = $('iframe[title=Clearance]').contents().find("#clear_fronttext").val();
            var side_clear_value = $('iframe[title=Clearance]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=Clearance]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=Clearance]').contents().find("#clear_bottomtext").val();
            var back_clear_value = $('iframe[title=Clearance]').contents().find("#clear_backtext").val();


            var front_clear =parseInt(front_clear_value);
            var side_clear = parseInt(side_clear_value);
            var top_clear = parseInt(top_clear_value);
            var bot_clear =parseInt(bot_clear_value);
            var back_clear = parseInt(back_clear_value);

            var id1 = parseInt(id);

            let bounds = new THREE.Box3()
          , box = new THREE.Box3()
          , instanceTree = viewer.impl.model.getData().instanceTree
          , fragList = viewer.impl.model.getFragmentList()

            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)

            var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);


            var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
            var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
            var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
            var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side1x);

            var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
            var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
            var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side1y);

            var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
            var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
            var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
            var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side2x);

            var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
            var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
            var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side2y);

            var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
            bounds.expandByPoint(bottomPnt1_Top1);

            var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
            bounds.expandByPoint(bottomPnt1_Bot1);

            var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
            var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
            var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Front1x);

            var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
            var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
            var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Front1y);

            var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
            var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
            var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Back1x);

            var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
            var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
            var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Back1x);

            var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);// Bottom right X:Bottom Right:Y
            var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z); //top left-X :top left-Y

            var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
            var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z); // Bottom right X:Bottom Right:Y
            var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
            var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z); //top left-X :top left-Y

            console.log("Set1IDS.............");
            console.log(id);
            console.log(bottomPnt1x);
            console.log(bottomPnt2x);
            console.log(bottomPnt3x);
            console.log(bottomPnt4x);

            console.log(topPnt1);
            console.log(topPnt2);
            console.log(topPnt3);
            console.log(topPnt4);


            geometry = new THREE.Geometry();
            geometry.vertices.push(bottomPnt1x);
            geometry.vertices.push(bottomPnt2x);
            geometry.vertices.push(bottomPnt3x);
            geometry.vertices.push(bottomPnt4x);
            geometry.vertices.push(bottomPnt1x);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt1);
            geometry.vertices.push(topPnt2);
            geometry.vertices.push(topPnt3);
            geometry.vertices.push(topPnt4);
            geometry.vertices.push(topPnt1);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt1);
            geometry.vertices.push(bottomPnt1x);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt2);
            geometry.vertices.push(bottomPnt2x);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt3);
            geometry.vertices.push(bottomPnt3x);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt4);
            geometry.vertices.push(bottomPnt4x);
            line = new THREE.Line(geometry, material2);
            viewer.impl.scene.add(line);

        }


        function Highlightbox2(id)
        {

            var material1 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var front_clear_value = $('iframe[title=Clearance]').contents().find("#clear_fronttext").val();
            var side_clear_value = $('iframe[title=Clearance]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=Clearance]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=Clearance]').contents().find("#clear_bottomtext").val();
            var back_clear_value = $('iframe[title=Clearance]').contents().find("#clear_backtext").val();


            var front_clear =parseInt(front_clear_value);
            var side_clear = parseInt(side_clear_value);
            var top_clear = parseInt(top_clear_value);
            var bot_clear =parseInt(bot_clear_value);
            var back_clear = parseInt(back_clear_value);

            var id1 = parseInt(id);

            let bounds = new THREE.Box3()
          , box = new THREE.Box3()
          , instanceTree = viewer.impl.model.getData().instanceTree
          , fragList = viewer.impl.model.getFragmentList()

            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)


            var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);


            var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
            var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
            var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
            var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side1x);

            var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
            var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
            var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side1y);

            var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
            var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
            var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
            var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side2x);

            var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
            var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
            var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Side2y);

            var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
            bounds.expandByPoint(bottomPnt1_Top1);

            var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
            bounds.expandByPoint(bottomPnt1_Bot1);

            var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
            var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
            var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Front1x);

            var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
            var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
            var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Front1y);

            var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
            var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
            var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Back1x);

            var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
            var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
            var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            bounds.expandByPoint(bottomPnt1_Back1x);


            var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);

            var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
            var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z);
            var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
            var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z);

            console.log("Set2IDS.............");
            console.log(id);
            console.log(bottomPnt1x);
            console.log(bottomPnt2x);
            console.log(bottomPnt3x);
            console.log(bottomPnt4x);

            console.log(topPnt1);
            console.log(topPnt2);
            console.log(topPnt3);
            console.log(topPnt4);

            geometry = new THREE.Geometry();
            geometry.vertices.push(bottomPnt1x);
            geometry.vertices.push(bottomPnt2x);
            geometry.vertices.push(bottomPnt3x);
            geometry.vertices.push(bottomPnt4x);
            geometry.vertices.push(bottomPnt1x);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt1);
            geometry.vertices.push(topPnt2);
            geometry.vertices.push(topPnt3);
            geometry.vertices.push(topPnt4);
            geometry.vertices.push(topPnt1);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt1);
            geometry.vertices.push(bottomPnt1x);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt2);
            geometry.vertices.push(bottomPnt2x);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt3);
            geometry.vertices.push(bottomPnt3x);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);

            geometry = new THREE.Geometry();
            geometry.vertices.push(topPnt4);
            geometry.vertices.push(bottomPnt4x);
            line = new THREE.Line(geometry, material1);
            viewer.impl.scene.add(line);
        }


        function ClearModel()
        {

            viewer.clearSelection();
            viewer.showAll();

            var iv;
            var obj1x;
            for (let iv = viewer.impl.scene.children.length - 1; iv >= 0 ; iv--) {
                obj1x = viewer.impl.scene.children[iv];
                viewer.impl.scene.remove(obj1x);
            }
        }





    </script>

    @* Cumulative Quantities *@
    <script>
        $("#btnADA").click(function () {
            $('#ADAWindow').data('kendoWindow').center();
            $('#ADAWindow').data('kendoWindow').open();
        });

    </script>

    @* ADA Clearance Check *@
    <script>
        function ADAClearanceCheck(forgeids, alldbId,filenameset1, categoryset1, revitidset1, filenameset2, categoryset2, revitidset2) {
            //var progressbarwidth=20;
            var _viewer = viewer;
            var instanceTree;
            var set1Ids = new Array();
            var set2Ids = new Array();

            ///click id////////
            //var screenPoint = {
            //    x: event.clientX,
            //    y: event.clientY
            //};

            //var n = normalize(screenPoint);
            //var dbId = getHitDbId(n.x, n.y);
            //console.log("ClickID");
            //console.log(dbId);
            //set1Ids.push(dbId);

            ///click id////////

            var iv;
            var obj1x;
            for (let iv = viewer.impl.scene.children.length - 1; iv >= 0 ; iv--) {
                obj1x = viewer.impl.scene.children[iv];
                viewer.impl.scene.remove(obj1x);
            }

            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            set1Ids = forgeids;
            set2Ids = alldbId;

            var front_clear_value = $('iframe[title=ADA]').contents().find("#clear_fronttext").val();
            var side_clear_value =$('iframe[title=ADA]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=ADA]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=ADA]').contents().find("#clear_bottomtext").val();
            var back_clear_value =$('iframe[title=ADA]').contents().find("#clear_backtext").val();

            var front_clear =parseInt(front_clear_value);
            var side_clear = parseInt(side_clear_value);
            var top_clear = parseInt(top_clear_value);
            var bot_clear =parseInt(bot_clear_value);
            var back_clear = parseInt(back_clear_value);

            console.log("boxx values");
            console.log(front_clear);
            console.log(side_clear);
            console.log(top_clear);
            console.log(bot_clear);
            console.log(back_clear);
            // //var w = set1Ids.length/100;
            // alert(w);
            var w = (70/set1Ids.length);
            var progressbarwidth=30;
            for (var i = 0; i < set1Ids.length; i++) {
                progressbarwidth+=w;
                $('iframe[title=ADA]').contents().find("#myBar").css("width", progressbarwidth+'%');

                var id1 = parseInt(set1Ids[i]);
                var filenameset1value =filenameset1[i];
                var categoryset1value =categoryset1 [i];
                var revitidset1value =revitidset1 [i];

                let bounds = new THREE.Box3()
              , box = new THREE.Box3()
              , instanceTree = viewer.impl.model.getData().instanceTree
              , fragList = viewer.impl.model.getFragmentList()

                instanceTree.enumNodeFragments(id1, function (fragId) {
                    fragList.getWorldBounds(fragId, box)
                    bounds.union(box);
                }, true)

                var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
                var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
                var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);


                //var side_angle1 = Math.round(bottomPnt3.angleTo(bottomPnt4));
                var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
                var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
                var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
                var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side1x);

                var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
                var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
                var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side1y);

                var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
                var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
                var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
                var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side2x);

                var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
                var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
                var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Side2y);

                var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
                bounds.expandByPoint(bottomPnt1_Top1);

                var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
                bounds.expandByPoint(bottomPnt1_Bot1);

                //var front_angle1 = Math.round(bottomPnt1.angleTo(bottomPnt4));
                var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
                var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

                var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
                var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
                var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Front1x);

                var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
                var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
                var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Front1y);

                ////var back_angle1 = Math.round(bottomPnt1.angleTo(bottomPnt4));
                var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
                var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

                var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
                var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
                var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Back1x);

                var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
                var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
                var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
                bounds.expandByPoint(bottomPnt1_Back1x);

                var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
                var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
                var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);


                var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
                var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z);
                var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
                var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z);


                geometry = new THREE.Geometry();
                geometry.vertices.push(bottomPnt1x);
                geometry.vertices.push(bottomPnt2x);
                geometry.vertices.push(bottomPnt3x);
                geometry.vertices.push(bottomPnt4x);
                geometry.vertices.push(bottomPnt1x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt1);
                geometry.vertices.push(topPnt2);
                geometry.vertices.push(topPnt3);
                geometry.vertices.push(topPnt4);
                geometry.vertices.push(topPnt1);
                line = new THREE.Line(geometry, material2);
                //  viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt1);
                geometry.vertices.push(bottomPnt1x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt2);
                geometry.vertices.push(bottomPnt2x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt3);
                geometry.vertices.push(bottomPnt3x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                geometry = new THREE.Geometry();
                geometry.vertices.push(topPnt4);
                geometry.vertices.push(bottomPnt4x);
                line = new THREE.Line(geometry, material2);
                // viewer.impl.scene.add(line);

                var pt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
                var pt2 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z);
                var bBox_new1a = new THREE.Box3(pt1, pt2);


                geometry = new THREE.Geometry();
                geometry.vertices.push(pt1);
                geometry.vertices.push(pt2);
                line = new THREE.Line(geometry, material1);
                // viewer.impl.scene.add(line);

                for (var y = 0; y < set2Ids.length; y++) {
                    var id2 = parseInt(set2Ids[y]);
                    var filenameset2value =filenameset2[i];
                    var categoryset2value =categoryset2[i];
                    var revitidset2value =revitidset2[i];

                    let bound2 = new THREE.Box3()
                  , box2 = new THREE.Box3()
                  , instanceTree = viewer.impl.model.getData().instanceTree
                  , fragList = viewer.impl.model.getFragmentList()

                    instanceTree.enumNodeFragments(id2, function (fragId) {
                        fragList.getWorldBounds(fragId, box2)
                        bound2.union(box2);
                    }, true)

                    var pt1x = new THREE.Vector3(bound2.min.x, bound2.min.y, bound2.min.z);
                    var pt2x = new THREE.Vector3(bound2.max.x, bound2.max.y, bound2.max.z);
                    var pt3x = new THREE.Vector3(bound2.min.x, bound2.max.y, bound2.max.z);
                    var pt4x = new THREE.Vector3(bound2.max.x, bound2.min.y, bound2.min.z);
                    var bBox_new2a = new THREE.Box3(pt1x, pt2x);


                    if (bBox_new2a.isIntersectionBox(bBox_new1a) == true) {
                        console.log("final result");
                        console.log((id1 + "/" + id2 + ","));
                        $('iframe[title=ADA]').contents().find("#clearancedatatable tbody").append('<tr><td style="width:12%">'+filenameset1value+'</td><td style="width:12%">'+categoryset1value+'</td><td style="width:12%">'+revitidset1value+'</td><td style="width:12%"><input type ="button" value = '+ id1 +'  id ='+ id1 +' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:12%"><input type ="button" value = '+ id1 +'  id ='+ id1 +' onclick="window.parent.ADAHighlightbox1(this.id)"/></td><td style="width:12%">'+filenameset2value+'</td><td style="width:12%">'+categoryset2value+'</td><td style="width:12%">'+revitidset2value+'</td><td style="width:12%"><input type ="button" value = '+ id2 +'  id ="'+ id2 +'" onclick="window.parent.Forgeid(this.id)"/></td><td style="width:12%"><input type ="button" value = '+ id2 +'  id ='+ id2 +' onclick="window.parent.ADAHighlightbox2(this.id)"/></td></tr>');

                        //<td style="width:15px">' + id1 + '</td> <td>' + id2 + '</td>);
                        $('iframe[title=ADA]').contents().find("#clearancedatatable").show();
                        // $("#showids").append(id1 + "/" + id2 + ",")
                        //alert(id1)                        }
                    }
                    var size = "";
                    if (size == null) return;
                };
                //set1Ids = [];
                //set2Ids = [];
            }
            if ($('iframe[title=ADA]').contents().find("#clearancedatatable tbody").children().length == 0) {
                $('iframe[title=ADA]').contents().find("#clearancedatatable tbody").append('<tr><td colspan="2">No records found !!</td></tr>');
                $('iframe[title=ADA]').contents().find("#clearancedatatable").show();
                var ADAWindow = $('#ADAWindow').data('kendoWindow');
                kendo.ui.progress(ADAWindow.element, false);
            }
            var ADAWindow = $('#ADAWindow').data('kendoWindow');
            kendo.ui.progress(ADAWindow.element, false);
        }

        function ADAHighlightbox1(id)
        {
            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });


            var front_clear_value = $('iframe[title=ADA]').contents().find("#clear_fronttext").val();
            var side_clear_value = $('iframe[title=ADA]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=ADA]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=ADA]').contents().find("#clear_bottomtext").val();
            var back_clear_value = $('iframe[title=ADA]').contents().find("#clear_backtext").val();


            var front_clear =parseInt(0);
            var side_clear = parseInt(0);
            var top_clear = parseInt(0);
            var bot_clear =parseInt(0);
            var back_clear = parseInt(0);

            var id1 = parseInt(id);

            //  let bounds = new THREE.Box3()
            //, box = new THREE.Box3()
            //, instanceTree = viewer.impl.model.getData().instanceTree
            //, fragList = viewer.impl.model.getFragmentList()

            //  instanceTree.enumNodeFragments(id1, function (fragId) {
            //      fragList.getWorldBounds(fragId, box)
            //      bounds.union(box);
            //  }, true)



            var bbox = getModifiedWorldBoundingBox(
            id1,
           viewer.model.getFragmentList()
          );

            drawBox(bbox.min, bbox.max);



            //-----older method

            //  let bounds = new THREE.Box3()
            //, box = new THREE.Box3()
            //, instanceTree = viewer.impl.model.getData().instanceTree
            //, fragList = viewer.impl.model.getFragmentList()

            //  instanceTree.enumNodeFragments(id1, function (fragId) {
            //      fragList.getWorldBounds(fragId, box)
            //      bounds.union(box);
            //  }, true)

            //  var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            //  var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);
            //  console.log("Co-ordinate");
            //  console.log(bottomPnt1);
            //  console.log(bottomPnt2);
            //  console.log(bottomPnt3);
            //  console.log(bottomPnt4);

            //  var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
            //  var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
            //  var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side1x);

            //  var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
            //  var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side1y);

            //  var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
            //  var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
            //  var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
            //  var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side2x);

            //  var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
            //  var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
            //  var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side2y);

            //  var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
            //  bounds.expandByPoint(bottomPnt1_Top1);

            //  var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
            //  bounds.expandByPoint(bottomPnt1_Bot1);

            //  var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            //  var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            //  var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
            //  var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
            //  var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Front1x);

            //  var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
            //  var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
            //  var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Front1y);

            //  var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            //  var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            //  var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
            //  var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Back1x);

            //  var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
            //  var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Back1x);

            //  var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);// Bottom right X:Bottom Right:Y
            //  var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            //  var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z); //top left-X :top left-Y

            //  var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
            //  var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z); // Bottom right X:Bottom Right:Y
            //  var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
            //  var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z); //top left-X :top left-Y

            //  console.log("Set1IDS.............");
            //  console.log(id);
            //  console.log(bottomPnt1x);
            //  console.log(bottomPnt2x);
            //  console.log(bottomPnt3x);
            //  console.log(bottomPnt4x);

            //  console.log(topPnt1);
            //  console.log(topPnt2);
            //  console.log(topPnt3);
            //  console.log(topPnt4);




            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(bottomPnt1x);
            //  geometry.vertices.push(bottomPnt2x);
            //  geometry.vertices.push(bottomPnt3x);
            //  geometry.vertices.push(bottomPnt4x);
            //  geometry.vertices.push(bottomPnt1x);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt1);
            //  geometry.vertices.push(topPnt2);
            //  geometry.vertices.push(topPnt3);
            //  geometry.vertices.push(topPnt4);
            //  geometry.vertices.push(topPnt1);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt1);
            //  geometry.vertices.push(bottomPnt1x);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt2);
            //  geometry.vertices.push(bottomPnt2x);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt3);
            //  geometry.vertices.push(bottomPnt3x);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt4);
            //  geometry.vertices.push(bottomPnt4x);
            //  line = new THREE.Line(geometry, material2);
            //  viewer.impl.scene.add(line);


        }


        function getModifiedWorldBoundingBox(id1, fragList) {

            let bounds = new THREE.Box3()
          , box = new THREE.Box3()
          , instanceTree = viewer.impl.model.getData().instanceTree


            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)

            return bounds;
        }
        var drawboxtoggle=0;

        function drawBox(min, max) {

            if(drawboxtoggle==0){
                drawboxtoggle=1;


                var material2 = new THREE.LineBasicMaterial({
                    color: 0xff0000,
                    linewidth: 5,
                    linecap: 'round', //ignored by WebGLRenderer
                    linejoin: 'round' //ignored by WebGLRenderer

                });

                //viewer.impl.matman().addMaterial(
                //    'ADN-Material-Line',
                //    material,
                //    true);

                drawLines([

                    {x: min.x, y: min.y, z: min.z},
                    {x: max.x, y: min.y, z: min.z},

                    {x: max.x, y: min.y, z: min.z},
                    {x: max.x, y: min.y, z: max.z},

                    {x: max.x, y: min.y, z: max.z},
                    {x: min.x, y: min.y, z: max.z},

                    {x: min.x, y: min.y, z: max.z},
                    {x: min.x, y: min.y, z: min.z},

                    {x: min.x, y: max.y, z: max.z},
                    {x: max.x, y: max.y, z: max.z},

                    {x: max.x, y: max.y, z: max.z},
                    {x: max.x, y: max.y, z: min.z},

                    {x: max.x, y: max.y, z: min.z},
                    {x: min.x, y: max.y, z: min.z},

                    {x: min.x, y: max.y, z: min.z},
                    {x: min.x, y: max.y, z: max.z},

                    {x: min.x, y: min.y, z: min.z},
                    {x: min.x, y: max.y, z: min.z},

                    {x: max.x, y: min.y, z: min.z},
                    {x: max.x, y: max.y, z: min.z},

                    {x: max.x, y: min.y, z: max.z},
                    {x: max.x, y: max.y, z: max.z},

                    {x: min.x, y: min.y, z: max.z},
                    {x: min.x, y: max.y, z: max.z}],

                    material2);

                console.log("Box Completed");


                viewer.impl.sceneUpdated(true);

            }
            else{
                drawboxtoggle=0;
                viewer.impl.removeOverlayScene(_overlaySceneName4);
            }

            //var material = new THREE.LineBasicMaterial({
            //    color: 0xffff00,
            //    linewidth: 2
            //});




        }

        function drawLines(coordsArray, material) {
            console.log(coordsArray.length);
            viewer.impl.removeOverlayScene(_overlaySceneName4);
            viewer.impl.createOverlayScene(_overlaySceneName4);

            for (var i = 0; i < coordsArray.length; i+=2) {

                var start = coordsArray[i];
                var end = coordsArray[i+1];

                var geometry = new THREE.Geometry();

                geometry.vertices.push(new THREE.Vector3(
                    start.x, start.y, start.z));

                geometry.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));

                geometry.computeLineDistances();

                var line = new THREE.Line(geometry, material);

                //viewer.impl.scene.add(line);
                viewer.impl.addOverlay(_overlaySceneName4, line);
            }

            console.log("Lines Completed");
        }


        function ADAHighlightbox2(id)
        {

            var material1 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var front_clear_value = $('iframe[title=ADA]').contents().find("#clear_fronttext").val();
            var side_clear_value = $('iframe[title=ADA]').contents().find("#clear_sidetext").val();
            var top_clear_value = $('iframe[title=ADA]').contents().find("#clear_toptext").val();
            var bot_clear_value = $('iframe[title=ADA]').contents().find("#clear_bottomtext").val();
            var back_clear_value = $('iframe[title=ADA]').contents().find("#clear_backtext").val();


            var front_clear =parseInt(front_clear_value);
            var side_clear = parseInt(side_clear_value);
            var top_clear = parseInt(top_clear_value);
            var bot_clear =parseInt(bot_clear_value);
            var back_clear = parseInt(back_clear_value);

            var id1 = parseInt(id);


            var bBox = getModifiedWorldBoundingBox(
   id1,
  viewer.impl.model.getFragmentList()
 );

            console.log(bBox.min);
            console.log(bBox.max);

            drawBox(bBox.min, bBox.max);


            //  let bounds = new THREE.Box3()
            //, box = new THREE.Box3()
            //, instanceTree = viewer.impl.model.getData().instanceTree
            //, fragList = viewer.impl.model.getFragmentList()

            //  instanceTree.enumNodeFragments(id1, function (fragId) {
            //      //fragList.getWorldBounds(fragId, box)
            //      //bounds.union(box);

            //  }, true)


            //  var bottomPnt1 = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt2 = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt3 = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            //  var bottomPnt4 = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);
            //  console.log("Co-ordinate");
            //  console.log(bottomPnt1);
            //  console.log(bottomPnt2);
            //  console.log(bottomPnt3);
            //  console.log(bottomPnt4);

            //  var side_angle1 = Math.atan2(bottomPnt3.y - bottomPnt4.y, bottomPnt3.x - bottomPnt4.x);
            //  var pnt1 = bottomPnt4.x + Math.cos(side_angle1 - Math.PI) * side_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(side_angle1 - Math.PI) * side_clear;
            //  var bottomPnt1_Side1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side1x);

            //  var pnt1 = bottomPnt4.x + Math.cos(side_angle1 + Math.PI) * side_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(side_angle1 + Math.PI) * side_clear;
            //  var bottomPnt1_Side1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side1y);

            //  var side_angle2 = Math.atan2(bottomPnt4.y - bottomPnt3.y, bottomPnt4.x - bottomPnt3.x);
            //  var pnt1 = bottomPnt3.x + Math.cos(side_angle2 - Math.PI) * side_clear;
            //  var pnt2 = bottomPnt3.y + Math.sin(side_angle2 - Math.PI) * side_clear;
            //  var bottomPnt1_Side2x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side2x);

            //  var pnt1 = bottomPnt3.x + Math.cos(side_angle2 + Math.PI) * side_clear;
            //  var pnt2 = bottomPnt3.y + Math.sin(side_angle2 + Math.PI) * side_clear;
            //  var bottomPnt1_Side2y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Side2y);

            //  var bottomPnt1_Top1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.max.z + top_clear);
            //  bounds.expandByPoint(bottomPnt1_Top1);

            //  var bottomPnt1_Bot1 = new THREE.Vector3(bottomPnt3.x, bottomPnt3.y, bounds.min.z - bot_clear);
            //  bounds.expandByPoint(bottomPnt1_Bot1);

            //  var front_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            //  var front_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            //  var pnt1 = bottomPnt1.x + Math.cos(front_angle1 ) * front_clear;
            //  var pnt2 = bottomPnt1.y + Math.sin(front_angle1 ) * front_clear;
            //  var bottomPnt1_Front1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Front1x);

            //  var pnt1 = bottomPnt1.x + Math.cos(front_angle2 ) * front_clear;
            //  var pnt2 = bottomPnt1.y + Math.sin(front_angle2 ) * front_clear;
            //  var bottomPnt1_Front1y = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Front1y);

            //  var back_angle1 = Math.atan2(bottomPnt1.y - bottomPnt4.y, bottomPnt1.x - bottomPnt4.x);
            //  var back_angle2 = Math.atan2(bottomPnt4.y - bottomPnt1.y, bottomPnt4.x - bottomPnt1.x);

            //  var pnt1 = bottomPnt4.x + Math.cos(back_angle1) * back_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(back_angle1) * back_clear;
            //  var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Back1x);

            //  var pnt1 = bottomPnt4.x + Math.cos(back_angle2) * back_clear;
            //  var pnt2 = bottomPnt4.y + Math.sin(back_angle2) * back_clear;
            //  var bottomPnt1_Back1x = new THREE.Vector3(pnt1, pnt2, bottomPnt4.z);
            //  bounds.expandByPoint(bottomPnt1_Back1x);


            //  var bottomPnt1x = new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt2x = new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z);
            //  var bottomPnt3x = new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z);
            //  var bottomPnt4x = new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z);

            //  var topPnt1 = new THREE.Vector3(bottomPnt1x.x, bottomPnt1x.y, bounds.max.z);
            //  var topPnt2 = new THREE.Vector3(bottomPnt2x.x, bottomPnt2x.y, bounds.max.z);
            //  var topPnt3 = new THREE.Vector3(bottomPnt3x.x, bottomPnt3x.y, bounds.max.z);
            //  var topPnt4 = new THREE.Vector3(bottomPnt4x.x, bottomPnt4x.y, bounds.max.z);

            //  console.log("Set2IDS.............");
            //  console.log(id);
            //  console.log(bottomPnt1x);
            //  console.log(bottomPnt2x);
            //  console.log(bottomPnt3x);
            //  console.log(bottomPnt4x);

            //  console.log(topPnt1);
            //  console.log(topPnt2);
            //  console.log(topPnt3);
            //  console.log(topPnt4);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(bottomPnt1x);
            //  geometry.vertices.push(bottomPnt2x);
            //  geometry.vertices.push(bottomPnt3x);
            //  geometry.vertices.push(bottomPnt4x);
            //  geometry.vertices.push(bottomPnt1x);
            //  line = new THREE.Line(geometry, material1);
            //viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt1);
            //  geometry.vertices.push(topPnt2);
            //  geometry.vertices.push(topPnt3);
            //  geometry.vertices.push(topPnt4);
            //  geometry.vertices.push(topPnt1);
            //  line = new THREE.Line(geometry, material1);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt1);
            //  geometry.vertices.push(bottomPnt1x);
            //  line = new THREE.Line(geometry, material1);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt2);
            //  geometry.vertices.push(bottomPnt2x);
            //  line = new THREE.Line(geometry, material1);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt3);
            //  geometry.vertices.push(bottomPnt3x);
            //  line = new THREE.Line(geometry, material1);
            //  viewer.impl.scene.add(line);

            //  geometry = new THREE.Geometry();
            //  geometry.vertices.push(topPnt4);
            //  geometry.vertices.push(bottomPnt4x);
            //  line = new THREE.Line(geometry, material1);
            //  viewer.impl.scene.add(line);
        }

        //6th #change
        var points =[]
        $('#viewer').click (function (e) {

            // Get 2D drawing dimension
            //alert("Within EventListener")
            var layoutBox = viewer.impl.getVisibleBounds();
            var width = layoutBox.max.x - layoutBox.min.x;
            var height = layoutBox.max.y - layoutBox.min.y;
            var zvalue = layoutBox.max.z - layoutBox.min.z;

            var viewport = viewer.impl.clientToViewport(e.clientX, e.clientY);
            var point = [viewport.x*width, viewport.y*height, viewport.z*zvalue];

            // Show the 2D drawing X, Y coordinates on mouse click
            console.log("point");
            console.log(point);

            var min = { x:154.9046989660603,y:45.57690748558723,z:0}
            var max = { x:101.35828895326821,y:-60.633027156665094,z:-26.364577293395996}

            console.log(min)
            console.log(max)
            drawBox(min, max)
            //console.log("bb")
            //console.log(bb)

            points.push(point)
            console.log("points")
            console.log(points)
        });
        //6th #change

    </script>

    @*For Room Wise Quantity*@
    <script>

        function HighlightboxRoomwise(id)
        {
            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var id1 = parseInt(id);

            var bbox = getModifiedWorldBoundingBoxRoomwise(
            id1,
           viewer.model.getFragmentList()
          );

            var middle= drawBoxRoomwise(bbox.min, bbox.max);

            return middle;

        }

        function getModifiedWorldBoundingBoxRoomwise(id1, fragList) {

            let bounds = new THREE.Box3()
          , box = new THREE.Box3()
          , instanceTree = viewer.impl.model.getData().instanceTree


            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)

            return bounds;
        }

        function drawBoxRoomwise(min, max) {

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer

            });

            var  middle=  drawLinesRoomwise([

                {x: min.x, y: min.y, z: min.z},
                {x: max.x, y: min.y, z: min.z},

                {x: max.x, y: min.y, z: min.z},
                {x: max.x, y: min.y, z: max.z},

                {x: max.x, y: min.y, z: max.z},
                {x: min.x, y: min.y, z: max.z},

                {x: min.x, y: min.y, z: max.z},
                {x: min.x, y: min.y, z: min.z},

                {x: min.x, y: max.y, z: max.z},
                {x: max.x, y: max.y, z: max.z},

                {x: max.x, y: max.y, z: max.z},
                {x: max.x, y: max.y, z: min.z},

                {x: max.x, y: max.y, z: min.z},
                {x: min.x, y: max.y, z: min.z},

                {x: min.x, y: max.y, z: min.z},
                {x: min.x, y: max.y, z: max.z},

                {x: min.x, y: min.y, z: min.z},
                {x: min.x, y: max.y, z: min.z},

                {x: max.x, y: min.y, z: min.z},
                {x: max.x, y: max.y, z: min.z},

                {x: max.x, y: min.y, z: max.z},
                {x: max.x, y: max.y, z: max.z},

                {x: min.x, y: min.y, z: max.z},
                {x: min.x, y: max.y, z: max.z}],

                material2);

            //console.log("Box Completed");

            //viewer.impl.sceneUpdated(true);

            return middle;
        }

        function drawLinesRoomwise(coordsArray, material) {
            console.log(coordsArray.length);

            geometry1 = new THREE.Geometry();

            for (var i = 0; i < coordsArray.length; i+=2) {

                var start = coordsArray[i];
                var end = coordsArray[i+1];

                var geometry = new THREE.Geometry();

                geometry.vertices.push(new THREE.Vector3(
                    start.x, start.y, start.z));

                geometry.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));

                geometry.computeLineDistances();

                var line = new THREE.Line(geometry, material);

                // viewer.impl.scene.add(line);


                // for center point
                geometry1.vertices.push(new THREE.Vector3(
                start.x, start.y, start.z));

                geometry1.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));

                geometry1.computeLineDistances();

            }

            var box1 = new THREE.Mesh(geometry1, material);
            var mid= getCenterPoint(box1,material);
            //console.log("Lines Completed");
            return mid;
        }

        function getCenterPoint(mesh,material) {
            var middle = new THREE.Vector3();
            var geometry = mesh.geometry;

            geometry.computeBoundingBox();

            middle.x = (geometry.boundingBox.max.x + geometry.boundingBox.min.x) / 2;
            middle.y = (geometry.boundingBox.max.y + geometry.boundingBox.min.y) / 2;
            middle.z = (geometry.boundingBox.max.z + geometry.boundingBox.min.z) / 2;

            mesh.localToWorld( middle );

            //var geometry2 = new THREE.Geometry();

            //geometry2.vertices.push(new THREE.Vector3(
            //    middle.x, middle.y, middle.z));

            //geometry2.vertices.push(new THREE.Vector3(
            //    middle.x+1, middle.y+1, middle.z+1));

            //geometry2.computeLineDistances();

            //var line2 = new THREE.Line(geometry2, material);

            //viewer.impl.scene.add(line2);


            return middle;
        }

        // For Bounding Co-ordinates


        var _specific_Floor_Rooms_Array = [];

        function RoomBox()
        {

            $('iframe[title=QuantityTest]').contents().find("#Modelloader").show();

            if(_URN_=="")
            {
                alert("Please Load Model")
                $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();
                return;
            }

            var moddata = JSON.stringify({
                'Urn': _URN_,
                'VersionNo': Version_No
            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetModelForgeid", "QuantityTest")',
                data: moddata,
                dataType: "json",
                success: function (data) {
                    // console.log(data.length);

                    var DataStore="";
                    var DataStoreMiddle="";
                    var DataRoomBoundingBox="";
                    var DataRoomBoundingBoxmin="";

                    var   ForgeArrayPoint=[];

                    _specific_Floor_Rooms_Array=[];

                    for (var i = 0; i < data.length; i++) {

                        var forgeidExact=  data[i].Forgeid;
                        var Category_NameExact=  data[i].Category_Name;
                        var Family_TypeExact=  data[i].Family_Type;
                        var Instance_NameExact=  data[i].Instance_Name;
                        var UrnExact=  data[i].MGuid;
                        var VersionExact=  data[i].Version;
                        var CompIdExact=  data[i].CompId;


                        //console.log(forgeidExact);
                        if(Category_NameExact=="Rooms")
                        {
                            ForgeArrayPoint.push(forgeidExact);

                            //  var roomCoordinate= getRooms(ForgeArrayPoint);
                            //  console.log(roomCoordinate);

                            _specific_Floor_Rooms_Array.push({roomid:forgeidExact,
                                defaultcolor:null,
                                facemeshes:null})
                        }


                    }

                    //_specific_Floor_Rooms_Array.push({roomid:7099,
                    //    defaultcolor:null,
                    //    facemeshes:null})

                    var roomCoordinate= renderRoomShader();
                    //console.log("---Finallll----");
                    // console.log(roomCoordinate);

                    var RoomDataMAx = roomCoordinate.split('^');
                    var maxp=RoomDataMAx[0];
                    var minp=RoomDataMAx[1];

                    var RoomData = maxp.split('~');
                    var RoomDatamin = minp.split('~');

                    for (var i = 0; i < RoomData.length; i++) {

                        var rt = RoomData[i].split('$');

                        for (var k = 0; k < data.length; k++)
                        {
                            var forgeidExact=  data[k].Forgeid;
                            var Category_NameExact=  data[k].Category_Name;
                            var Family_TypeExact=  data[k].Family_Type;
                            var Instance_NameExact=  data[k].Instance_Name;
                            var UrnExact=  data[k].MGuid;
                            var VersionExact=  data[k].Version;
                            var CompIdExact=  data[k].CompId;

                            if(rt[0]==forgeidExact)
                            {
                                DataRoomBoundingBox+=forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' + rt[1]+ '$';

                            }
                        }

                    }

                    for (var i = 0; i < RoomDatamin.length; i++) {

                        var rt1 = RoomDatamin[i].split('$');

                        for (var k = 0; k < data.length; k++)
                        {
                            var forgeidExact=  data[k].Forgeid;
                            var Category_NameExact=  data[k].Category_Name;
                            var Family_TypeExact=  data[k].Family_Type;
                            var Instance_NameExact=  data[k].Instance_Name;
                            var UrnExact=  data[k].MGuid;
                            var VersionExact=  data[k].Version;
                            var CompIdExact=  data[k].CompId;

                            if(rt1[0]==forgeidExact)
                            {
                                DataRoomBoundingBoxmin+=forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' + rt1[1]+ '$';

                            }
                        }

                    }


                    for (var i = 0; i < data.length; i++) {

                        var forgeid=  data[i].Forgeid;
                        var Category_Name=  data[i].Category_Name;
                        var Family_Type=  data[i].Family_Type;
                        var Instance_Name=  data[i].Instance_Name;
                        var Urn=  data[i].MGuid;
                        var Version=  data[i].Version;
                        var CompId=  data[i].CompId;

                        var id1 = parseInt(forgeid);

                        var bbox = getModifiedWorldBoundingBoxRoomwise(
                        id1,
                       viewer.model.getFragmentList()
                      );

                        DataStore+=forgeid + '~}' + Category_Name + '~}' + Family_Type + '~}' + Instance_Name + '~}' + Urn + '~}' + Version + '~}' + CompId + '~}' +  bbox.min.x + '~}' + bbox.max.x + '~}' + bbox.min.y + '~}' + bbox.max.y + '~}' + bbox.min.z + '~}' + bbox.max.z+ '#'  ;

                        // For Middle point

                        var CenterPointX ="";
                        var CenterPointY ="";
                        var CenterPointZ ="";

                        CenterPointX = ((bbox.max.x - bbox.min.x) / 2) + bbox.min.x;
                        CenterPointY = ((bbox.max.y  -  bbox.min.y) / 2) +  bbox.min.y;
                        CenterPointZ = (( bbox.max.z - bbox.min.z ) / 2) + bbox.min.z ;

                        DataStoreMiddle+=forgeid + '~}' + Category_Name  + '~}' + Family_Type + '~}' + Instance_Name + '~}' + Urn + '~}' + Version + '~}' + CompId + '~}' +  CenterPointX + '~}' + CenterPointY+ '~}' + CenterPointZ + '#'  ;
                    }

                    //  console.log(DataStore);

                    // For Middle point
                    //for (var i = 0; i < data.length; i++) {
                    //    var forgeid=  data[i].Forgeid;
                    //    var Category_Name=  data[i].Category_Name;
                    //    var Family_Type=  data[i].Family_Type;
                    //    var Instance_Name=  data[i].Instance_Name;
                    //    var Urn=  data[i].MGuid;
                    //    var Version=  data[i].Version;
                    //    var CompId=  data[i].CompId;

                    //    var middle= HighlightboxRoomwise(forgeid);

                    //    DataStoreMiddle+=forgeid + '~}' + Category_Name  + '~}' + Family_Type + '~}' + Instance_Name + '~}' + Urn + '~}' + Version + '~}' + CompId + '~}' +  middle.x + '~}' + middle.y + '~}' + middle.z + '#'  ;

                    //}

                    // console.log("doneee");

                    var value = JSON.stringify({
                        'Urn': _URN_,
                        'VersionNo': Version_No,
                        'DataStore': DataStore,
                    });

                    $.ajax({
                        type: "POST",
                        contentType: 'application/json',
                        url: '@Url.Action("SaveBoundingPoints", "QuantityTest")',
                        data: value,
                        dataType: "json",
                        success: function (result) {

                            var value = JSON.stringify({
                                'Urn': _URN_,
                                'VersionNo': Version_No,
                                'DataStoreMiddle': DataStoreMiddle
                            });


                            $.ajax({
                                type: "POST",
                                contentType: 'application/json',
                                url: '@Url.Action("SaveBoundingMiddlePoints", "QuantityTest")',
                                data: value,
                                dataType: "json",
                                success: function (result) {

                                    var value = JSON.stringify({
                                        'Urn': _URN_,
                                        'VersionNo': Version_No,
                                        'DataRoomBoundingBox': DataRoomBoundingBox,
                                        'DataRoomBoundingBoxmin':DataRoomBoundingBoxmin
                                    });


                                    $.ajax({
                                        type: "POST",
                                        contentType: 'application/json',
                                        url: '@Url.Action("SaveRoomPoints", "QuantityTest")',
                                        data: value,
                                        dataType: "json",
                                        success: function (result) {

                                            alert("Geometry Saved Successfully");
                                            $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();
                                        },
                                        error: function (result) {
                                            alert("Error in  Saving  Geometry");
                                            $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();

                                        }
                                    });



                                },
                                error: function (result) {
                                    alert("Error in  Saving  Geometry");
                                    $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();

                                }
                            });

                            $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();

                        },
                        error: function (result) {
                            alert("Error in  Saving  Geometry");
                            $('iframe[title=QuantityTest]').contents().find("#Modelloader").hide();
                        }
                    });


                },
                error: function (result) {
                    alert("Error1");
                }
            });

        }



        function getpoint(Roomid,Elementid)
        {
            var material1 = new THREE.LineBasicMaterial({
                color: 0x0077ff,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer
            });

            var HomeMesh="";
            var robotmesh="";
            var id1 = parseInt(Roomid);
            var id2 = parseInt(Elementid);


            var bbox = getModifiedWorldBoundingGetPoint(
            id1,
           viewer.model.getFragmentList()
          );

            HomeMesh= drawBoxGetPoint(bbox.min, bbox.max);

            var bbox = getModifiedWorldBoundingGetPoint(
            id2,
           viewer.model.getFragmentList()
          );

            robotmesh= drawBoxGetPoint(bbox.min, bbox.max);

            var mid= getCenterPoint(robotmesh,material2);

            var flag=  getFlag(HomeMesh,mid);
            console.log(flag);
            return flag;
        }

        function getModifiedWorldBoundingGetPoint(id1, fragList) {

            let bounds = new THREE.Box3()
          , box = new THREE.Box3()
          , instanceTree = viewer.impl.model.getData().instanceTree


            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)

            return bounds;
        }

        function drawBoxGetPoint(min, max) {

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer

            });

            var  middle=  drawLinesGetPoint([

                {x: min.x, y: min.y, z: min.z},
                {x: max.x, y: min.y, z: min.z},

                {x: max.x, y: min.y, z: min.z},
                {x: max.x, y: min.y, z: max.z},

                {x: max.x, y: min.y, z: max.z},
                {x: min.x, y: min.y, z: max.z},

                {x: min.x, y: min.y, z: max.z},
                {x: min.x, y: min.y, z: min.z},

                {x: min.x, y: max.y, z: max.z},
                {x: max.x, y: max.y, z: max.z},

                {x: max.x, y: max.y, z: max.z},
                {x: max.x, y: max.y, z: min.z},

                {x: max.x, y: max.y, z: min.z},
                {x: min.x, y: max.y, z: min.z},

                {x: min.x, y: max.y, z: min.z},
                {x: min.x, y: max.y, z: max.z},

                {x: min.x, y: min.y, z: min.z},
                {x: min.x, y: max.y, z: min.z},

                {x: max.x, y: min.y, z: min.z},
                {x: max.x, y: max.y, z: min.z},

                {x: max.x, y: min.y, z: max.z},
                {x: max.x, y: max.y, z: max.z},

                {x: min.x, y: min.y, z: max.z},
                {x: min.x, y: max.y, z: max.z}],

                material2);

            return middle;
        }

        function drawLinesGetPoint(coordsArray, material) {
            //console.log(coordsArray.length);

            geometry1 = new THREE.Geometry();

            for (var i = 0; i < coordsArray.length; i+=2) {

                var start = coordsArray[i];
                var end = coordsArray[i+1];

                var geometry = new THREE.Geometry();

                geometry.vertices.push(new THREE.Vector3(
                    start.x, start.y, start.z));

                geometry.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));

                geometry.computeLineDistances();

                var line = new THREE.Line(geometry, material);

                // viewer.impl.scene.add(line);


                // for center point
                geometry1.vertices.push(new THREE.Vector3(
                start.x, start.y, start.z));

                geometry1.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));

                geometry1.computeLineDistances();

            }

            var box1 = new THREE.Mesh(geometry1, material);
            //var flag= getFlag(box1,material);

            return box1;
        }

        function getFlag(homemesh,robotmesh) {

            //var robotBB = new THREE.Box3().setFromObject(robotmesh);
            //  console.log("robotmesh");
            // console.log(robotmesh);

            var homeBB = new THREE.Box3().setFromObject(homemesh);
            //  console.log("homemesh");
            // console.log(homeBB);


            var robotIsHome = homeBB.containsPoint(robotmesh);
            //  console.log("finalresult");
            // console.log(robotIsHome);

            return robotIsHome;
        }

        function GetRoomElement(Roomid)
        {

            var value = JSON.stringify({
                'Urn': _URN_,
                'VersionNo': Version_No,
            });


            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetModelForgeid", "QuantityTest")',
                data: value,
                dataType: "json",
                success: function (data) {

                    $('iframe[title=QuantityTest]').contents().find("#roomdatatable tbody").html('');

                    var Category_Name= "";
                    var loop=0;
                    var count=0;

                    for (var i = 0; i < data.length; i++) {
                        var forgeid=  data[i].Forgeid;

                        var boolen= getpoint(Roomid,forgeid)

                        if(boolen==true)
                        {

                            if(Category_Name!="" && Category_Name!= data[i].Category_Name)
                            {
                                $('iframe[title=QuantityTest]').contents().find("#roomdatatable tbody").append('<tr><td style="width:4%">'+Category_Name+'</td><td style="width:2%">'+count+'</td></tr>');

                                count=0;
                            }

                            Category_Name=  data[i].Category_Name;


                            $('iframe[title=QuantityTest]').contents().find("#roomdatatable tbody").append('<tr><td style="width:4%">'+Category_Name+'</td><td style="width:2%"><input type ="button" value = '+ forgeid +'  id ='+ forgeid +' onclick="window.parent.ADAHighlightbox1(this.id)"/></td></tr>');

                            count++;
                        }
                    }

                    $('iframe[title=QuantityTest]').contents().find("#roomdatatable tbody").append('<tr><td style="width:4%">'+Category_Name+'</td><td style="width:2%">'+count+'</td></tr>');
                    $('iframe[title=QuantityTest]').contents().find("#loading").hide();
                    $('iframe[title=QuantityTest]').contents().find("#roomdatatable").show();

                },
                error: function (result) {
                    alert("Error2");

                }
            });


        }



        function renderRoomShader()
        {

            //console.log('room number in this specific floor:'
              //  +  _specific_Floor_Rooms_Array.length);

            var  colorIndex = 0;
            var vAPoint = [];
            var vAPointMin = [];

            var storecooradinates="";
            var storecooradinatesmin="";

            $.each( _specific_Floor_Rooms_Array,
                function(num,room){

                    //console.log('room dbid:' + room.roomid);

                    if(colorIndex > 5)
                        colorIndex = 0;

                    var faceMeshArray = [];


                    var vBPointz = [];
                    var vCPoint = [];
                    vAPoint = [];
                    vAPointMin=[];

                    let bounds = new THREE.Box3()
                    , box = new THREE.Box3()
                      , instanceTree = viewer.impl.model.getData().instanceTree

                   // var instanceTree =  viewer.model.getData().instanceTree;
                    instanceTree.enumNodeFragments(room.roomid, function(fragId){

                        var bbox = getModifiedWorldBoundingGetPoint(
                               room.roomid,
                              viewer.model.getFragmentList()
                           );

                        var renderProxy = viewer.impl.getRenderProxy(
                             viewer.model,
                            fragId);

                        var matrix = renderProxy.matrixWorld;
                        var indices = renderProxy.geometry.ib;
                        var positions = renderProxy.geometry.vb;
                        var stride = renderProxy.geometry.vbstride;
                        var offsets = renderProxy.geometry.offsets;

                        if (!offsets || offsets.length === 0) {
                            offsets = [{start: 0, count: indices.length, index: 0}];
                        }

                        var vA = new THREE.Vector3();
                        var vB = new THREE.Vector3();
                        var vC = new THREE.Vector3();


                        var MaxPoint = "";
                        var MinPoint = "";

                        for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {

                            var start = offsets[oi].start;
                            var count = offsets[oi].count;
                            var index = offsets[oi].index;

                            var checkFace = 0;

                            for (var i = start, il = start + count; i < il; i += 3) {

                                var vz = new THREE.Vector3();

                                var a = index + indices[i];
                                var b = index + indices[i + 1];
                                var c = index + indices[i + 2];


                                vA.fromArray(positions, a * stride);
                                vB.fromArray(positions, b * stride);
                                vC.fromArray(positions, c * stride);


                                //vBPointz.push(vA.z);
                                //vBPointz.push(vB.z);
                                //vBPointz.push(vC.z);

                                vA.applyMatrix4(matrix);
                                vB.applyMatrix4(matrix);
                                vC.applyMatrix4(matrix);

                                var minz= Math.round(bbox.min.z * 100) / 100;
                                var maxz= Math.round(bbox.max.z * 100) / 100;
                                var Vcz=Math.round(vC.z * 100) / 100;

                                //console.log("Z VAlues----");
                                //console.log(maxz);
                                //console.log("With Matrix");
                                //console.log(Vcz);

                                // ---For Upper Point---

                                if(vAPoint.length==0)
                                {
                                    if(maxz==Vcz)
                                    {
                                        vAPoint.push(vA.x + ":" + vA.y + ":" + 0.0);
                                        vAPoint.push(vB.x + ":" + vB.y + ":" + 0.0);
                                        vAPoint.push(vC.x + ":" + vC.y + ":" + 0.0);

                                    }
                                }
                                else
                                {
                                    if(maxz==Vcz)
                                    {
                                        var leng=vAPoint.length;
                                        //console.log("Lenth-------");
                                        //console.log(leng);
                                        var flagx=0;
                                        var flagy=0;
                                        var flagz=0;
                                        for(var j=0; j< leng;j++)
                                        {
                                            var w= vAPoint[j].split(':');

                                            if(Math.abs(vA.x-w[0])< 0.5 && Math.abs(vA.y-w[1])< 0.5)
                                            {
                                                console.log("--valuess1---");
                                                console.log(Math.abs(vA.x-w[0]));
                                                console.log(Math.abs(vA.y-w[1]));

                                                flagx=1;
                                                // vAPoint.push(vA.x + ":" + vA.y + ":" + 0.0);
                                            }

                                            if(Math.abs(vB.x-w[0])< 0.5 && Math.abs(vB.y-w[1])< 0.5)
                                            {
                                                console.log("--valuess2---");
                                                console.log(Math.abs(vB.x-w[0]));
                                                console.log(Math.abs(vB.y-w[1]));

                                                flagy=1;
                                                // vAPoint.push(vB.x + ":" + vB.y + ":" + 0.0);
                                            }

                                            if(Math.abs(vC.x-w[0])< 0.5 && Math.abs(vC.y-w[1])< 0.5)
                                            {
                                                console.log("--valuess3---");
                                                console.log(Math.abs(vC.x-w[0]));
                                                console.log(Math.abs(vC.y-w[1]));

                                                flagz=1;
                                                // vAPoint.push(vC.x + ":" + vC.y + ":" + 0.0);

                                            }
                                        }

                                        if(flagx==0)
                                        {
                                            vAPoint.push(vA.x + ":" + vA.y + ":" + 0.0);

                                        }
                                        if(flagy==0)
                                        {
                                            vAPoint.push(vB.x + ":" + vB.y + ":" + 0.0 );
                                        }
                                        if(flagz==0)
                                        {
                                            vAPoint.push(vC.x + ":" + vC.y + ":" + 0.0 );
                                        }
                                    }

                                }


                                // ---For Lower Point---

                                if(vAPointMin.length==0)
                                {
                                    if(minz==Vcz)
                                    {

                                        vAPointMin.push(vA.x + ":" + vA.y + ":" + 0.0);
                                        vAPointMin.push(vB.x + ":" + vB.y + ":" + 0.0);
                                        vAPointMin.push(vC.x + ":" + vC.y + ":" + 0.0) ;
                                    }
                                }
                                else
                                {
                                    if(minz==Vcz)
                                    {
                                        var leng=vAPointMin.length;
                                        // console.log("Lenth-------");
                                        //  console.log(leng);
                                        var flagx=0;
                                        var flagy=0;
                                        var flagz=0;
                                        for(var j=0; j< leng;j++)
                                        {
                                            var w= vAPointMin[j].split(':');

                                            if(Math.abs(vA.x-w[0])< 0.5 && Math.abs(vA.y-w[1])< 0.5)
                                            {
                                                //  console.log("--valuess1---");
                                                //  console.log(Math.abs(vA.x-w[0]));
                                                //  console.log(Math.abs(vA.y-w[1]));

                                                flagx=1;
                                                // vAPointMin.push(vA.x + ":" + vA.y + ":" + 0.0);
                                            }

                                            if(Math.abs(vB.x-w[0])< 0.5 && Math.abs(vB.y-w[1])< 0.5)
                                            {
                                                // console.log("--valuess2---");
                                                //  console.log(Math.abs(vB.x-w[0]));
                                                //  console.log(Math.abs(vB.y-w[1]));

                                                flagy=1;
                                                // vAPointMin.push(vB.x + ":" + vB.y + ":" + 0.0);
                                            }

                                            if(Math.abs(vC.x-w[0])< 0.5 && Math.abs(vC.y-w[1])< 0.5)
                                            {
                                                // console.log("--valuess3---");
                                                //console.log(Math.abs(vC.x-w[0]));
                                                // console.log(Math.abs(vC.y-w[1]));

                                                flagz=1;
                                                // vAPointMin.push(vC.x + ":" + vC.y + ":" + 0.0);

                                            }
                                        }

                                        if(flagx==0)
                                        {
                                            vAPointMin.push(vA.x + ":" + vA.y + ":" + 0.0 );
                                        }
                                        if(flagy==0)
                                        {
                                            vAPointMin.push(vB.x + ":" + vB.y + ":" + 0.0 );
                                        }
                                        if(flagz==0)
                                        {
                                            vAPointMin.push(vC.x + ":" + vC.y + ":" + 0.0 );
                                        }


                                    }

                                }


                                //   var faceGeometry = createFaceGeometry(vA, vB, vC);
                                //   var faces = faceGeometry.faces;


                            }
                        }


                        console.log("-----Ppoints------------");
                        vAPoint = GetUnique(vAPoint);
                        vAPointMin=GetUnique(vAPointMin);
                        console.log(vAPoint);


                            if(vAPoint.length <=200)
                            {
                                storecooradinates+= room.roomid +'$';

                                for (var i = 0; i < vAPoint.length; i++) {
                                    storecooradinates += vAPoint[i]+'#';
                                }

                                storecooradinates= storecooradinates.substring(0, storecooradinates.length-1);

                                storecooradinates+='~';
                            }

                            if(vAPointMin.length <=200)
                            {
                                storecooradinatesmin+= room.roomid +'$';

                                for (var i = 0; i < vAPointMin.length; i++) {
                                    storecooradinatesmin += vAPointMin[i]+'#';
                                }

                                storecooradinatesmin= storecooradinatesmin.substring(0, storecooradinatesmin.length-1);

                                storecooradinatesmin+='~';
                            }




                    });

                    // room.defaultcolor = _materialArray[colorIndex];
                    // room.facemeshes = faceMeshArray;

                    colorIndex++;


                });

            storecooradinatesmin= storecooradinatesmin.substring(0, storecooradinatesmin.length-1);
            storecooradinates= storecooradinates.substring(0, storecooradinates.length-1);

            var newstorecooradinates= storecooradinates+'^'+storecooradinatesmin

            return newstorecooradinates;
        }

        function GetUnique(inputArray) {
            var outputArray = [];

            for (var i = 0; i < inputArray.length; i++) {
                if ((jQuery.inArray(inputArray[i], outputArray)) == -1) {
                    outputArray.push(inputArray[i]);
                }
            }

            return outputArray;
        }


        function fnSlopeCoordinate()
        {

            $('iframe[title=ADAClearance]').contents().find("#Modelloader").show();

            if(_URN_=="")
            {
                alert("Please Load Model")
                $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();
                return;
            }

            var moddata = JSON.stringify({
                'Urn': _URN_,
                'VersionNo': Version_No
            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetModelForgeid", "QuantityTest")',
                data: moddata,
                dataType: "json",
                success: function (data) {
                    // console.log(data.length);
                    var FloorDataStore="";

                    var   ForgeArrayPoint=[];
                    var DataStore="";
                    _specific_Floor_Rooms_Array=[];

                    for (var i = 0; i < data.length; i++) {

                        var forgeidExact=  data[i].Forgeid;
                        var Category_NameExact=  data[i].Category_Name;
                        var Family_TypeExact=  data[i].Family_Type;
                        var Instance_NameExact=  data[i].Instance_Name;
                        var UrnExact=  data[i].MGuid;
                        var VersionExact=  data[i].Version;
                        var CompIdExact=  data[i].CompId;

                        if(Category_NameExact=="Floors" || Category_NameExact=="Ramps")
                        {
                            ForgeArrayPoint.push(forgeidExact);

                            //  var roomCoordinate= getRooms(ForgeArrayPoint);
                            console.log(Category_NameExact);

                            _specific_Floor_Rooms_Array.push({roomid:forgeidExact,
                                defaultcolor:null,
                                facemeshes:null})
                        }


                        var id1 = parseInt(forgeidExact);

                        var bbox = getModifiedWorldBoundingBoxRoomwise(
                        id1,
                       viewer.model.getFragmentList()
                      );

                        DataStore+=forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' +  bbox.min.x + '~}' + bbox.max.x + '~}' + bbox.min.y + '~}' + bbox.max.y + '~}' + bbox.min.z + '~}' + bbox.max.z+ '#'  ;



                    }


                    var roomCoordinate= funSlopeco();
                    //console.log("---Finallll----");
                    // console.log(roomCoordinate);

                    var RoomData = roomCoordinate.split('~');

                    for (var i = 0; i < RoomData.length; i++) {

                        var rt = RoomData[i].split('$');

                        for (var k = 0; k < data.length; k++)
                        {
                            var forgeidExact=  data[k].Forgeid;
                            var Category_NameExact=  data[k].Category_Name;
                            var Family_TypeExact=  data[k].Family_Type;
                            var Instance_NameExact=  data[k].Instance_Name;
                            var UrnExact=  data[k].MGuid;
                            var VersionExact=  data[k].Version;
                            var CompIdExact=  data[k].CompId;

                            if(rt[0]==forgeidExact)
                            {
                                FloorDataStore+=forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' + rt[1]+ '$';

                            }


                        }

                    }

                    var value = JSON.stringify({
                        'Urn': _URN_,
                        'VersionNo': Version_No,
                        'FloorDataStore': FloorDataStore,
                    });

                    $.ajax({
                        type: "POST",
                        contentType: 'application/json',
                        url: '@Url.Action("SaveSlopePoints", "ADAClearance")',
                        data: value,
                        dataType: "json",
                        success: function (result) {

                            var value = JSON.stringify({
                                'Urn': _URN_,
                                'VersionNo': Version_No,
                                'DataStore': DataStore,
                            });

                            $.ajax({
                                type: "POST",
                                contentType: 'application/json',
                                url: '@Url.Action("SaveBoundingPoints", "QuantityTest")',
                                data: value,
                                dataType: "json",
                                success: function (result) {

                                    alert("Geometry Saved Successfully");
                                    $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();

                                },
                                error: function (result) {
                                    $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();
                                    alert("Error1");
                                }
                            });

                        },
                        error: function (result) {
                            $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();
                            alert("Error1");
                        }
                    });



                    $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();
                },
                error: function (result) {
                    alert("Error1");
                    $('iframe[title=ADAClearance]').contents().find("#Modelloader").hide();
                }
            });


        }


        function funSlopeco()
        {
            console.log('room number in this specific floor:'
                      +  _specific_Floor_Rooms_Array.length);

            var  colorIndex = 0;
            var vAPoint = [];
            var vAPointMin = [];

            var storecooradinates="";

            $.each( _specific_Floor_Rooms_Array,
                  function(num,room){

                      console.log('room dbid:' + room.roomid);

                      if(colorIndex > 5)
                          colorIndex = 0;

                      var faceMeshArray = [];


                      var vBPointz = [];
                      var vCPoint = [];
                      vAPoint = [];
                      vAPointMin = [];




                      let bounds = new THREE.Box3()
                     , box = new THREE.Box3()
                       , instanceTree = viewer.impl.model.getData().instanceTree



                      // var instanceTree =  viewer.impl.model.getData().instanceTree;
                      instanceTree.enumNodeFragments(room.roomid, function(fragId){
                          var bbox = getModifiedWorldBoundingGetPoint(
                                 room.roomid,
                                viewer.model.getFragmentList()
                             );

                          console.log("boxxx");
                          console.log(bbox)
                          var renderProxy = viewer.impl.getRenderProxy(
                               viewer.model,
                              fragId);

                          var matrix = renderProxy.matrixWorld;
                          var indices = renderProxy.geometry.ib;
                          var positions = renderProxy.geometry.vb;
                          var stride = renderProxy.geometry.vbstride;
                          var offsets = renderProxy.geometry.offsets;

                          if (!offsets || offsets.length === 0) {
                              offsets = [{start: 0, count: indices.length, index: 0}];
                          }

                          var vA = new THREE.Vector3();
                          var vB = new THREE.Vector3();
                          var vC = new THREE.Vector3();


                          var MaxPoint = "";
                          var MinPoint = "";

                          for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {

                              var start = offsets[oi].start;
                              var count = offsets[oi].count;
                              var index = offsets[oi].index;

                              var checkFace = 0;

                              for (var i = start, il = start + count; i < il; i += 3) {

                                  var vz = new THREE.Vector3();

                                  var a = index + indices[i];
                                  var b = index + indices[i + 1];
                                  var c = index + indices[i + 2];


                                  vA.fromArray(positions, a * stride);
                                  vB.fromArray(positions, b * stride);
                                  vC.fromArray(positions, c * stride);


                                  //vBPointz.push(vA.z);
                                  //vBPointz.push(vB.z);
                                  //vBPointz.push(vC.z);

                                  vA.applyMatrix4(matrix);
                                  vB.applyMatrix4(matrix);
                                  vC.applyMatrix4(matrix);

                                  var minz= Math.round(bbox.min.z * 100) / 100;
                                  var maxz= Math.round(bbox.max.z * 100) / 100;
                                  var Vcz=Math.round(vC.z * 100) / 100;


                               //   console.log("Z VAlues----");
                                 // console.log(maxz);
                                 // console.log("With Matrix");
                                 // console.log(Vcz);

                                  // ---For Upper Point---

                                  if(vAPoint.length==0)
                                  {
                                      if(maxz==Vcz)
                                      {

                                          vAPoint.push(vA.x + ":" + vA.y + ":" + vA.z);
                                          vAPoint.push(vB.x + ":" + vB.y + ":" + vB.z);
                                          vAPoint.push(vC.x + ":" + vC.y + ":" + vC.z) ;
                                      }
                                  }
                                  else
                                  {
                                      if(maxz==Vcz)
                                      {
                                          var leng=vAPoint.length;
                                         // console.log("Lenth-------");
                                        //  console.log(leng);
                                          var flagx=0;
                                          var flagy=0;
                                          var flagz=0;
                                          for(var j=0; j< leng;j++)
                                          {
                                              var w= vAPoint[j].split(':');

                                              if(Math.abs(vA.x-w[0])< 0.5 && Math.abs(vA.y-w[1])< 0.5)
                                              {
                                                //  console.log("--valuess1---");
                                                 // console.log(Math.abs(vA.x-w[0]));
                                                //  console.log(Math.abs(vA.y-w[1]));

                                                  flagx=1;
                                                  // vAPoint.push(vA.x + ":" + vA.y + ":" + 0.0);
                                              }

                                              if(Math.abs(vB.x-w[0])< 0.5 && Math.abs(vB.y-w[1])< 0.5)
                                              {
                                                 // console.log("--valuess2---");
                                                 // console.log(Math.abs(vB.x-w[0]));
                                                //  console.log(Math.abs(vB.y-w[1]));

                                                  flagy=1;
                                                  // vAPoint.push(vB.x + ":" + vB.y + ":" + 0.0);
                                              }

                                              if(Math.abs(vC.x-w[0])< 0.5 && Math.abs(vC.y-w[1])< 0.5)
                                              {
                                                  //console.log("--valuess3---");
                                                 // console.log(Math.abs(vC.x-w[0]));
                                                 // console.log(Math.abs(vC.y-w[1]));

                                                  flagz=1;
                                                  // vAPoint.push(vC.x + ":" + vC.y + ":" + 0.0);

                                              }
                                          }

                                          if(flagx==0)
                                          {
                                              vAPoint.push(vA.x + ":" + vA.y + ":" + vA.z );
                                          }
                                          if(flagy==0)
                                          {
                                              vAPoint.push(vB.x + ":" + vB.y + ":" + vB.z );
                                          }
                                          if(flagz==0)
                                          {
                                              vAPoint.push(vC.x + ":" + vC.y + ":" + vC.z );
                                          }


                                      }

                                  }

                                  // ---For Lower Point---

                                  //if(vAPointMin.length==0)
                                  //{
                                  //    if(minz==Vcz)
                                  //    {

                                  //        vAPointMin.push(vA.x + ":" + vA.y + ":" + vA.z);
                                  //        vAPointMin.push(vB.x + ":" + vB.y + ":" + vB.z);
                                  //        vAPointMin.push(vC.x + ":" + vC.y + ":" + vC.z) ;
                                  //    }
                                  //}
                                  //else
                                  //{
                                  //    if(minz==Vcz)
                                  //    {
                                  //        var leng=vAPointMin.length;
                                  //       // console.log("Lenth-------");
                                  //      //  console.log(leng);
                                  //        var flagx=0;
                                  //        var flagy=0;
                                  //        var flagz=0;
                                  //        for(var j=0; j< leng;j++)
                                  //        {
                                  //            var w= vAPointMin[j].split(':');

                                  //            if(Math.abs(vA.x-w[0])< 0.5 && Math.abs(vA.y-w[1])< 0.5)
                                  //            {
                                  //              //  console.log("--valuess1---");
                                  //              //  console.log(Math.abs(vA.x-w[0]));
                                  //              //  console.log(Math.abs(vA.y-w[1]));

                                  //                flagx=1;
                                  //                // vAPointMin.push(vA.x + ":" + vA.y + ":" + 0.0);
                                  //            }

                                  //            if(Math.abs(vB.x-w[0])< 0.5 && Math.abs(vB.y-w[1])< 0.5)
                                  //            {
                                  //               // console.log("--valuess2---");
                                  //              //  console.log(Math.abs(vB.x-w[0]));
                                  //              //  console.log(Math.abs(vB.y-w[1]));

                                  //                flagy=1;
                                  //                // vAPointMin.push(vB.x + ":" + vB.y + ":" + 0.0);
                                  //            }

                                  //            if(Math.abs(vC.x-w[0])< 0.5 && Math.abs(vC.y-w[1])< 0.5)
                                  //            {
                                  //               // console.log("--valuess3---");
                                  //                //console.log(Math.abs(vC.x-w[0]));
                                  //               // console.log(Math.abs(vC.y-w[1]));

                                  //                flagz=1;
                                  //                // vAPointMin.push(vC.x + ":" + vC.y + ":" + 0.0);

                                  //            }
                                  //        }

                                  //        if(flagx==0)
                                  //        {
                                  //            vAPointMin.push(vA.x + ":" + vA.y + ":" + vA.z );
                                  //        }
                                  //        if(flagy==0)
                                  //        {
                                  //            vAPointMin.push(vB.x + ":" + vB.y + ":" + vB.z );
                                  //        }
                                  //        if(flagz==0)
                                  //        {
                                  //            vAPointMin.push(vC.x + ":" + vC.y + ":" + vC.z );
                                  //        }


                                  //    }

                                  //}

                                  //   var faceGeometry = createFaceGeometry(vA, vB, vC);
                                  //   var faces = faceGeometry.faces;


                              }
                          }


                         // console.log("-----Ppoints------------");
                          vAPoint = GetUnique(vAPoint);
                          vAPointMin = GetUnique(vAPointMin);

                          console.log("-----lengthsss------------");
                          console.log(room.roomid);
                          console.log(vAPoint.length);
                          console.log(vAPointMin.length);

                          //if(vAPoint.length < vAPointMin.length)
                          //{
                              if(vAPoint.length <=200)
                              {
                                  storecooradinates+= room.roomid +'$';

                                  for (var i = 0; i < vAPoint.length; i++) {
                                      storecooradinates += vAPoint[i]+'#';
                                  }

                                  storecooradinates= storecooradinates.substring(0, storecooradinates.length-1);

                                  storecooradinates+='~';
                              }
                          //}
                          //else
                          //{
                              //if(vAPointMin.length <=200)
                              //{
                              //    storecooradinates+= room.roomid +'$';

                              //    for (var i = 0; i < vAPointMin.length; i++) {
                              //        storecooradinates += vAPointMin[i]+'#';
                              //    }

                              //    storecooradinates= storecooradinates.substring(0, storecooradinates.length-1);

                              //    storecooradinates+='~';
                              //}
                         // }

                          // console.log(vAPoint);

                      },true);

                      // room.defaultcolor = _materialArray[colorIndex];
                      // room.facemeshes = faceMeshArray;

                      colorIndex++;


                  });

            storecooradinates= storecooradinates.substring(0, storecooradinates.length-1);
            //console.log(" dasdsadasd");
            //  console.log(storecooradinates);
            return storecooradinates;

        }

        //========================= Conduits Function==========================================

        var  _specific_conduit_Array = [];

        function fnConduitCoordinate() {
            console.log("Within fnConduitCoordinate");

            $('iframe[title=Electrical-360]').contents().find("#Modelloader").show();

            if(_URN_=="")
            {
                alert("Please Load Model")
                $('iframe[title=Electrical-360]').contents().find("#Modelloader").hide();
                return;
            }


            var moddata = JSON.stringify({
                'Urn': _URN_,
                'VersionNo': Version_No
            });
            console.log("_URN_");
            console.log(_URN_);
            console.log("Version_No");
            console.log(Version_No);

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetModelForgeid", "QuantityTest")',
                data: moddata,
                dataType: "json",
                success: function (data) {
                    console.log("data");
                    console.log(data);
                    console.log("data.length");
                    console.log(data.length);
                    var ConduitsDataStore = "";

                    var ForgeArrayPoint = [];
                    var DataStore = "";
                      _specific_conduit_Array = [];

                    for (var i = 0; i < data.length; i++) {

                        var forgeidExact = data[i].Forgeid;
                        var Category_NameExact = data[i].Category_Name;
                        var Family_TypeExact = data[i].Family_Type;
                        var Instance_NameExact = data[i].Instance_Name;
                        var UrnExact = data[i].MGuid;
                        var VersionExact = data[i].Version;
                        var CompIdExact = data[i].CompId;

                        if (Category_NameExact == "Conduits" || Category_NameExact == "Conduit Fittings") {
                            ForgeArrayPoint.push(forgeidExact);

                            console.log(Category_NameExact);

                            _specific_conduit_Array.push({
                                conduitid: forgeidExact,
                                defaultcolor: null,
                                facemeshes: null
                            })
                        }

                        var id1 = parseInt(forgeidExact);

                        var bbox = getModifiedWorldBoundingBoxRoomwise(
                        id1,
                       viewer.model.getFragmentList()
                      );

                        DataStore+=forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' +  bbox.min.x + '~}' + bbox.max.x + '~}' + bbox.min.y + '~}' + bbox.max.y + '~}' + bbox.min.z + '~}' + bbox.max.z+ '#'  ;


                    }


                    var ConduitCoordinate = funConduitco(_specific_conduit_Array);
                    //console.log("---Finallll----");

                     var ConduitsData = ConduitCoordinate.split('~');

                     for (var i = 0; i < ConduitsData.length; i++) {

                         var rt = ConduitsData[i].split('$');

                        for (var k = 0; k < data.length; k++) {
                            var forgeidExact = data[k].Forgeid;
                            var Category_NameExact = data[k].Category_Name;
                            var Family_TypeExact = data[k].Family_Type;
                            var Instance_NameExact = data[k].Instance_Name;
                            var UrnExact = data[k].MGuid;
                            var VersionExact = data[k].Version;
                            var CompIdExact = data[k].CompId;

                            if (rt[0] == forgeidExact) {
                                ConduitsDataStore += forgeidExact + '~}' + Category_NameExact + '~}' + Family_TypeExact + '~}' + Instance_NameExact + '~}' + UrnExact + '~}' + VersionExact + '~}' + CompIdExact + '~}' + rt[1] + '$';

                            }


                        }

                    }

                    var value = JSON.stringify({
                        'Urn': _URN_,
                        'VersionNo': Version_No,
                        'ConduitsDataStore': ConduitsDataStore,
                    });

                    $.ajax({
                        type: "POST",
                        contentType: 'application/json',
                        url: '@Url.Action("SaveCoduitsPoints", "Electrical360")',
                        data: value,
                        dataType: "json",
                        success: function (result) {

                            var value = JSON.stringify({
                                'Urn': _URN_,
                                'VersionNo': Version_No,
                                'DataStore': DataStore,
                            });

                            $.ajax({
                                type: "POST",
                                contentType: 'application/json',
                                url: '@Url.Action("SaveBoundingPoints", "QuantityTest")',
                                data: value,
                                dataType: "json",
                                success: function (result) {

                                    alert("Geometry Saved Successfully");
                                    $('iframe[title=Electrical-360]').contents().find("#Modelloader").hide();

                                },
                                error: function (result) {
                                    $('iframe[title=Electrical-360]').contents().find("#Modelloader").hide();
                                    alert("Error1");
                                }
                            });

                        },
                        error: function (result) {
                            $('iframe[title=Electrical-360]').contents().find("#Modelloader").hide();
                            alert("Error1");
                        }
                    });

                },
                error: function (result) {
                    $('iframe[title=Electrical-360]').contents().find("#Modelloader").hide();
                    alert("Error1");
                }
            });
        }

        function funConduitco(_specific_conduit_Array) {

            console.log("Within funConduitco");

            console.log('conduit id in this specific floor:'
                      + _specific_conduit_Array.conduitid);

            var colorIndex = 0;
            var vAPoint = [];
            var vAPointMin = [];

            var storecooradinates = "";

            $.each(_specific_conduit_Array,
                  function (num, conduit) {

                      console.log('conduit dbid:' + conduit.conduitid);

                      if (colorIndex > 5)
                          colorIndex = 0;

                      var faceMeshArray = [];


                      var vBPointz = [];
                      var vCPoint = [];
                      vAPoint = [];
                      vAPointMin = [];

                      let bounds = new THREE.Box3()
                     , box = new THREE.Box3()
                       , instanceTree = viewer.impl.model.getData().instanceTree

                      // var instanceTree =  viewer.impl.model.getData().instanceTree;
                      instanceTree.enumNodeFragments(conduit.conduitid, function (fragId) {
                          var bbox = getModifiedWorldBoundingGetPoint(
                                 conduit.conduitid,
                                viewer.model.getFragmentList()
                             );

                          console.log("boxxx");
                          console.log(bbox)
                          var renderProxy = viewer.impl.getRenderProxy(
                               viewer.model,
                              fragId);

                          var matrix = renderProxy.matrixWorld;
                          var indices = renderProxy.geometry.ib;
                          var positions = renderProxy.geometry.vb;
                          var stride = renderProxy.geometry.vbstride;
                          var offsets = renderProxy.geometry.offsets;

                          if (!offsets || offsets.length === 0) {
                              offsets = [{ start: 0, count: indices.length, index: 0 }];
                          }

                          var vA = new THREE.Vector3();
                          var vB = new THREE.Vector3();
                          var vC = new THREE.Vector3();


                          var MaxPoint = "";
                          var MinPoint = "";

                          for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {

                              var start = offsets[oi].start;
                              var count = offsets[oi].count;
                              var index = offsets[oi].index;

                              var checkFace = 0;

                              for (var i = start, il = start + count; i < il; i += 3) {

                                  var vz = new THREE.Vector3();

                                  var a = index + indices[i];
                                  var b = index + indices[i + 1];
                                  var c = index + indices[i + 2];


                                  vA.fromArray(positions, a * stride);
                                  vB.fromArray(positions, b * stride);
                                  vC.fromArray(positions, c * stride);


                                  vA.applyMatrix4(matrix);
                                  vB.applyMatrix4(matrix);
                                  vC.applyMatrix4(matrix);


                                  console.log("vA");
                                  console.log(vA);
                                  console.log("vB");
                                  console.log(vB);
                                  console.log("vC");
                                  console.log(vC);

                                  vAPoint.push(vA.x + ":" + vA.y + ":" + vA.z);
                                  vAPoint.push(vB.x + ":" + vB.y + ":" + vB.z);
                                  vAPoint.push(vC.x + ":" + vC.y + ":" + vC.z) ;

                              }
                          }


                          // console.log("-----Ppoints------------");
                       //   vAPoint = GetUnique(vAPoint);
                         // vAPointMin = GetUnique(vAPointMin);

                         // console.log("-----lengthsss------------");
                        ///  console.log(conduit.conduitid);
                         // console.log(vAPoint.length);
                        //  console.log(vAPointMin.length);

                          //if(vAPoint.length < vAPointMin.length)
                          //{
                          if (vAPoint.length <= 200) {
                              storecooradinates += conduit.conduitid + '$';

                              for (var i = 0; i < vAPoint.length; i++) {
                                  storecooradinates += vAPoint[i] + '#';
                              }

                              storecooradinates = storecooradinates.substring(0, storecooradinates.length - 1);

                              storecooradinates += '~';
                          }

                      }, true);

                      colorIndex++;
                  });

            storecooradinates = storecooradinates.substring(0, storecooradinates.length - 1);

            return storecooradinates;

        }



        function getWindowHeadercolor() {

            var storedColor = $('.navbar').css('background-color');
            $('.k-header').css('backgroundColor', storedColor);
        }



    </script>

    <script>
        $(window).resize(function () {
            resizeWrapper();
        });

        function resizeWrapper() {
         $("#viewer").width($('#body').innerWidth() - 430);
         }

        $(document).ready(function () {
            $(window).trigger("resize");
        });
    </script>

    <script>

        function FnElectricalMiddlePoints()
        {

            $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").show();

            if(_URN_=="")
            {
                alert("Please Load Model")
                $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();
                return;
            }

            var moddata = JSON.stringify({
                'Urn': _URN_,
                'VersionNo': Version_No
            });

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: '@Url.Action("GetModelForgeid", "QuantityTest")',
                data: moddata,
                dataType: "json",
                success: function (data) {
                    // console.log(data.length);

                    var DataStore="";
                    var DataStoreMiddle="";
                    var DataRoomBoundingBox="";
                    var DataRoomBoundingBoxmin="";

                    var   ForgeArrayPoint=[];


                    for (var i = 0; i < data.length; i++) {

                        var forgeid=  data[i].Forgeid;
                        var Category_Name=  data[i].Category_Name;
                        var Family_Type=  data[i].Family_Type;
                        var Instance_Name=  data[i].Instance_Name;
                        var Urn=  data[i].MGuid;
                        var Version=  data[i].Version;
                        var CompId=  data[i].CompId;

                        var id1 = parseInt(forgeid);

                        var bbox = getModifiedWorldBoundingBoxRoomwise(
                        id1,
                       viewer.model.getFragmentList()
                      );

                        DataStore+=forgeid + '~}' + Category_Name + '~}' + Family_Type + '~}' + Instance_Name + '~}' + Urn + '~}' + Version + '~}' + CompId + '~}' +  bbox.min.x + '~}' + bbox.max.x + '~}' + bbox.min.y + '~}' + bbox.max.y + '~}' + bbox.min.z + '~}' + bbox.max.z+ '#'  ;

                        // For Middle point

                        var CenterPointX ="";
                        var CenterPointY ="";
                        var CenterPointZ ="";

                        CenterPointX = ((bbox.max.x - bbox.min.x) / 2) + bbox.min.x;
                        CenterPointY = ((bbox.max.y  -  bbox.min.y) / 2) +  bbox.min.y;
                        CenterPointZ = (( bbox.max.z - bbox.min.z ) / 2) + bbox.min.z ;

                        DataStoreMiddle+=forgeid + '~}' + Category_Name  + '~}' + Family_Type + '~}' + Instance_Name + '~}' + Urn + '~}' + Version + '~}' + CompId + '~}' +  CenterPointX + '~}' + CenterPointY+ '~}' + CenterPointZ + '#'  ;
                    }



                    // console.log("doneee");

                    var value = JSON.stringify({
                        'Urn': _URN_,
                        'VersionNo': Version_No,
                        'DataStore': DataStore,
                    });

                    $.ajax({
                        type: "POST",
                        contentType: 'application/json',
                        url: '@Url.Action("SaveBoundingPoints", "QuantityTest")',
                        data: value,
                        dataType: "json",
                        success: function (result) {

                            var value = JSON.stringify({
                                'Urn': _URN_,
                                'VersionNo': Version_No,
                                'DataStoreMiddle': DataStoreMiddle
                            });


                            $.ajax({
                                type: "POST",
                                contentType: 'application/json',
                                url: '@Url.Action("SaveBoundingMiddlePoints", "QuantityTest")',
                                data: value,
                                dataType: "json",
                                success: function (result) {

                                    alert("Geometry Saved Successfully");
                                    $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();

                                },
                                error: function (result) {
                                    alert("Error in  Saving  Geometry");
                                    $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();

                                }
                            });

                            $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();

                        },
                        error: function (result) {
                            alert("Error in  Saving  Geometry");
                            $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();
                        }
                    });


                },
                error: function (result) {
                    alert("Error1");
                    $('iframe[title=Electrical-360]').contents().find("#ModelloaderFm").hide();
                }

            });

        }


    </script>

    //
    <script>

        var faceMeshArray1 = [];
        var _overlaySceneName = "overlay-room-geometry";
        var _overlaySceneName2 = "bb";
        var _overlaySceneName3 = "tri";
        var _overlaySceneName4 = "4";
        var _overlaySceneName5 = "canvas";
        var _overlaySceneName6 = "triangles1";
        var UniId = 100;
        var material1 = createFaceMaterial("#b4ff77", 0.9, true); //green
        var material2 = createFaceMaterial("#f72727", 0.9, true); //red
        var material3 = createFaceMaterial("#0000FF", 0.9, true); //blue
        var material4 = createFaceMaterial("#0000FF", 0.9, true); //blue
        var mats;
        var colorchange = 0;
        var _customMaterialPrefix = 'forge-material-face-';
        var _specific_Floor_Rooms_Array = [];
        var countx = 0;
        var consoledata = new Array();
        var Slopedata = '';
        var SurfaceIddata = '';
        var PointCordinatesdata = '';
        var slopecheck = ''
        var Bulkdata = '';
        var Bulkdataindex = 0;
        var oldTextures = new Array();
        var oldColors = new Array();
        var vectorarrayX1Data = [];
        var vectorarrayX2Data = [];
        var Object3dArr1 = [];

        function RunShader(ForgeIds, checkslope, RevitID, BaseLevel) {

            faceMeshArray = [];
            colorchange = 0;
            _specific_Floor_Rooms_Array = [];
            SlopeClearAll();
            SlopeClearAll2();
            slopecheck = checkslope;
            Bulkdata = [];
            Bulkdataindex = 0;
            for (var i = 0; i < ForgeIds.length; i++) {
                _specific_Floor_Rooms_Array.push({
                    roomid: ForgeIds[i],
                    revid: RevitID[i],
                    baseid: BaseLevel[i],
                    defaultcolor: null,
                    facemeshes: null
                });
            }
           return renderRoomShaderSlope();

        }

        function renderRoomShaderSlope() {

            var XlsData = [];
            var textforXls = '';
            var vectorarrayNoDup3 = [];
            viewer.impl.createOverlayScene(_overlaySceneName);
            material1.name = "ADN-Material1";
            material2.name = "ADN-Material2";
            material3.name = "ADN-Material3";
            viewer.impl.matman().addMaterial('ADN-Material1', material1, true);
            viewer.impl.matman().addMaterial('ADN-Material2', material2, true);
            viewer.impl.matman().addMaterial('ADN-Material3', material3, true);
            mats = viewer.impl.matman()._materials;

            oldTextures = new Array();
            oldColors = new Array();
            for (index in mats) {
                m = mats[index];
                oldTextures[index] = m.map;
                oldColors[index] = m.color;
            }

            var colorIndex = 0;
            Bulkdataindex1 = 1;
            Bulkdataindex2 = 1;
            $.each(_specific_Floor_Rooms_Array,
                function (num, room) {


                    vectorarray = [];
                    vectorarrayX1 = [];
                    vectorarrayX2 = [];
                    countx = 0;
                    Slopedata = ''
                    SurfaceIddata = ''
                    PointCordinatesdata = ''
                    var renderProxy = '';
                    var instanceTree = viewer.model.getData().instanceTree;
                    instanceTree.enumNodeFragments(room.roomid, function (fragId) {

                        renderProxy = viewer.impl.getRenderProxy(
                            viewer.model,
                            fragId);

                        var matrix = renderProxy.matrixWorld;
                        var indices = renderProxy.geometry.ib;
                        var positions = renderProxy.geometry.vb;
                        var stride = renderProxy.geometry.vbstride;
                        var offsets = renderProxy.geometry.offsets;

                        if (!offsets || offsets.length === 0) {
                            offsets = [{ start: 0, count: indices.length, index: 0 }];
                        }

                        for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {
                            var start = offsets[oi].start;
                            var count = offsets[oi].count;
                            var index = offsets[oi].index;

                            var checkFace = 0;
                            //var ip = countx + 1;

                            for (var i = start, il = start + count; i < il; i += 3) {

                                var vA = new THREE.Vector3();
                                var vB = new THREE.Vector3();
                                var vC = new THREE.Vector3();
                                var a = index + indices[i];
                                var b = index + indices[i + 1];
                                var c = index + indices[i + 2];
                                vA.fromArray(positions, a * stride);
                                vB.fromArray(positions, b * stride);
                                vC.fromArray(positions, c * stride);
                                vA.applyMatrix4(matrix);
                                vB.applyMatrix4(matrix);
                                vC.applyMatrix4(matrix);
                                var slope = 0;
                                colorchange = 0;
                                var a, b, c, zAxis, normal, axis, sin1, sin2, cos1;
                                a = vA;
                                b = vB;
                                c = vC;
                                zAxis = new THREE.Vector3(0, 0, 1);
                                normal = new THREE.Vector3().crossVectors(
                                    new THREE.Vector3().subVectors(b, a),
                                    new THREE.Vector3().subVectors(c, a)
                                ).normalize();

                                sin1 = new THREE.Vector3().crossVectors(
                                    normal,
                                    zAxis
                                );
                                sin2 = math.norm([sin1.x, sin1.y, sin1.z])
                                cos1 = math.dot([normal.x, normal.y, normal.z], [zAxis.x, zAxis.y, zAxis.z])
                                slope = Math.abs(sin2 / cos1);
                                slope = CheckMinSlope(slope);

                                var invalidVal = 0;
                                if (slope == 'Infinity') {
                                    invalidVal = 1;
                                    //continue;
                                }
                                if (isNaN(slope)) {
                                    invalidVal = 1;
                                    //continue;
                                }

                                if (invalidVal == 0) {
                                    vectorarray.push(vA);
                                    vectorarray.push(vB);
                                    vectorarray.push(vC);

                                    if (slope < slopecheck) {
                                        colorchange = 0;
                                    }
                                    else {
                                        colorchange = 1;
                                    }

                                    var faceGeometry = createFaceGeometry(vA, vB, vC);
                                    faceMeshArray1.push(faceGeometry.name);
                                    var faces = faceGeometry.faces;
                                    for (var f = 0; f < faces.length; f++) {
                                        var faceMesh = drawFaceMesh(faceGeometry);
                                    }
                                    var area1 = triangle_area(vA.x, vA.y, vB.x, vB.y, vC.x, vC.y)
                                    var centerX = ((parseFloat(vA.x) + parseFloat(vB.x) + parseFloat(vC.x)) / 3);
                                    var centerY = ((parseFloat(vA.y) + parseFloat(vB.y) + parseFloat(vC.y)) / 3);
                                    var centerZ = ((parseFloat(vA.z) + parseFloat(vB.z) + parseFloat(vC.z)) / 3);
                                    vectorarrayX1.push(vA.x + "," + vA.y + "," + vA.z + "," + vB.x + "," + vB.y + "," + vB.z + "," + vC.x + "," + vC.y + "," + vC.z + "," + centerX + "," + centerY + "," + centerZ + "," + area1 + "," + slope);
                                }
                            }

                        }

                        //////////////
                        var Object3dTop = [];
                        //console.log(Object3dArr1.length);
                        for (var ig = 0; ig < vectorarrayX1.length; ig += 1) {

                            //var MeshObj = Object3dArr1[ig];
                            var TopVertex = vectorarrayX1[ig];
                            var pointArray = TopVertex.split(',');
                            var vA = new THREE.Vector3(parseFloat(pointArray[0]), parseFloat(pointArray[1]), parseFloat(pointArray[2]));
                            var vB = new THREE.Vector3(parseFloat(pointArray[3]), parseFloat(pointArray[4]), parseFloat(pointArray[5]));
                            var vC = new THREE.Vector3(parseFloat(pointArray[6]), parseFloat(pointArray[7]), parseFloat(pointArray[8]));
                            var Cent = new THREE.Vector3(parseFloat(pointArray[9]), parseFloat(pointArray[10]), parseFloat(pointArray[11]));
                            var Arr = parseFloat(pointArray[12]);
                            var Slp = parseFloat(pointArray[13]);
                            var psource = new THREE.Vector3(vA.x, vA.y, vA.z - 0.1);
                            var ptarget = new THREE.Vector3(parseFloat(psource.x), parseFloat(psource.y), parseFloat(psource.z) - 1.5);
                            var vray = new THREE.Vector3(ptarget.x - psource.x, ptarget.y - psource.y, ptarget.z - psource.z);
                            vray.normalize();
                            var ray = new THREE.Raycaster(psource, vray, 0, 1.5);
                            var intersectResults = ray.intersectObjects(Object3dArr1);

                            if (intersectResults.length > 0) {

                                intersectResults[0].object.visible = false;

                                viewer.impl.removeOverlay(_overlaySceneName, intersectResults[0]);

                                //Object3dTop.push(vA.x + "," + vA.y + "," + vA.z + "," + vB.x + "," + vB.y + "," + vB.z + "," + vC.x + "," + vC.y + "," + vC.z + "," + centerX + "," + centerY + "," + centerZ + "," + area1 + "," + slope);

                                countx = countx + 1;
                                var SurfaceId = room.roomid + '_' + countx;
                                var PointCordinates = vA.x + ':' + vA.y + ':' + vA.z
                                    + ',' + vB.x + ':' + vB.y + ':' + vB.z
                                    + ',' + vC.x + ':' + vC.y + ':' + vC.z
                                if (countx == 1) {
                                    Slopedata = Slopedata + Slp;
                                    SurfaceIddata = SurfaceIddata + SurfaceId;
                                    PointCordinatesdata = PointCordinatesdata + PointCordinates;
                                }
                                else {
                                    Slopedata = Slopedata + '#' + Slp;
                                    SurfaceIddata = SurfaceIddata + '#' + SurfaceId;
                                    PointCordinatesdata = PointCordinatesdata + '#' + PointCordinates;
                                }

                                Bulkdata.push(room.revid + '|' + room.roomid + '|' + SurfaceId + '|' + Slp + '|' + room.baseid + '|' + PointCordinates);

                            }
                        }
                        //console.log(Object3dArr1.length);
                    });

                });
            //alert(JSON.stringify(Bulkdata));
            return Bulkdata;
         //   BindAdvaSearchForSlope(Bulkdata);

        }

        function createFaceGeometry(vA, vB, vC, geom, color) {

            if (!geom) {
                var geom = new THREE.Geometry();
            }

            var vIndex = geom.vertices.length;

            var vAi = new THREE.Vector3(vA.x, vA.y, vA.z + 0.1);
            var vBi = new THREE.Vector3(vB.x, vB.y, vB.z + 0.1);
            var vCi = new THREE.Vector3(vC.x, vC.y, vC.z + 0.1);

            geom.vertices.push(vAi.clone());
            geom.vertices.push(vBi.clone());
            geom.vertices.push(vCi.clone());
            var face = new THREE.Face3(vIndex, vIndex + 1, vIndex + 2);
            geom.faces.push(face);
            geom.computeFaceNormals();
            geom.name = "CustomMesh" + UniId;
            UniId = UniId + 1;

            return geom;
        }

        function drawFaceMesh(geom, overlaySceneName, material, mesh) {
            if (colorchange == 0) {
                var material = material1;
            }
            if (colorchange == 1) {
                var material = material2;
            }

            var faceMesh = new THREE.Mesh(geom, material);
            Object3dArr1.push(faceMesh);
            //faceMesh.visible  = false;
            viewer.impl.addOverlay(_overlaySceneName, faceMesh);
            return faceMesh;
        }

        function createFaceMaterial(colorhex, opacity, transparent) {
            var colorHexStr = colorhex;
            var colorThreeStr = colorHexStr.replace('#', '0x');
            var colorValue = parseInt(colorThreeStr, 16);

            var material = new THREE.MeshPhongMaterial({
                color: colorValue,
                opacity: opacity,
                transparent: transparent,
                side: THREE.DoubleSide,
            });

            return material;
        }

        function newGUID() {
            var d = new Date().getTime();
            var guid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(
                /[xy]/g,
                function (c) {
                    var r = (d + Math.random() * 16) % 16 | 0;
                    d = Math.floor(d / 16);
                    return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
                });

            return guid;
        }

        function SlopeClearAll2() {
            viewer.impl.removeOverlayScene(_overlaySceneName5);
            for (var i = 0; i < Object3dArr1.length; i += 1) {
                Object3dArr1[i].visible = true;
            }
            viewer.impl.invalidate(true, true, false);
            viewer.impl.sceneUpdated(true);
        }

        function SlopeClearAll() {
            viewer.impl.removeOverlayScene(_overlaySceneName5);
            for (var i = 0; i < Object3dArr1.length; i += 1) {
                Object3dArr1[i].visible = false;
            }
            viewer.impl.invalidate(true, true, false);
            viewer.impl.sceneUpdated(true);
        }

        function DrawTriangle(points, ForgeId) {

            viewer.impl.invalidate(true, true, false);

            viewer.impl.removeOverlayScene(_overlaySceneName4);
            viewer.impl.removeOverlayScene(_overlaySceneName5);
            viewer.impl.removeOverlayScene(_overlaySceneName6);
            viewer.impl.createOverlayScene(_overlaySceneName6);
            if (points != '' || points != null || points != undefined) {
                var pointArray = points.split(',');
                // console.log(pointArray);
                var point1 = pointArray[0];
                // console.log(point1);
                point1 = point1.split(':')
                var point2 = pointArray[1];
                point2 = point2.split(':')
                var point3 = pointArray[2];
                point3 = point3.split(':')
                var pt1 = new THREE.Vector3(point1[0], point1[1], parseFloat(point1[2]) + 0.1);
                var pt2 = new THREE.Vector3(point2[0], point2[1], parseFloat(point2[2]) + 0.1);
                var pt3 = new THREE.Vector3(point3[0], point3[1], parseFloat(point3[2]) + 0.1);
                var geom3 = new THREE.Geometry();
                var vIndex = geom3.vertices.length;
                geom3.vertices.push(pt1.clone());
                geom3.vertices.push(pt2.clone());
                geom3.vertices.push(pt3.clone());
                var face = new THREE.Face3(vIndex, vIndex + 1, vIndex + 2);
                geom3.faces.push(face);
                geom3.computeFaceNormals();
                var material = material3;
                var faceMesh = new THREE.Mesh(geom3, material4);
                viewer.impl.addOverlay(_overlaySceneName6, faceMesh);
                viewer.impl.sceneUpdated(true);


                //var cen1 = (parseFloat(pt1.x) + parseFloat(pt2.x) + parseFloat(pt3.x)) / 3;
                //var cen2 = (parseFloat(pt1.y) + parseFloat(pt2.y) + parseFloat(pt3.y)) / 3;
                //var geometry = new THREE.SphereGeometry(10, 10, 10);
                //var material5 = new THREE.MeshBasicMaterial({ color: 0x39d2dbe7fff39d2 });
                //var meshX = new THREE.Mesh(geometry, material5);
                //meshX.position.set(parseFloat(cen1), parseFloat(cen2), pt1.z);
                //viewer.impl.addOverlay(_overlaySceneName6, meshX);
                //viewer.impl.sceneUpdated(true);

                //var id1 = parseInt(id);
                //viewer.showAll();
                //viewer.impl.selector.setSelection(id1, viewer.model);
                //viewer.fitToView(id1);
                //viewer.isolateById(id1);
                //viewer.impl.selector.setSelection(id1, viewer.model);
                //viewer.fitToView(id1);
                //viewer.isolateById(id1);

                //var cam = viewer.getCamera();
                //cam.position.set(cen1, cen2, pt3.z);

            }

        }

        function DrawTriangle2(points) {

            viewer.impl.removeOverlayScene(_overlaySceneName6);
            SlopeClearAll();
            viewer.impl.invalidate(true, true, false);
            viewer.impl.createOverlayScene(_overlaySceneName5);

            var matBlue = new THREE.LineBasicMaterial({ color: 0x000000 });
            var matGreen = new THREE.LineBasicMaterial({ color: 0x000000 });
            var matRed = new THREE.LineBasicMaterial({ color: 0x000000 });

            ////$('#slopeCanvas').remove(); // this is my <canvas> element
            ////$('#divCanvas').append('<canvas id="slopeCanvas" width="500" height="300" style="border:1px solid #d3d3d3;"></canvas>');

            if (points != '' || points != null || points != undefined) {
                var pointArray = points.split(',');
                var point1 = pointArray[0];
                point1 = point1.split(':')
                var point2 = pointArray[1];
                point2 = point2.split(':')
                var point3 = pointArray[2];
                point3 = point3.split(':')
                var pt1 = new THREE.Vector3(point1[0], point1[1], parseFloat(point1[2]));
                var pt2 = new THREE.Vector3(point2[0], point2[1], parseFloat(point2[2]));
                var pt3 = new THREE.Vector3(point3[0], point3[1], parseFloat(point3[2]));


                var zVal = [pt1.z, pt2.z, pt3.z];
                zVal.sort(function (a, b) { return b - a });

                var zVal2 = [pt1.z, pt2.z, pt3.z];
                zVal2.sort(function (a, b) { return a - b });

                console.log("zVal1 - " + zVal);
                console.log("zVal2 - " + zVal2);

                var geometry = new THREE.Geometry();
                geometry.vertices.push(new THREE.Vector3(pt1.x, pt1.y, pt1.z + 0.5));
                geometry.vertices.push(new THREE.Vector3(pt2.x, pt2.y, pt2.z + 0.5));
                geometry.computeLineDistances();
                var line = new THREE.Line(geometry, matBlue);
                viewer.impl.addOverlay(_overlaySceneName5, line);

                var geometry = new THREE.Geometry();
                geometry.vertices.push(new THREE.Vector3(pt2.x, pt2.y, pt2.z + 0.5));
                geometry.vertices.push(new THREE.Vector3(pt3.x, pt3.y, pt3.z + 0.5));
                geometry.computeLineDistances();
                var line = new THREE.Line(geometry, matGreen);
                viewer.impl.addOverlay(_overlaySceneName5, line);

                var geometry = new THREE.Geometry();
                geometry.vertices.push(new THREE.Vector3(pt3.x, pt3.y, pt3.z + 0.5));
                geometry.vertices.push(new THREE.Vector3(pt1.x, pt1.y, pt1.z + 0.5));
                geometry.computeLineDistances();
                var line = new THREE.Line(geometry, matRed);
                viewer.impl.addOverlay(_overlaySceneName5, line);

                var area = triangle_area(pt1.x, pt1.y, pt2.x, pt2.y, pt3.x, pt3.y)

                var slope1 = 0;
                slope1 = ThreeDSlope(point1[0], point1[1], point1[2], point2[0], point2[1], point2[2]);
                slope1 = CheckMinSlope(slope1);
                var slope2 = 0;
                slope2 = ThreeDSlope(point2[0], point2[1], point2[2], point3[0], point3[1], point3[2]);
                slope2 = CheckMinSlope(slope2);
                var slope3 = 0;
                slope3 = ThreeDSlope(point3[0], point3[1], point3[2], point1[0], point1[1], point1[2]);
                slope3 = CheckMinSlope(slope3);


                // viewer.impl.removeOverlayScene(_overlaySceneName5);
                //viewer.impl.createOverlayScene(_overlaySceneName5);
                //console.log(area);
                textht = 40;
                if (area > 40) {
                    textht = 40;
                }
                if (area < 40) {
                    textht = area;
                }
                if (area < 10) {
                    textht = 10;
                }

                var pt1pt2cenX = (parseFloat(pt1.x) + parseFloat(pt2.x)) / 2;
                var pt1pt2ceny = (parseFloat(pt1.y) + parseFloat(pt2.y)) / 2;
                var pt1pt2cenz = (parseFloat(pt1.z) + parseFloat(pt2.z)) / 2;
                var canvas1 = document.createElement('canvas');
                var context1 = canvas1.getContext('2d');
                context1.font = "Bold " + textht + "px Arial";
                context1.fillStyle = "rgba(255,0,0,0.95)";
                context1.fillText('Slope1=' + slope1, 0, 50);
                var texture1 = new THREE.Texture(canvas1);
                texture1.needsUpdate = true;
                var material5 = new THREE.MeshBasicMaterial({ map: texture1, side: THREE.DoubleSide });
                material5.transparent = true;
                var mesh1 = new THREE.Mesh(new THREE.PlaneGeometry(canvas1.width / 50, canvas1.height / 50), material5);
                mesh1.position.set(parseFloat(pt1pt2cenX), parseFloat(pt1pt2ceny), parseFloat(pt1pt2cenz) + 0.2);
                viewer.impl.addOverlay(_overlaySceneName5, mesh1);

                var pt1pt2cenX = (parseFloat(pt2.x) + parseFloat(pt3.x)) / 2;
                var pt1pt2ceny = (parseFloat(pt2.y) + parseFloat(pt3.y)) / 2;
                var pt1pt2cenz = (parseFloat(pt2.z) + parseFloat(pt3.z)) / 2;
                var canvas1 = document.createElement('canvas');
                var context1 = canvas1.getContext('2d');
                context1.font = "Bold " + textht + "px Arial";
                context1.fillStyle = "rgba(255,0,0,0.95)";
                context1.fillText('Slope2=' + slope2, 0, 50);
                var texture1 = new THREE.Texture(canvas1);
                texture1.needsUpdate = true;
                var material5 = new THREE.MeshBasicMaterial({ map: texture1, side: THREE.DoubleSide });
                material5.transparent = true;
                var mesh1 = new THREE.Mesh(new THREE.PlaneGeometry(canvas1.width / 50, canvas1.height / 50), material5);
                mesh1.position.set(parseFloat(pt1pt2cenX), parseFloat(pt1pt2ceny), parseFloat(pt1pt2cenz) + 0.2);
                viewer.impl.addOverlay(_overlaySceneName5, mesh1);

                var pt1pt2cenX = (parseFloat(pt3.x) + parseFloat(pt1.x)) / 2;
                var pt1pt2ceny = (parseFloat(pt3.y) + parseFloat(pt1.y)) / 2;
                var pt1pt2cenz = (parseFloat(pt3.z) + parseFloat(pt1.z)) / 2;
                var canvas1 = document.createElement('canvas');
                var context1 = canvas1.getContext('2d');
                context1.font = "Bold " + textht + "px Arial";
                context1.fillStyle = "rgba(255,0,0,0.95)";
                context1.fillText('Slope3=' + slope3, 0, 50);
                var texture1 = new THREE.Texture(canvas1);
                texture1.needsUpdate = true;
                var material5 = new THREE.MeshBasicMaterial({ map: texture1, side: THREE.DoubleSide });
                material5.transparent = true;
                var mesh1 = new THREE.Mesh(new THREE.PlaneGeometry(canvas1.width / 50, canvas1.height / 50), material5);
                mesh1.position.set(parseFloat(pt1pt2cenX), parseFloat(pt1pt2ceny), parseFloat(pt1pt2cenz) + 0.2);
                viewer.impl.addOverlay(_overlaySceneName5, mesh1);


                //    //$("#NonCompliantLineslope tbody").html('');
                //    //$("#NonCompliantLineslope tbody").append('<tr><td style="width:4%;background-color:#0000FF;color:white">1</td><td style="width:4%">' + slope1 + '</td></tr>');
                //    //$("#NonCompliantLineslope tbody").append('<tr><td style="width:4%;background-color:#00FF00;color:white">2</td><td style="width:4%">' + slope2 + '</td></tr>');
                //    //$("#NonCompliantLineslope tbody").append('<tr><td style="width:4%;background-color:#FF0000;color:white">3</td><td style="width:4%">' + slope3 + '</td></tr>');
                //    //$("#NonCompliantLineslope").show();
            }
        }

        function triangle_area(x1, y1, x2, y2, x3, y3) {
            var answer = Math.abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))
            if (answer <= 0) {
                answer = 0;
            }
            return answer;
        }

        function ThreeDSlope(x1, y1, z1, x2, y2, z2) {
            var rise = Math.abs(parseFloat(z2) - parseFloat(z1));
            var delx = Math.abs(parseFloat(x2) - parseFloat(x1));
            var dely = Math.abs(parseFloat(y2) - parseFloat(y1));
            var run = Math.sqrt(delx * delx + dely * dely);
            var answer = Math.abs(rise / run);
            if (rise <= 0) {
                answer = 0;
            }
            return answer;
        }

        function CheckMinSlope(slope) {
            slope = parseFloat(slope);
            if (slope <= 0.000001) {
                slope = slope;
            }
            else {
                slope = roundToXDigit(slope, 4);
            }
            return slope;
        }

        function roundToXDigit(value, digits) {
            if (!digits) {
                digits = 2;
            }
            value = value * Math.pow(10, digits);
            value = Math.round(value);
            value = value / Math.pow(10, digits);
            return value;
        }

        function GetUnique(inputArray) {
            var outputArray = [];

            for (var i = 0; i < inputArray.length; i++) {
                if ((jQuery.inArray(inputArray[i], outputArray)) == -1) {
                    outputArray.push(inputArray[i]);
                }
            }
            return outputArray;
        }

        function getid(SelId) {

            $("#ADAdatatableForSlopeCompliant tbody tr td:nth-child(2)").each(function () {

                var btnValue = $(this).find("input").val();
                if (btnValue.contains(SelId)) {
                    var prevCell = $(this).prev('td').find("input").val();
                    $(this).prev('td').find("input").css('background-color', '#4EB1EA');
                    $(this).prev('td').find("input").focus();
                }


            });

            $("#ADAdatatableForSlopeNonCompliant tbody tr td:nth-child(2)").each(function () {

                var btnValue = $(this).find("input").val();
                if (btnValue.contains(SelId)) {
                    var prevCell = $(this).prev('td').find("input").val();
                    $(this).prev('td').find("input").css('background-color', '#4EB1EA');
                    $(this).prev('td').find("input").focus();
                }

            });

        }

        var drawboxtoggle = 0;

        function ADAHighlightbox1(id) {
            if (drawboxtoggle == 0) {

                drawboxtoggle = 1;
                var id1 = parseInt(id);
                viewer.showAll();
                viewer.impl.selector.setSelection(id1, viewer.model);
                viewer.fitToView(id1);
                viewer.isolateById(id1);
                viewer.impl.selector.setSelection(id1, viewer.model);
                viewer.fitToView(id1);
                viewer.isolateById(id1);

                viewer.impl.removeOverlayScene(_overlaySceneName4);
                viewer.impl.removeOverlayScene(_overlaySceneName5);
                viewer.impl.removeOverlayScene(_overlaySceneName6);
                SlopeClearAll();
                viewer.impl.invalidate(true, true, false);

                var material1 = new THREE.LineBasicMaterial({
                    color: 0x0077ff,
                    linewidth: 5,
                    linecap: 'round', //ignored by WebGLRenderer
                    linejoin: 'round' //ignored by WebGLRenderer
                });

                var material2 = new THREE.LineBasicMaterial({
                    color: 0xff0000,
                    linewidth: 5,
                    linecap: 'round', //ignored by WebGLRenderer
                    linejoin: 'round' //ignored by WebGLRenderer
                });


                var front_clear_value = $('iframe[title=ADA]').contents().find("#clear_fronttext").val();
                var side_clear_value = $('iframe[title=ADA]').contents().find("#clear_sidetext").val();
                var top_clear_value = $('iframe[title=ADA]').contents().find("#clear_toptext").val();
                var bot_clear_value = $('iframe[title=ADA]').contents().find("#clear_bottomtext").val();
                var back_clear_value = $('iframe[title=ADA]').contents().find("#clear_backtext").val();


                var front_clear = parseInt(0);
                var side_clear = parseInt(0);
                var top_clear = parseInt(0);
                var bot_clear = parseInt(0);
                var back_clear = parseInt(0);

                var id1 = parseInt(id);

                var bbox = getModifiedWorldBoundingBox(
                    id1,
                    viewer.model.getFragmentList()
                );

                drawBox(bbox.min, bbox.max);
            }
            else {
                viewer.showAll();
                drawboxtoggle = 0;
                viewer.impl.removeOverlayScene(_overlaySceneName4);
            }
        }

        function getModifiedWorldBoundingBox(id1, fragList) {

            let bounds = new THREE.Box3()
                , box = new THREE.Box3()
                , instanceTree = viewer.impl.model.getData().instanceTree

            instanceTree.enumNodeFragments(id1, function (fragId) {
                fragList.getWorldBounds(fragId, box)
                bounds.union(box);
            }, true)

            return bounds;
        }

        function drawBox(min, max) {

            var material2 = new THREE.LineBasicMaterial({
                color: 0xff0000,
                linewidth: 5,
                linecap: 'round', //ignored by WebGLRenderer
                linejoin: 'round' //ignored by WebGLRenderer

            });

            drawLines([

                { x: min.x, y: min.y, z: min.z },
                { x: max.x, y: min.y, z: min.z },

                { x: max.x, y: min.y, z: min.z },
                { x: max.x, y: min.y, z: max.z },

                { x: max.x, y: min.y, z: max.z },
                { x: min.x, y: min.y, z: max.z },

                { x: min.x, y: min.y, z: max.z },
                { x: min.x, y: min.y, z: min.z },

                { x: min.x, y: max.y, z: max.z },
                { x: max.x, y: max.y, z: max.z },

                { x: max.x, y: max.y, z: max.z },
                { x: max.x, y: max.y, z: min.z },

                { x: max.x, y: max.y, z: min.z },
                { x: min.x, y: max.y, z: min.z },

                { x: min.x, y: max.y, z: min.z },
                { x: min.x, y: max.y, z: max.z },

                { x: min.x, y: min.y, z: min.z },
                { x: min.x, y: max.y, z: min.z },

                { x: max.x, y: min.y, z: min.z },
                { x: max.x, y: max.y, z: min.z },

                { x: max.x, y: min.y, z: max.z },
                { x: max.x, y: max.y, z: max.z },

                { x: min.x, y: min.y, z: max.z },
                { x: min.x, y: max.y, z: max.z }],
                material2);
            viewer.impl.sceneUpdated(true);

        }

        function drawLines(coordsArray, material) {
            //  console.log(coordsArray.length);
            viewer.impl.removeOverlayScene(_overlaySceneName4);
            viewer.impl.createOverlayScene(_overlaySceneName4);
            for (var i = 0; i < coordsArray.length; i += 2) {
                var start = coordsArray[i];
                var end = coordsArray[i + 1];
                var geometry = new THREE.Geometry();
                geometry.vertices.push(new THREE.Vector3(
                    start.x, start.y, start.z));
                geometry.vertices.push(new THREE.Vector3(
                    end.x, end.y, end.z));
                geometry.computeLineDistances();
                var line = new THREE.Line(geometry, material);
                viewer.impl.addOverlay(_overlaySceneName4, line);
            }
            //console.log("Lines Completed");
        }

        function ShowClick() {
            SlopeClearAll2();
            viewer.impl.invalidate(true, true, false);
            //alert("show");
        }

        function HideClick() {
            //alert("Hide");
            SlopeClearAll();
            viewer.impl.invalidate(true, true, false);
        }

    </script>




</body>
</html>
