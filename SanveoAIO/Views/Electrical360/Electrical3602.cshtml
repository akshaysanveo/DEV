
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Electrical-360</title>
    <link href="@Url.Content("~")Content/Skins/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    @*<link href="~/bower_components/morrisjs/morris.css" rel="stylesheet">*@
    <link href="@Url.Content("~")Content/Skins/dist/css/AdminLTE.min.css" rel="stylesheet" />
    <link href="@Url.Content("~")Content/Skins/dist/css/skins/_all-skins.min.css" rel="stylesheet" />
    <!-- Morris Charts CSS -->
    <link rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.min.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.common.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.rtl.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.silver.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.2.504/styles/kendo.mobile.all.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.common-material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2017.1.223/styles/kendo.material.mobile.min.css" />

    <!-- Latest compiled JavaScript -->
    <script src="https://code.jquery.com/jquery-1.12.3.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2017.2.504/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2016.3.1028/js/angular.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2016.3.1028/js/jszip.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2015.3.1111/js/kendo.aspnetmvc.min.js"></script>
    <script src="https://the360view.typepad.com/files/glue-embedded.js"></script>
    <script src="@Url.Content("~")Content/Skins/bootstrap/js/bootstrap.min.js"></script>
    <!-- AdminLTE App -->
    <script src="@Url.Content("~")Content/Skins/dist/js/app.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="@Url.Content("~")Content/Skins/dist/js/demo.js"></script>
    <script src="@Url.Content("~")Content/Skins/plugins/confirm/jquery.confirm.js"></script>
    <script src="~/Scripts/table2excel.js"></script>
    <link href="~/Content/Index.css" rel="stylesheet" />

    @* Files to Export Model to excel *@
    <script src="~/Scripts/libraries/notify.min.js"></script>
    <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/three.min.js?v=2.13"></script>
    <script src="~/Scripts/ForgeViewer.js"></script>
    <script src="~/Scripts/libraries/Blob.js"></script>
    <script src="~/Scripts/libraries/FileSaver.min.js"></script>
    <script src="~/Scripts/libraries/xlsx.core.min.js"></script>
    <script src="~/Scripts/ForgeXLS1.js"></script>


    <script src="~/Scripts/tableExport/xlsx.core.min.js"></script>
    <script src="~/Scripts/tableExport/FileSaver.min.js"></script>
    <script src="~/Scripts/tableExport/html2canvas.min.js"></script>
    <script src="~/Scripts/tableHeadFixer.js"></script>
    <script src="~/Scripts/tableExport/tableExport.js"></script>
    <style>
        .modal {
            position: fixed;
            z-index: 999;
            height: 100%;
            width: 100%;
            top: 0;
            background-color: Black;
            filter: alpha(opacity=60);
            opacity: 0.6;
            /*-moz-opacity: 0.8;*/
        }
        #GridBends > div.k-header.k-grid-toolbar.k-grid-top > a{

            background-color:#206086;
        }
        .center {
            z-index: 1000;
            margin: 300px auto;
            /*padding: 20px;*/
            width: 120px;
            background-color: #000000;
            border-radius: 10px;
            filter: alpha(opacity=100);
            opacity: 1;
            transform: none;
            /*-moz-opacity: 1;*/
        }

            .center img {
                height: 30px;
                width: 30px;
            }

        #ProjectProfile > div:nth-child(2) > div.col-xs-3 > div {
            height: 52px;
        }


            #ProjectProfile > div:nth-child(2) > div.col-xs-3 > div > div > div {
                margin-top: -8px !important;
                padding-bottom: 9px;
                padding-top: 9px;
            }
    </style>

    <style>
        .k-content {
            font-size: 11px;
        }

        .k-button {
            font-size: 90%;
        }
    </style>
</head>
<body>

    <div class="k-content">

        <ul class="nav nav-tabs" id="Eletrical360MainTabStrip">
            <li class="active" id=""><a data-toggle="tab" href="#ProjectProfile" onclick="">Project Profile</a></li>
            <li id=""><a data-toggle="tab" href="#Stdbends" onclick="">STD Bends</a></li>
            <li id=""><a data-toggle="tab" href="#blankids" onclick="">Blank Ids</a></li>
            <li id=""><a data-toggle="tab" href="#Update" onclick="">Update</a></li>
            <li id=""><a data-toggle="tab" href="#FeederM" onclick="">FeederM</a></li>
            <li id=""><a data-toggle="tab" href="#XLS" onclick="">XLS</a></li>
        </ul>


        <div class="tab-content col-xs-12">

            <div id="ProjectProfile" class="tab-pane fade in active" style="">
                <br />
                <div class="k-content col-xs-12" style="padding-left:0px;">

                    <div class="col-xs-3" style="padding-left:0px;">
                        <span style="font-size:15px;color:#3c8dbc;">Import Excel</span>
                        @(Html.Kendo().Upload()
                            .Name("Mapfiles")
                            .Async(a => a
                                .Save("SaveMapFile", "Electrical360")
                                .Remove("Remove", "Electrical360")
                                .AutoUpload(true)
                             )
                             .HtmlAttributes(new { style = "" })
                             .ShowFileList(true)
                             .Multiple(false)
                             .Events(e => e.Complete("OnCompleted").Success("OnSuccessCompleted"))
                        )
                    </div>

                    <div class="col-xs-4" style="margin-top: 27px;padding-left:0px;">
                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("filetype")
                                        .DataTextField("NodeName")
                                        .DataValueField("id")
                                        .OptionLabel("Select File")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetFiles", "Home");
                                            });
                                        })
                                        .Events(e => { e.Change("onFileChange").DataBound("GetFileName1"); })
                        )

                    </div>

                    <div class="col-xs-4" style="margin-top: 27px;padding-left:0px;">

                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("versiontype")
                                        .DataTextField("version")
                                        .DataValueField("Urn")
                                        .OptionLabel("Select Base Version")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetVersion", "Home").Data("GridSearchModelData");
                                            });
                                        })
                                        .Events(e => { e.Change("onVersionChange").DataBound("Getversion1"); })
                        )


                    </div>
                </div>
                <div class="k-content col-xs-12" style="padding-left:0px;">
                    <br />
                    <div class="col-xs-7" style="padding-left:0px;">
                        <table style="height:150px;" class="table table-striped table-bordered" cellspacing="0">
                            <thead>
                                <tr>
                                    <th style="width:45px">
                                        No.
                                    </th>
                                    <th style="width:130px">
                                        Parameter
                                    </th>
                                    <th style="width:300px">
                                        Revit Mapping
                                    </th>
                                    <th style="width:300px">
                                        Excel Mapping
                                    </th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>
                                    <td>
                                        1
                                    </td>
                                    <td>Feeder ID<span style="color:red;">*</span></td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlFeederIdPropertyList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Name")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetPropertyMapName", "PropertyMap").Data("filterPropertyList");
                                          })
                                              .ServerFiltering(true);
                                      })
                                     .Events(e => { e.DataBound("ddlFeederIdPropertyound"); })

                                        )
                                    </td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlFeederIdExcelList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("ExcelParameter")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetExcelParameter", "Electrical360");
                                          })
                                              .ServerFiltering(true);
                                      })
                                         .Events(e => { e.DataBound("ddlFeederIdExcelBound"); })

                                        )
                                    </td>
                                </tr>
                                <tr>

                                    <td>2</td>
                                    <td>From<span style="color:red;">*</span></td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlFromPropertyList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Name")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetPropertyMapName", "PropertyMap").Data("filterPropertyList");
                                          })
                                              .ServerFiltering(true);
                                      })
                                        .Events(e => { e.DataBound("ddlFromPropertyLound"); })

                                        )
                                    </td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlFromExcelList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("ExcelParameter")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetExcelParameter", "Electrical360");
                                          })
                                              .ServerFiltering(true);
                                      })
                                        .Events(e => { e.DataBound("ddlFromExcelBound"); })

                                        )
                                    </td>
                                </tr>
                                <tr>

                                    <td>3</td>
                                    <td>To<span style="color:red;">*</span></td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlToPropertyList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Name")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetPropertyMapName", "PropertyMap").Data("filterPropertyList");
                                          })
                                              .ServerFiltering(true);
                                      })
                                         .Events(e => { e.DataBound("ddlToPropertyBound"); })

                                        )
                                    </td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlToExcelList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("ExcelParameter")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetExcelParameter", "Electrical360");
                                          })
                                              .ServerFiltering(true);
                                      })
                                        .Events(e => { e.DataBound("ddlToExcelBound"); })

                                        )
                                    </td>
                                </tr>
                                <tr>

                                    <td>4</td>
                                    <td>Conductor Size</td>
                                    <td>

                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlConductTypePropertyList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Name")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetPropertyMapName", "PropertyMap").Data("filterPropertyList");
                                          })
                                              .ServerFiltering(true);
                                      })
                                        .Events(e => { e.DataBound("ddlConductTypeBound"); })

                                        )
                                    </td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlConductTypeExcelList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("ExcelParameter")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetExcelParameter", "Electrical360");
                                          })
                                              .ServerFiltering(true);
                                      })
                                         .Events(e => { e.DataBound("ddlConductTypeExcelBound"); })

                                        )
                                    </td>
                                </tr>

                                <tr>

                                    <td>5</td>
                                    <td>Conductor Type</td>
                                    <td>

                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlConductSizePropertyList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Name")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetPropertyMapName", "PropertyMap").Data("filterPropertyList");
                                          })
                                              .ServerFiltering(true);
                                      })
                                        .Events(e => { e.DataBound("ddlConductSizeBound"); })

                                        )
                                    </td>
                                    <td>
                                        @(Html.Kendo().DropDownList()
                                      .Name("ddlConductSizeExcelList")
                                      .OptionLabel("Select Parameter")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("ExcelParameter")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetExcelParameter", "Electrical360");
                                          })
                                              .ServerFiltering(true);
                                      })
                                         .Events(e => { e.DataBound("ddlConductSizeExcelBound"); })

                                        )
                                    </td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                    <div class="col-xs-3">


                    </div>

                </div>

                <div class="k-content col-xs-12">
                    <div class="col-xs-3" style="margin-left:-30px;">
                        <input type="button" id="btnSetPara" value="Save" style="text-transform: capitalize;background-color:#3c8dbc;color:white" class="k-button" />
                    </div>

                </div>
            </div>

            <div id="Stdbends" class="tab-pane fade" style="">
                <br />
                <div class="k-content col-xs-12" style="padding-left:0px;">
                    @(Html.Kendo().Grid<SanveoAIO.Domain.Models.SP_GetstdBends_Result>()
                                     .Name("GridBends")
                                     .Columns(columns =>
                                     {
                                         columns.Bound(e => e.Id).Title("ID").Visible(false);
                                         columns.Bound(e => e.STD_Bend).Title("STD Bends");
                                         columns.Command(command => { command.Edit(); command.Destroy(); }).Title("Action Performed");
                                     })
                                     .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                     .Editable(editable => editable.Mode(GridEditMode.InLine))
                                     .Pageable(pageable => pageable
                                     .Refresh(false)
                                     .PageSizes(new int[] { 20, 50, 100 })
                                     .ButtonCount(5))
                                     .HtmlAttributes(new { style = "width:100%;" })
                                     .Sortable()
                                     // .Groupable()
                                     .Scrollable(scr => scr.Height(320))
                                     // .Filterable()
                                     .ToolBar(toolbar => toolbar.Create())
                                     .Events(events => events
                                            .Save("SaveBendsName")
                                            .Cancel("RefreshBendsName")
                                            .Edit("EditBendsName")
                                            )
                                     .DataSource(dataSource => dataSource
                                         .Ajax()
                                           .PageSize(20)
                                         .Model(model =>
                                         {
                                             model.Id(p => p.Id);
                                         })
                                          .Events(events =>
                                          {
                                              events.RequestEnd("onBendsRequestEnd").Error("onError");
                                          })
                                          .Create(update => update.Action("SaveBends", "Electrical360"))
                                           .Update(update => update.Action("SaveBends", "Electrical360"))
                                          .Destroy(update => update.Action("DeleteBends", "Electrical360"))
                                         .Read(read => read.Action("GetBends", "Electrical360")


                                     ))

                    )
                </div>

            </div>

            <div id="blankids" class="tab-pane fade" style="padding:0px;">
                <br />
                <div class="k-content col-xs-12" style="padding:0px;">
                    <div class="col-xs-3" style="padding:0px;">
                        @(
                        Html.Kendo().DropDownList()
                            .Name("searchfiletype")
                            .DataTextField("NodeName")
                            .DataValueField("id")
                            .OptionLabel("Select File")
                            .HtmlAttributes(new { style = "width:100%" })
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetFiles", "Home");
                                });
                            })
                            .Events(e => { e.Change("onSearchFileChange").DataBound("GetFileName"); })
                        )
                    </div>

                    <div class="col-xs-2">
                        @(
                            Html.Kendo().DropDownList()
                                .Name("searchversiontype")
                                .DataTextField("version")
                                .DataValueField("Urn")
                                .OptionLabel("Select Version")
                                .HtmlAttributes(new { style = "width:100%" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetVersion", "Home").Data("DDLSearchFileData");
                                    });
                                })
                               .Events(e => { e.Change("onSearchVersionChange").DataBound("Getversion"); })
                        )
                    </div>

                    <div class="col-xs-2" style="padding-left:0px;">

                        @(
                    Html.Kendo().DropDownList()
                        .Name("categorys")
                        .DataTextField("Category_Name")
                        .DataValueField("Id")
                        .OptionLabel("Select Category")
                        .HtmlAttributes(new { style = "width:100%" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetCategoryName", "Home").Data("searchCategoryData");
                            });
                        })
                        .Events(e => { e.Change("onSearchCategorysChange"); })
                        )


                    </div>

                    <div class="col-xs-2" style="padding-left:0px;">

                        @(Html.Kendo().DropDownList()
                          .Name("PropertyList")
                          .OptionLabel("Select Property")
                          .HtmlAttributes(new { style = "width:100%" })
                          .DataTextField("Property_Name")
                          .DataValueField("Id")

                          .DataSource(source =>
                          {
                              source.Read(read =>
                              {
                                  read.Action("GetPropertyMapName", "PropertyMap").Data("searchPropertyData");
                              })
                                  .ServerFiltering(true);
                          })
                        //.Events(e => { e.DataBound("ddlPropertyFromBound"); })

                        )
                    </div>

                    <div class="col-xs-2" style="padding-left:0px;">
                        <input type="text" id="txtPropertyvalue" placeholder="Enter Parameter" class="form-control input">
                    </div>

                    <div class="col-xs-1" style="padding-left:0px;">
                        <input type="button" id="btnGetElecData" value="Get Data" style="text-transform: capitalize;background-color:#3c8dbc;color:white" class="k-button" onclick="GetBlankIdData();" />

                    </div>
                </div>
                <div class="k-content col-xs-12" style="padding:0px;">
                    <br />
                    @(Html.Kendo().Grid<SanveoAIO.Domain.Models.SP_GetElectricalData_Result>()
                      .Name("ElectricalGrid")
                      .Columns(columns =>
                      {
                          columns.Bound(e => e.Revitid).Title("RevitId").Width(80);
                          columns.Bound(e => e.Forgeid).Title("ForgeId").Width(80);
                          columns.Bound(e => e.Category_Name).Title("Category Name").Width(100);
                          columns.Bound(e => e.Property_Name).Title("Property Name").Width(100);
                          columns.Bound(e => e.Property_Value).Title("Property Value").Width(100);
                          columns.Command(command => command.Custom("").Click("showViewerElement").Text("Highlight")).Title("Highlight Element").Width(100).HtmlAttributes(new { style = "font-size:12px" });


                      })
                      .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                      //.Editable(editable => editable.Mode(GridEditMode.InLine))
                      .Pageable(pageable => pageable
                          .Refresh(false)
                          .PageSizes(new int[] { 20, 50, 100 })
                          .ButtonCount(5))
                      .HtmlAttributes(new { style = "width:100%;border-radius:3px;" })
                      .Resizable(resize => resize.Columns(true))
                      .Reorderable(reorder => reorder.Columns(true))
                      //.ToolBar(toolbar => toolbar.Create())
                      //.Sortable()
                      .Scrollable(scr => scr.Height(320))
                      .Filterable()
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .PageSize(20)
                          .Model(model =>
                          {
                              model.Id(p => p.Revitid);
                          })
                          .Read(read => read.Action("GetElectricalData", "Electrical360").Data("GridReadData"))

                      )
                    )
                </div>

            </div>


            <div id="Update" class="tab-pane fade" style="">
                <br />
                <div class="k-content col-xs-12" style="">
                    <div class="col-xs-3">
                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("ddlUpdatefiletype")
                                        .DataTextField("NodeName")
                                        .DataValueField("id")
                                        .OptionLabel("Select File")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetFiles", "Home");
                                            });
                                        })
                                        .Events(e => { e.Change("onUpdateFileChange").DataBound("GetFileName2"); })
                        )

                    </div>

                    <div class="col-xs-2" style="padding-left:0px;">

                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("ddlUpdateversiontype")
                                        .DataTextField("version")
                                        .DataValueField("Urn")
                                        .OptionLabel("Select Base Version")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetVersion", "Home").Data("UpdateGridSearchModelData");
                                            });
                                        })
                                        .Events(e => { e.Change("onUpdateVersionChange").DataBound("Getversion2"); })
                        )


                    </div>
                  
                </div>
                <br /><br /><br />
                <div class="k-content col-xs-12" style="">
                    <div class="col-xs-3" style="">
                        <h1 style="background: #fff; margin-top: -5px; margin-left: -8px; padding: 0 10px; font-size: 14px;">Select Parameters to Map</h1>
                        <div id="UpdatePropertyList" style="border:solid 1px;">
                            <ul style="overflow-y: scroll; width:100%;height: 335px;"></ul>
                        </div>

                        <br />
                        <input type="button" id="btnFindUpdate" value="Start" style="text-transform: capitalize;background-color:#3c8dbc;color:white;width:100%" class="k-button" />
                    </div>

                    <center><div id="Updateloading" style="display:none;align-content:center; margin-left: 20px;">Loading..... Please Wait</div></center>
                    <div class="col-xs-3" style="height:400px;overflow:auto;">
                        <table id="TblBlankFeederId" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:205px;">

                            <thead>
                                <tr>
                                    <th>Blank Ids</th>
                                    <th>Blank Values</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div class="col-xs-2" style="height:400px;overflow:auto;">
                        <table id="TblMultipleFeederId" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:130px;">

                            <thead>
                                <tr>
                                    <th>Multiple Ids</th>
                                    <th>Multiple Values</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div class="col-xs-2" style="height:400px;overflow:auto;">
                        <table id="TblUpdatedFeederId" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:130px;">

                            <thead>
                                <tr>
                                    <th>Updated Ids</th>
                                    <th>Updated Values</th>
                                </tr>

                            </thead>
                            <tbody> </tbody>
                        </table>
                    </div>
                    <div class="col-xs-2" style="height:400px;overflow:auto;">

                        <table id="TblIsolatedFeederId" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:120px;">

                            <thead>
                                <tr>
                                    <th>Isolated Ids</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>

                </div>

            </div>


            <div id="FeederM" class="tab-pane fade" style="">
                <br />
                <div class="modal" id="ModelloaderFm">
                    <div class="center">
                        <img src="~/Content/loading256.gif" style="height:70px; width:70px" />
                    </div>
                </div>

                <div class="k-content col-xs-12">
                    <div class="k-content col-xs-3" style="padding-left: 0px;">
                        <input type="button" id="btnsavebounding" value="Save Geometry" style="text-transform: capitalize" class="k-button" />
                    </div>
                    <div class="col-xs-3">
                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("FeederIdfiletype")
                                        .DataTextField("NodeName")
                                        .DataValueField("id")
                                        .OptionLabel("Select File")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetFiles", "Home");
                                            });
                                        })
                                        .Events(e => { e.Change("onFeederIdFileChange").DataBound("GetFileName3"); })
                        )

                    </div>

                    <div class="col-xs-2" style="padding-left: 0px;">

                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("FeederIdversiontype")
                                        .DataTextField("version")
                                        .DataValueField("Urn")
                                        .OptionLabel("Select Base Version")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetVersion", "Home").Data("FeederIdGridSearchModelData");
                                            });
                                        })
                                        .Events(e => { e.Change("onFeederIdVersionChange").DataBound("Getversion3"); })
                        )


                    </div>
                    <div class="col-xs-2" style="padding-left: 0px;">
                        <a id="ExportFeederM" onclick="downloadFeederM();" href="javascript:void(0);" title="Export to Excel" style="font-size:21px;"><span class="fa fa-file-excel-o"></span></a>
                    </div>

                </div>
                <br /><br /><br />


                <div class="k-content col-xs-12" style="">

                    <div class="col-xs-3" style="height:400px;border:solid">

                        <input type="button" id="btnFeederIdCheck" value="FeederId Excel Check" style="text-transform: capitalize;background-color:#3c8dbc;color:white;width:100%" class="k-button" />
                        <br />
                        <input type="button" id="btnConduitSizeCheck" value="Conduit Size Check" style="text-transform: capitalize;background-color:#3c8dbc;color:white;width:100%" class="k-button" />
                        <br /><br />
                        <div id="FamilyList" style="border:solid 1px;">
                            <h1 style="background: #fff; margin-top: -5px; margin-left: 16px; padding: 0 10px; width: 160px;font-size: 12px;">Feeder Geometry Check</h1>
                            <ul style="overflow-y: scroll; height: 190px;width:100%"></ul>

                        </div>
                        <br />
                        <input type="button" id="btnfeederGeomCheck" value="Start" style="text-transform: capitalize;background-color:#3c8dbc;color:white;width:100%" class="k-button" />
                    </div>


                    <div class="col-xs-6" style="height:400px;overflow:auto;width:662px">
                        <center><div id="loading" style="display:none;align-content:center; margin-left: 20px;">Loading..... Please Wait</div></center>
                        <table id="FeederIdtable" class="table table-striped table-bordered" cellspacing="0" style="font-size: 14px;display:none;width:400px;">

                            <thead>
                                <tr>
                                    <th>Excel</th>
                                    <th>Revit</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>

                        <table id="ConduitSizetable" class="table table-striped table-bordered" cellspacing="0" style="font-size: 14px;display:none;width:400px;">

                            <thead>
                                <tr>
                                    <th>Feeder ID</th>
                                    <th>Excel Conduit Size</th>
                                    <th>Revit Conduit Size</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>
                        <table id="TblFeederGeomCheck" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:630px;">

                            <thead>
                                <tr>
                                    <th>Feeder Value</th>
                                    <th>From Value</th>
                                    <th>To Value</th>
                                    <th>Geometry1</th>
                                    <th>Geometry2</th>
                                    <th>Status</th>
                                </tr>

                            </thead>
                            <tbody></tbody>
                        </table>

                    </div>

                </div>

            </div>

            <div id="XLS" class="tab-pane fade" style="">
                <br />
                <div class="modal" id="Modelloader">
                    <div class="center">
                        <img src="~/Content/loading256.gif" style="height:70px; width:70px" />
                    </div>
                </div>

                <div class="k-content col-xs-12">

                    <div class="k-content col-xs-2" style="padding-left: 0px;margin-left: -14px;">
                        <input type="button" id="btnRunPoints" value="Save Geometry" style="text-transform: capitalize" class="k-button" />
                    </div>

                    <div class="col-xs-3" style="padding-left: 0px;margin-left: -43px;">
                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("ddlFeederIdfiletype")
                                        .DataTextField("NodeName")
                                        .DataValueField("id")
                                        .OptionLabel("Select File")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetFiles", "Home");
                                            });
                                        })
                                        .Events(e => { e.Change("onFeederFileChange").DataBound("GetFileName4"); })
                        )

                    </div>

                    <div class="col-xs-2" style="padding-left: 0px;">

                        @(
                                        Html.Kendo().DropDownList()
                                        .Name("ddlFeederIdversiontype")
                                        .DataTextField("version")
                                        .DataValueField("Urn")
                                        .OptionLabel("Select Base Version")
                                        .HtmlAttributes(new { style = "width:100%" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetVersion", "Home").Data("GridFeederidSearchModelData");
                                            });
                                        })
                                        .Events(e => { e.Change("onFeederidVersionChange").DataBound("Getversion4"); })
                        )


                    </div>

                    <div class="k-content col-xs-2" style="padding-left: 0px;">
                        @(Html.Kendo().DropDownList()
                                      .Name("ddlFeederId")
                                      .OptionLabel("Select Feeder ID")
                                      .HtmlAttributes(new { style = "width:100%" })
                                      .DataTextField("Property_Value")
                                      .DataValueField("Id")

                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetFeederId", "Electrical360").Data("FeederIdModelData");
                                          })
                                              .ServerFiltering(true);
                                      })

                        )
                    </div>

                    <div class="k-content col-xs-1" style="padding-left: 0px;">
                        <input type="button" id="btnGetRun" value="Get Run" style="text-transform: capitalize" class="k-button" />

                    </div>

                    <div class="k-content col-xs-1" style="padding-left: 2px;">
                        <input type="button" id="btnGetFeederDetails" value="QC Report" style="text-transform: capitalize" class="k-button" />
                    </div>
                    <div class="k-content col-xs-1">
                        <a id="exportFeederDetailsGrid" onclick="downloadFeederDetails();" href="javascript:void(0);" title="Export to Excel" style="font-size:21px;"><span class="fa fa-file-excel-o"></span></a>
                    </div>



                    </div>
                <br /><br /><br />
                <center><div id="feerderloading" style="display:none;align-content:center;margin-left: -100px;">Loading..... Please Wait</div></center>
                <div class="k-content col-xs-12" style="height:400px;overflow:auto;">
                    <table id="rundatatable" class="table table-striped table-bordered" cellspacing="0" style="font-size: 12px;display:none;width:400px;">

                        <thead>
                            <tr>
                                <th>Conduits</th>
                                <th>Conduit Fittings</th>

                            </tr>

                        </thead>
                        <tbody></tbody>
                    </table>

                    <table id="FeederDetailsdatatable" class="table table-striped table-bordered" cellspacing="0" style="font-size: 11px;display:none;width:1500px;margin-left: -15px;">

                        <thead style="">
                            <tr>
                                <th>Feeder_ID</th>
                                <th>From</th>
                                <th>To</th>
                                <th>Conduit_Size</th>
                                <th>First_Bend</th>
                                <th>Second_Bend</th>
                                <th>Third_Bend</th>
                                <th>Fourth_Bend</th>
                                <th>Fifth_Bend</th>
                                <th>Sixth_Bend</th>
                                <th>More than 6 Bends</th>
                                <th>Total_Bend(Angles)</th>
                                <th>Total Conduit Length</th>
                                <th>Total Conduit Bend Length</th>
                                <th>Total Length</th>
                                <th>Remark</th>
                            </tr>

                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

            </div>

        </div>

    </div>

</body>


</html>

@*Script for Project Profile*@
<script>

    var RevitFeederIDGlobal = "";
    var ExcelFeederIDGlobal = "";
    var RevitFromGlobal = "";
    var ExcelFromGlobal = "";
    var RevitToGlobal = "";
    var ExcelToGlobal = "";
    var RevitConductTypeGlobal = "";
    var ExcelConductTypeGlobal = "";

    var RevitConductSizeGlobal = "";
    var ExcelConductSizeGlobal = "";


    function OnCompleted() { }

    function OnSuccessCompleted(e) {
        // $("#tblexample1").html('');
        var response = e.response;
        //console.log(response);
        if (e.operation == "upload") {
            // $("#tblexample1").html(response.ListData);
        }
    }

    function fileuploadParameter(e) {

    }

    function onFileChange() {
        
        var ddl = $("#versiontype").data("kendoDropDownList");
        ddl.dataSource.read();

    }

    var Category_Data = '';
    function GridSearchModelData(e) {
       
        var VersionNo = $("#versiontype").data("kendoDropDownList").text();
        VersionNo = VersionNo.split('-')[0].trim();
        var FileName = $("#filetype").data("kendoDropDownList").text();
        var urn = $("#versiontype").data("kendoDropDownList").value();
        return {
            urn: urn,
            version: VersionNo,
            filename: FileName,
            categoryname: Category_Data
        }
    }

    function onVersionChange() {

        var urn = $("#versiontype").data("kendoDropDownList").value();

        var value = JSON.stringify({
            'Urn': urn
        });

        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetRevitExcelMapping", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {
                console.log(data);
                var RevitFeederID = "";
                var ExcelFeederID = "";
                var RevitFrom = "";
                var ExcelFrom = "";
                var RevitTo = "";
                var ExcelTo = "";
                var RevitConductType = "";
                var ExcelConductType = "";
                var RevitConductSize = "";
                var ExcelConductSize = "";

                for (var i = 0; i < data.length; i++) {
                    RevitFeederID = data[i].RevitFeederID;
                    ExcelFeederID = data[i].ExcelFeederID;

                    RevitFrom = data[i].RevitFrom;
                    ExcelFrom = data[i].ExcelFrom;

                    RevitTo = data[i].RevitTo;
                    ExcelTo = data[i].ExcelTo;

                    RevitConductType = data[i].RevitConductType;
                    ExcelConductType = data[i].ExcelConductType;

                    RevitConductSize = data[i].RevitConductSize;
                    ExcelConductSize = data[i].ExcelConductSize;


                }

                RevitFeederIDGlobal = RevitFeederID;
                ExcelFeederIDGlobal = ExcelFeederID;
                RevitFromGlobal = RevitFrom;
                ExcelFromGlobal = ExcelFrom;
                RevitToGlobal = RevitTo;
                ExcelToGlobal = ExcelTo;
                RevitConductTypeGlobal = RevitConductType;
                ExcelConductTypeGlobal = ExcelConductType;

                RevitConductSizeGlobal = RevitConductSize;
                ExcelConductSizeGlobal = ExcelConductSize;

            },
            error: function (result) {
                alert("Error in Saving Mapping");

            }
        });

        var ddl = $("#ddlFeederIdPropertyList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlFromPropertyList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlToPropertyList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlConductTypePropertyList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlConductSizePropertyList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlFeederIdExcelList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlFromExcelList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlToExcelList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlConductTypeExcelList").data("kendoDropDownList");
        ddl.dataSource.read();

        var ddl = $("#ddlConductSizeExcelList").data("kendoDropDownList");
        ddl.dataSource.read();
    }


    function filterPropertyList() {

        return {
            urn: $("#versiontype").data("kendoDropDownList").value(),
            category: 'Conduits'
        };
    }


    $("#btnSetPara").click(function () {

        var RevitFeederId = $("#ddlFeederIdPropertyList").data("kendoDropDownList").text();
        var RevitFrom = $("#ddlFromPropertyList").data("kendoDropDownList").text();
        var RevitTo = $("#ddlToPropertyList").data("kendoDropDownList").text();
        var RevitConductType = $("#ddlConductTypePropertyList").data("kendoDropDownList").text();
        var RevitConductSize = $("#ddlConductSizePropertyList").data("kendoDropDownList").text();

        var ExcelFeederId = $("#ddlFeederIdExcelList").data("kendoDropDownList").text();
        var ExcelFrom = $("#ddlFromExcelList").data("kendoDropDownList").text();
        var ExcelTo = $("#ddlToExcelList").data("kendoDropDownList").text();
        var ExcelConductType = $("#ddlConductTypeExcelList").data("kendoDropDownList").text();
        var ExcelConductSize = $("#ddlConductSizeExcelList").data("kendoDropDownList").text();

        var Urn = $("#versiontype").data("kendoDropDownList").value();

        if (Urn == "Select Version") {
            alert("Please Select File");
            return false;
        }

        if (RevitFeederId == "Select Parameter") {
            alert("Please Select Revit Feeder Id");
            return false;
        }

        if (RevitFrom == "Select Parameter") {
            alert("Please Select Revit From");
            return false;
        }

        if (RevitTo == "Select Parameter") {
            alert("Please Select Revit To");
            return false;
        }

        if (RevitConductType == "Select Parameter") {
            alert("Please Select Revit Conductor Size");
            return false;
        }

        if (RevitConductSize == "Select Parameter") {
            alert("Please Select Revit Conductor Type");
            return false;
        }


        if (ExcelFeederId == "Select Parameter") {
            alert("Please Select Excel Feeder Id");
            return false;
        }

        if (ExcelFrom == "Select Parameter") {
            alert("Please Select Excel From");
            return false;
        }

        if (ExcelTo == "Select Parameter") {
            alert("Please Select Excel To");
            return false;
        }

        if (ExcelConductType == "Select Parameter") {
            alert("Please Select Excel Conduct Type");
            return false;
        }

        if (ExcelConductSize == "Select Parameter") {
            alert("Please Select Excel Conduct Size");
            return false;
        }

        var value = JSON.stringify({
            'RevitFeederId': RevitFeederId,
            'RevitFrom': RevitFrom,
            'RevitTo': RevitTo,
            'RevitConductType': RevitConductType,
            'RevitConductSize': RevitConductSize,
            'ExcelFeederId': ExcelFeederId,
            'ExcelFrom': ExcelFrom,
            'ExcelTo': ExcelTo,
            'ExcelConductType': ExcelConductType,
            'ExcelConductSize': ExcelConductSize,
            'Urn': Urn
        });

        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("SaveRevitExcelMapping", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {
                alert("Mapping Saved Successfully");
            },
            error: function (result) {
                alert("Error in Saving Mapping");

            }
        });
    });


    function ddlFeederIdPropertyound() {
        console.log(RevitFeederIDGlobal);
        var dropdowngroup = $("#ddlFeederIdPropertyList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.Property_Name === RevitFeederIDGlobal;
        });
    }

    function ddlFeederIdExcelBound() {
        console.log(ExcelFeederIDGlobal);
        var dropdowngroup = $("#ddlFeederIdExcelList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.ExcelParameter === ExcelFeederIDGlobal;
        });
    }

    function ddlFromPropertyLound() {
        console.log(RevitFromGlobal);
        var dropdowngroup = $("#ddlFromPropertyList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.Property_Name === RevitFromGlobal;
        });
    }

    function ddlFromExcelBound() {
        console.log(ExcelFromGlobal);
        var dropdowngroup = $("#ddlFromExcelList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.ExcelParameter === ExcelFromGlobal;
        });
    }

    function ddlToPropertyBound() {
        console.log(RevitToGlobal);
        var dropdowngroup = $("#ddlToPropertyList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.Property_Name === RevitToGlobal;
        });
    }

    function ddlToExcelBound() {
        console.log(ExcelToGlobal);
        var dropdowngroup = $("#ddlToExcelList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.ExcelParameter === ExcelToGlobal;
        });
    }

    function ddlConductTypeBound() {
        console.log(RevitConductTypeGlobal);
        var dropdowngroup = $("#ddlConductTypePropertyList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.Property_Name === RevitConductTypeGlobal;
        });
    }


    function ddlConductTypeExcelBound() {
        console.log(ExcelConductTypeGlobal);
        var dropdowngroup = $("#ddlConductTypeExcelList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.ExcelParameter === ExcelConductTypeGlobal;
        });
    }

    function ddlConductSizeBound() {
        console.log(RevitConductSizeGlobal);
        var dropdowngroup = $("#ddlConductSizePropertyList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.Property_Name === RevitConductSizeGlobal;
        });
    }

    function ddlConductSizeExcelBound() {
        console.log(ExcelConductSizeGlobal);
        var dropdowngroup = $("#ddlConductSizeExcelList").data("kendoDropDownList");
        dropdowngroup.select(function (dataItem) {
            return dataItem.ExcelParameter === ExcelConductSizeGlobal;
        });
    }

</script>

@*Script for STD Bend*@
<script>
    function RefreshBendsName() {
        RefreshBendsName1();
    }

    function RefreshBendsName1() {
        $("#GridBends").data("kendoGrid").dataSource.read();
    }


    function onBendsRequestEnd(e) {
        console.log(e.type);
        if (e.type == "update") {

            $("#GridBends").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create") {

            $("#GridBends").data("kendoGrid").dataSource.read();
        }
        if (e.type == "destroy") {

            $("#GridBends").data("kendoGrid").dataSource.read();
            alert("Data Deleted successfully...");
        }
    }

    function SaveBendsName() {
        var grid = $("#GridBends").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        console.log(selectedItem);


        if (selectedItem == null) {
            TagId = 0;
        }

        var BendsIdd = selectedItem["Id"];
        var BendsNamee = selectedItem["STD_Bend"];

        if (BendsNamee == "" || BendsNamee == null || BendsNamee == undefined) {

            alert("Please Enter Name");
            return;

        }

        var value = JSON.stringify({
            'BendsId': BendsIdd,
            'BendsName': BendsNamee

        });

        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("SaveBends", "Electrical360")',

            data: value,
            dataType: "json",
            success: function (result) {
                alert(result);

                RefreshBendsName();
            },
            error: function (result) {
                alert(result);

            }
        });

    }


    function EditBendsName(e) {

        var BendsId = e.model.get("Id");
        var BendsName = e.model.get("STD_Bend");
        $("#GridBends").data("kendoGrid").select(".k-grid-edit-row");

    }

    function onError(e, status) {
        //console.log()
        if (e.status == "update") {
            alert(e.errors);
            //console.log(e.errors);
        }
        else {
            var msg = e.errors;
            if (msg == undefined || msg == null || msg == "") {
            }
            else {
                alert(e.errors);
            }

        }
    }




</script>

@*Script for FeederM*@
<script>

    $("#btnsavebounding").click(function (e) {

        window.parent.FnElectricalMiddlePoints();

    });

    $("#btnFeederIdCheck").click(function () {

        var Urn = $("#FeederIdversiontype").data("kendoDropDownList").value();
        if (Urn == "") {
            alert("Please Select File");
            return false;
        }

        var value = JSON.stringify({
            'Urn': Urn
        });

        $("#loading").show();
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetEleExcelFeederIdData", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                console.log(data);

                $("#ConduitSizetable").hide();
                $("#TblFeederGeomCheck").hide();

                $("#FeederIdtable").show();
                $("#FeederIdtable tbody").html('');

                console.log(data.Table.length);

                for (var i = 0; i < data.Table.length; i++) {
                    var flag = "";
                    var para = data.Table[i].Item;

                    for (var j = 0; j < data.Table1.length; j++) {

                        var tablepara = data.Table1[j].Property_Value;
                        if (para == tablepara) {
                            flag = "Present";
                        }
                    }

                    if (flag == "Present")
                        $("#FeederIdtable tbody").append('<tr><td style="width:2%">' + para + '</td><td style="width:2%;background-color: green;color:white">' + flag + '</td></tr>');
                    else
                        $("#FeederIdtable tbody").append('<tr><td style="width:2%">' + para + '</td><td style="width:2%;background-color: red;">' + flag + '</td></tr>');
                }

                $("#FeederIdtable").tableHeadFixer({ "left": 1 });
                $("#FeederIdtable").show();
                $("#loading").hide();

            },
            error: function (result) {
                alert("Error Occur");
                $("#loading").hide();
            }
        });

    });



    $("#btnConduitSizeCheck").click(function () {

        var Urn = $("#FeederIdversiontype").data("kendoDropDownList").value();
        if (Urn == "") {
            alert("Please Select File");
            return false;
        }

        var value = JSON.stringify({
            'Urn': Urn
        });

        $("#loading").show();
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetEleExcelConduitSizeData", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                console.log(data);

                $("#FeederIdtable").hide();
                $("#TblFeederGeomCheck").hide();

                $("#ConduitSizetable").show();
                $("#ConduitSizetable tbody").html('');

                for (var i = 0; i < data.length; i++) {
                    var ExcelFeederId = data[i].ExcelFeederId.trim();
                    var ExcelConduitSize = data[i].ExcelConduitSize.trim();
                    var RevitConduitSize = data[i].RevitConduitSize.trim();

                    if (ExcelConduitSize == RevitConduitSize) {
                        $("#ConduitSizetable tbody").append('<tr><td style="width:2%">' + ExcelFeederId + '</td><td style="width:2%;background-color: green;color:white">' + ExcelConduitSize + '</td><td style="width:2%;background-color: green;color:white">' + RevitConduitSize + '</td></tr>');
                    }

                    else
                        if (RevitConduitSize != '' && ExcelConduitSize != '') {
                            if (RevitConduitSize != ExcelConduitSize)
                                $("#ConduitSizetable tbody").append('<tr><td style="width:2%">' + ExcelFeederId + '</td><td style="width:2%;background-color: red;">' + ExcelConduitSize + '</td><td style="width:2%;background-color: red">' + RevitConduitSize + '</td></tr>');
                        }

                        else
                            if (RevitConduitSize == '' || ExcelConduitSize == '') {
                                $("#ConduitSizetable tbody").append('<tr><td style="width:2%">' + ExcelFeederId + '</td><td style="width:2%;background-color: yellow;">' + ExcelConduitSize + '</td><td style="width:2%;background-color: yellow;">' + RevitConduitSize + '</td></tr>');
                            }


                }
                $("#ConduitSizetable").tableHeadFixer({ "left": 1 });
                $("#ConduitSizetable").show();
                $("#loading").hide();

            },
            error: function (result) {
                alert("Error Occur");
                $("#loading").hide();
            }
        });

    });


    function onFeederIdFileChange() {
        $("#FamilyList ul").html('');
        var ddl = $("#FeederIdversiontype").data("kendoDropDownList");
        ddl.dataSource.read();

    }

    function onFeederIdVersionChange() {
        GetFamily();
    }

    var Category_Data = '';
    function FeederIdGridSearchModelData(e) {

        var VersionNo = $("#FeederIdversiontype").data("kendoDropDownList").text();
        VersionNo = VersionNo.split('-')[0].trim();
        var FileName = $("#FeederIdfiletype").data("kendoDropDownList").text();
        var urn = $("#FeederIdversiontype").data("kendoDropDownList").value();
        return {
            urn: urn,
            version: VersionNo,
            filename: FileName,
            categoryname: Category_Data
        }
    }



    function GetFamily() {
        var urn = $("#FeederIdversiontype").data("kendoDropDownList").value();
        var v = $("#FeederIdversiontype").data("kendoDropDownList").text();
        v = v.split('-')[0].trim();
        $("#FamilyList ul").html('<li style="text-align: center;">Loading...</li>');

        var value = JSON.stringify({
            'urn': urn,
            'version': v,
        });
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetFamily", "Electrical360")',
            async: false,
            data: value,
            dataType: "json",
            success: function (result) {
                $("#FamilyList ul").html('');
                var check_boxes = '';
                //check_boxes = '<li style="text-align: center;"><button class="btn dropdown-toggle" type="button" onClick="CheckQuantityTab()" style="width:40%;height:33px"> Apply </button></li>';

                check_boxes += '<li style="padding-left:10px"><label><input type="checkbox" name="SelectAll" id="SelectAll" onchange = "onSelectAllchange(this)" value=""/>&nbsp;Select All</label></li>';

                $.each(result, function (index, item) {
                    check_boxes += '<li style="padding-left:10px"><label><input type="checkbox" name="FamilyName[]" value="' + item.Family_Name + '"/>&nbsp;' + item.Family_Name + '</label></li>';

                });
                $("#FamilyList ul").append(check_boxes);

            },
            error: function (result) {
                alert(result);
            }
        });

    }

    $("#btnfeederGeomCheck").click(function () {

        var Urn = $("#FeederIdversiontype").data("kendoDropDownList").value();
        if (Urn == "") {
            alert("Please Select File");
            return false;
        }

        var FamilyName = new Array();

        $.each($("input[name='FamilyName[]']:checked"), function () {
            FamilyName.push($(this).val());
        });

        if (FamilyName == "") {
            alert("Select atleast 1 Family");
            return false;
        }

        var Families = FamilyName.join('~');

        console.log(Families);

        var value = JSON.stringify({
            'Urn': Urn,
            'Families': Families
        });

        $("#loading").show();
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetFeederGeometryCheck", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                console.log(data);

                $("#ConduitSizetable").hide();
                $("#FeederIdtable").hide();

                $("#TblFeederGeomCheck").show();
                $("#TblFeederGeomCheck tbody").html('');

                for (var i = 0; i < data.length; i++) {
                    var Feeder_Value = data[i].Feeder_Value.trim();
                    var From_Value = data[i].From_Value.trim();
                    var To_Value = data[i].To_Value.trim();
                    var Geometry1 = data[i].Geometry1.trim();
                    var Geometry2 = data[i].Geometry2.trim();
                    var status = data[i].status.trim();

                    if (status == 'Correct') {
                        $("#TblFeederGeomCheck tbody").append('<tr><td style="width:2%">' + Feeder_Value + '</td><td style="width:2%">' + From_Value + '</td><td style="width:2%">' + To_Value + '</td><td style="width:2%">' + Geometry1 + '</td><td style="width:2%">' + Geometry2 + '</td><td style="width:2%;background-color: green;color:white">' + status + '</td></tr>');
                    }
                    else {
                        $("#TblFeederGeomCheck tbody").append('<tr><td style="width:2%">' + Feeder_Value + '</td><td style="width:2%">' + From_Value + '</td><td style="width:2%">' + To_Value + '</td><td style="width:2%">' + Geometry1 + '</td><td style="width:2%">' + Geometry2 + '</td><td style="width:2%;background-color: red;">' + status + '</td></tr>');
                    }

                }

                $("#TblFeederGeomCheck").tableHeadFixer({ "left": 1 });
                $("#TblFeederGeomCheck").show();
                $("#loading").hide();

            },
            error: function (result) {
                alert("Error Occur");
                $("#loading").hide();
            }
        });


    });

    function onSelectAllchange(check) {
        if (check.checked) {
            $("input[name='FamilyName[]']").each(function () {
                $(this).prop('checked', true);
            });
        }
        else {
            $("input[name='FamilyName[]']").each(function () {
                $(this).prop('checked', false);
            });
        }
    }


    function downloadFeederM() {

        if ($('#TblFeederGeomCheck').css('display') != 'none') {
            $("#TblFeederGeomCheck").table2excel({
                exclude: ".flotTClass",
                name: "FeederGeometryCheckDetails",
                filename: "FeederGeometryCheckDetails",
                fileext: ".xls"
            });
        }

        if ($('#FeederIdtable').css('display') != 'none') {
            $("#FeederIdtable").table2excel({
                exclude: ".flotTClass",
                name: "FeederIdDetails",
                filename: "FeederIdDetails",
                fileext: ".xls"
            });
        }

        if ($('#ConduitSizetable').css('display') != 'none') {
            $("#ConduitSizetable").table2excel({
                exclude: ".flotTClass",
                name: "FeederConduitSizeDetails",
                filename: "FeederConduitSizeDetails",
                fileext: ".xls"
            });
        }


    }

</script>


@*Script for blankids*@
<script>

    var urn = '';
    var categoryname = '';
    var propertyname = '';
    var propertyvalue = '';

    function GetBlankIdData() {

        filename = $("#searchfiletype").data("kendoDropDownList").value()
        urn = $("#searchversiontype").data("kendoDropDownList").value()
        categoryname = $("#categorys").data("kendoDropDownList").text();
        propertyname = $("#PropertyList").data("kendoDropDownList").text();
        propertyvalue = $('#txtPropertyvalue').val();

        if (filename == '') {
            alert("Please Select File");
            return;
        }

        if (urn == '') {
            alert("Please Select Version");
            return;
        }

        if (categoryname == 'Select Category') {
            alert("Please Select Category Name");
            return;
        }
        if (propertyname == 'Select Property') {
            alert("Please Select Property Name");
            return;
        }


        $("#ElectricalGrid").data("kendoGrid").dataSource.read();

    }

    function GridReadData() {

        return {
            urn: urn,
            categoryname: categoryname,
            propertyname: propertyname,
            propertyvalue: $('#txtPropertyvalue').val()
        };
    }

    function onSearchFileChange() {
        $("#ElectricalGrid").data('kendoGrid').dataSource.data([]);  
       
   
        $("#searchversiontype").data("kendoDropDownList").dataSource.read();
    }

    function onSearchVersionChange() {

        $("#categorys").data("kendoDropDownList").dataSource.read();
    }

    function onSearchCategorysChange() {
        $("#PropertyList").data("kendoDropDownList").dataSource.read();

    }

    function DDLSearchFileData() {
        return {
            filename: $("#searchfiletype").data("kendoDropDownList").text()
        };
    }

    function searchCategoryData() {
        return {
            urn: $("#searchversiontype").data("kendoDropDownList").value()
        };
    }

    function searchPropertyData() {

        var cat1 = $("#categorys").data("kendoDropDownList").text();


        return {
            urn: $("#searchversiontype").data("kendoDropDownList").value(),
            category: cat1
        };
    }



    function showViewerElement(e) {
      
        e.preventDefault();
        var Forgeid = "";
        var Revitid = "";

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        console.log(dataItem);
        var grid = $("#ElectricalGrid").data("kendoGrid");
        grid.select($(e.currentTarget).closest("tr"));
        selectedIndex = grid.select().index();

        Forgeid = dataItem.Forgeid;
        Revitid = dataItem.Revitid;
        var selectedfilename = $("#searchfiletype").data("kendoDropDownList").text();
       // var dropdownlist = $("#filetype").data("kendoDropDownList").value;
       
        window.parent.Forgeid(Forgeid, selectedfilename);

    }

</script>

@*Script for XLS*@
<script>

    function onFeederidVersionChange() {

        var ddl = $("#ddlFeederId").data("kendoDropDownList");
        ddl.dataSource.read();
    }

    function FeederIdModelData(e) {
        var urn = $("#ddlFeederIdversiontype").data("kendoDropDownList").value();
        return {
            urn: urn
        }
    }

    var Category_Data = '';
    function GridFeederidSearchModelData(e) {

        var VersionNo = $("#ddlFeederIdversiontype").data("kendoDropDownList").text();
        VersionNo = VersionNo.split('-')[0].trim();
        var FileName = $("#ddlFeederIdfiletype").data("kendoDropDownList").text();
        var urn = $("#ddlFeederIdversiontype").data("kendoDropDownList").value();
        return {
            urn: urn,
            version: VersionNo,
            filename: FileName,
            categoryname: Category_Data
        }
    }


    function onFeederFileChange() {

        var ddl = $("#ddlFeederIdversiontype").data("kendoDropDownList");
        ddl.dataSource.read();

    }


    $("#btnRunPoints").click(function (e) {

        window.parent.fnConduitCoordinate();

    });

    function downloadFeederDetails() {

        $("#FeederDetailsdatatable").table2excel({
            exclude: ".flotTClass",
            name: "FeederDetails",
            filename: "FeederDetails",
            fileext: ".xls"
        });

    }


    $("#btnGetFeederDetails").click(function (e) {

        var urn = $("#ddlFeederIdversiontype").data("kendoDropDownList").value();
        //var FeederID = $("#ddlFeederId").data("kendoDropDownList").text();

        if (urn == '') {
            alert("Please Select File");
            return;
        }

        //if (FeederID == 'Select Feeder ID') {
        //    alert("Please Select Feeder ID");
        //    return;
        //}

        var value = JSON.stringify({
            'Urn': urn,
            // 'FeederId': FeederID,
        });

        $("#feerderloading").show();
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetFeedersDetails", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                $("#FeederDetailsdatatable").show();

                $("#rundatatable").hide();

                $("#FeederDetailsdatatable tbody").html('');

                //----For Getting std Bends----

                $.ajax({
                    type: "POST",
                    contentType: 'application/json',
                    url: '@Url.Action("GetBendCheck", "Electrical360")',
                    // data: value,
                    dataType: "json",
                    success: function (result) {

                        var stdbend = [];
                        for (var i = 0; i < result.length; i++) {
                            stdbend.push(result[i].STD_Bend);
                        }

                        stdbend.push(0);
                        console.log(stdbend);

                        for (var i = 0; i < data.length; i++) {

                            if (data[i].Total_Bend <= 360) {


                                var First_Bendv = parseFloat(data[i].First_Bend);
                                var Second_Bendv = parseFloat(data[i].Second_Bend);
                                var Third_Bendv = parseFloat(data[i].Third_Bend);
                                var Fourth_Bendv = parseFloat(data[i].Fourth_Bend);
                                var Fifth_Bendv = parseFloat(data[i].Fifth_Bend);
                                var Sixth_Bendv = parseFloat(data[i].Sixth_Bend);

                                if (stdbend.includes(First_Bendv) == true && stdbend.includes(Second_Bendv) === true && stdbend.includes(Third_Bendv) === true && stdbend.includes(Fourth_Bendv) === true && stdbend.includes(Fifth_Bendv) === true && stdbend.includes(Sixth_Bendv) === true) {

                                    $("#FeederDetailsdatatable tbody").append('<tr><td style="width:0.2%;">' + data[i].FeederID + '</td><td style="width:0.2%"> ' + data[i].Form + '</td><td style="width:0.2%">' + data[i].To + '</td><td style="width:0.2%">' + data[i].Conduit_Size + '</td><td style="width:0.2%">' + data[i].First_Bend + '</td><td style="width:0.2%">' + data[i].Second_Bend + '</td><td style="width:0.2%">' + data[i].Third_Bend + '</td><td style="width:0.2%">' + data[i].Fourth_Bend + '</td><td style="width:0.2%">' + data[i].Fifth_Bend + '</td><td style="width:0.2%">' + data[i].Sixth_Bend + '</td><td style="width:0.2%">' + data[i].SixMax_Bends + '</td><td style="width:0.2%">' + data[i].Total_Bend + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Length + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Bend_Length + '</td><td style="width:0.2%">' + data[i].Total_Length + '</td><td style="width:0.2%;background:green">Ok</td></tr>');
                                }
                                else {

                                    var firststyl = '';
                                    var secstyl = '';
                                    var thirdstyl = '';
                                    var foruthstyl = '';
                                    var fifthstyl = '';
                                    var sixstyl = '';
                                    if (stdbend.includes(First_Bendv) == false) {
                                        firststyl = ';background:red';
                                    }
                                    if (stdbend.includes(Second_Bendv) == false) {
                                        secstyl = ';background:red';
                                    }
                                    if (stdbend.includes(Third_Bendv) == false) {
                                        thirdstyl = ';background:red';
                                    }
                                    if (stdbend.includes(Fourth_Bendv) == false) {
                                        foruthstyl = ';background:red';
                                    }
                                    if (stdbend.includes(Fifth_Bendv) == false) {
                                        fifthstyl = ';background:red';
                                    }
                                    if (stdbend.includes(Sixth_Bendv) == false) {
                                        sixstyl = ';background:red';
                                    }

                                    $("#FeederDetailsdatatable tbody").append('<tr><td style="width:0.2%;">' + data[i].FeederID + '</td><td style="width:0.2%"> ' + data[i].Form + '</td><td style="width:0.2%">' + data[i].To + '</td><td style="width:0.2%">' + data[i].Conduit_Size + '</td><td style="width:0.2%' + firststyl + '">' + data[i].First_Bend + '</td><td style="width:0.2%' + secstyl + '">' + data[i].Second_Bend + '</td><td style="width:0.2%' + thirdstyl + '">' + data[i].Third_Bend + '</td><td style="width:0.2%' + foruthstyl + '">' + data[i].Fourth_Bend + '</td><td style="width:0.2%' + fifthstyl + '">' + data[i].Fifth_Bend + '</td><td style="width:0.2%' + sixstyl + '">' + data[i].Sixth_Bend + '</td><td style="width:0.2%">' + data[i].SixMax_Bends + '</td><td style="width:0.2%">' + data[i].Total_Bend + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Length + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Bend_Length + '</td><td style="width:0.2%">' + data[i].Total_Length + '</td><td style="width:0.2%;background:yellow">Ok</td></tr>');

                                }

                            }
                            else if (data[i].Total_Bend > 360) {
                                $("#FeederDetailsdatatable tbody").append('<tr><td style="width:0.2%;">' + data[i].FeederID + '</td><td style="width:0.2%"> ' + data[i].Form + '</td><td style="width:0.2%">' + data[i].To + '</td><td style="width:0.2%">' + data[i].Conduit_Size + '</td><td style="width:0.2%">' + data[i].First_Bend + '</td><td style="width:0.2%">' + data[i].Second_Bend + '</td><td style="width:0.2%">' + data[i].Third_Bend + '</td><td style="width:0.2%">' + data[i].Fourth_Bend + '</td><td style="width:0.2%">' + data[i].Fifth_Bend + '</td><td style="width:0.2%">' + data[i].Sixth_Bend + '</td><td style="width:0.2%">' + data[i].SixMax_Bends + '</td><td style="width:0.2%">' + data[i].Total_Bend + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Length + '</td><td style="width:0.2%">' + data[i].Total_Conduit_Bend_Length + '</td><td style="width:0.2%">' + data[i].Total_Length + '</td><td style="width:0.2%;background:red">Not Ok</td></tr>');

                            }

                        }

                        $("#FeederDetailsdatatable").tableHeadFixer({ "left": 1 });
                        $("#feerderloading").hide();

                    },
                    error: function (result) {
                        alert("Error in getting bends");
                    }
                });


            },
            error: function (result) {
                $("#feerderloading").hide();
                alert("Error in getting Feeder Details");
            }
        });

    });

    function removeA(arr) {
        var what, a = arguments, L = a.length, ax;
        while (L > 1 && arr.length) {
            what = a[--L];
            while ((ax = arr.indexOf(what)) !== -1) {
                arr.splice(ax, 1);
            }
        }
        return arr;
    }


    $("#btnGetRun").click(function (e) {

        var urn = $("#ddlFeederIdversiontype").data("kendoDropDownList").value();
        var FeederID = $("#ddlFeederId").data("kendoDropDownList").text();

        if (urn == '') {
            alert("Please Select File");
            return;
        }

        if (FeederID == 'Select Feeder ID') {
            alert("Please Select Feeder ID");
            return;
        }

        var value = JSON.stringify({
            'Urn': urn,
            'FeederId': FeederID,
        });

        $("#feerderloading").show();
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetRUN", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                $("#rundatatable").show();
                $("#FeederDetailsdatatable").hide();

                $("#rundatatable tbody").html('');

                var ConduitsForgeid = "";
                var ConduitsFittingForgeid = "";

                var perivousConFitforgeid = null;
                var perivousConforgeid = null;

                var CFPointsArray = [];
                var TotalCFPointsArray = [];

                TotalCFPointsArray = data;

                while (TotalCFPointsArray.length > 0) {
                    var cheak = 1;
                    CFPointsArray = [];

                    for (var i = 0; i < TotalCFPointsArray.length; i++) {
                        ConduitsForgeid = TotalCFPointsArray[i].ConduitsForgeid;
                        ConduitsFittingForgeid = TotalCFPointsArray[i].ConduitsFittingForgeid;


                        if (i == 0) {

                            $("#rundatatable tbody").append('<tr><td style="width:2%;"><input style="background:green;color:white" type ="button" value = ' + ConduitsForgeid + '  id =' + ConduitsForgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%"><input type ="button" value = ' + ConduitsFittingForgeid + '  id =' + ConduitsFittingForgeid + ' onclick="window.parent.Forgeid(this.id)"/></td></tr>');

                            perivousConFitforgeid = ConduitsFittingForgeid;
                            perivousConforgeid = ConduitsForgeid;

                            CFPointsArray.push(TotalCFPointsArray[i]);
                        }
                        else {

                            for (var j = 0; j < TotalCFPointsArray.length; j++) {

                                var ConduitsForgeidcheck = TotalCFPointsArray[j].ConduitsForgeid;
                                var ConduitsFittingForgeidcheck = TotalCFPointsArray[j].ConduitsFittingForgeid;

                                if (ConduitsFittingForgeidcheck == perivousConFitforgeid && perivousConforgeid != ConduitsForgeidcheck && cheak == 1) {

                                    $("#rundatatable tbody").append('<tr><td style="width:2%"><input type ="button" value = ' + ConduitsForgeidcheck + '  id =' + ConduitsForgeidcheck + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%"><input type ="button" value = ' + ConduitsFittingForgeidcheck + '  id =' + ConduitsFittingForgeidcheck + ' onclick="window.parent.Forgeid(this.id)"/></td></tr>');

                                    perivousConFitforgeid = ConduitsFittingForgeidcheck;
                                    perivousConforgeid = ConduitsForgeidcheck;
                                    cheak = 0;

                                    CFPointsArray.push(TotalCFPointsArray[j]);

                                }
                                else if (ConduitsFittingForgeidcheck != perivousConFitforgeid && perivousConforgeid == ConduitsForgeidcheck && cheak == 0) {

                                    $("#rundatatable tbody").append('<tr><td style="width:2%"><input type ="button" value = ' + ConduitsForgeidcheck + '  id =' + ConduitsForgeidcheck + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%"><input type ="button" value = ' + ConduitsFittingForgeidcheck + '  id =' + ConduitsFittingForgeidcheck + ' onclick="window.parent.Forgeid(this.id)"/></td></tr>');

                                    perivousConFitforgeid = ConduitsFittingForgeidcheck;
                                    perivousConforgeid = ConduitsForgeidcheck;
                                    cheak = 1;

                                    CFPointsArray.push(TotalCFPointsArray[j]);
                                }

                            }

                        }

                    }


                    for (var i = 0; i < CFPointsArray.length; i++) {
                        var obj = CFPointsArray[i];
                        console.log(obj);
                        TotalCFPointsArray = removeA(TotalCFPointsArray, obj);
                    }


                }



                $("#rundatatable").show();
                $("#feerderloading").hide();
            },
            error: function (result) {
                $("#feerderloading").hide();
                alert("Error in getting Run");
                //  $("#loading").hide();
            }
        });



    });


</script>

@*Script for Update*@
<script>
    function onUpdateFileChange() {
       
        $("#UpdatePropertyList ul").html('');
        var ddl = $("#ddlUpdateversiontype").data("kendoDropDownList");
        ddl.dataSource.read();

    }



    var Category_Data = '';
    function UpdateGridSearchModelData(e) {

        var VersionNo = $("#ddlUpdateversiontype").data("kendoDropDownList").text();
        VersionNo = VersionNo.split('-')[0].trim();
        var FileName = $("#ddlUpdatefiletype").data("kendoDropDownList").text();
        var urn = $("#ddlUpdateversiontype").data("kendoDropDownList").value();
        return {
            urn: urn,
            version: VersionNo,
            filename: FileName,
            categoryname: Category_Data
        }
    }


    function onUpdateVersionChange() {
        GetUpdateProperties();
    }

    function GetUpdateProperties() {

        var urn = $("#ddlUpdateversiontype").data("kendoDropDownList").value();
        var v = $("#ddlUpdateversiontype").data("kendoDropDownList").text();
        v = v.split('-')[0].trim();
        $("#UpdatePropertyList ul").html('<li style="text-align: center;">Loading...</li>');

        var value = JSON.stringify({
            'urn': urn,
            'version': v,
        });
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetPropertyName", "Electrical360")',
            async: false,
            data: value,
            dataType: "json",
            success: function (result) {
                $("#UpdatePropertyList ul").html('');
                var check_boxes = '';

                check_boxes += '<li style="padding-left:10px"><label><input type="checkbox" name="SelectAll" id="SelectAll" onchange = "onUpdatePropSelectAllchange(this)" value=""/>&nbsp;Select All</label></li>';

                $.each(result, function (index, item) {
                    check_boxes += '<li style="padding-left:10px"><label><input type="checkbox" name="UpdateProperties[]" value="' + item.PropertyName + '"/>&nbsp;' + item.PropertyName + '</label></li>';

                });
                $("#UpdatePropertyList ul").append(check_boxes);

            },
            error: function (result) {
                alert(result);
            }
        });

    }


    function onUpdatePropSelectAllchange(check) {
        if (check.checked) {
            $("input[name='UpdateProperties[]']").each(function () {
                $(this).prop('checked', true);
            });
        }
        else {
            $("input[name='UpdateProperties[]']").each(function () {
                $(this).prop('checked', false);
            });
        }
    }

 
    $("#btnFindUpdate").click(function () {

        var Urn = $("#ddlUpdateversiontype").data("kendoDropDownList").value();
        if (Urn == "") {
            alert("Please Select File");
            return false;
        }

        var PropertyName = new Array();

        $.each($("input[name='UpdateProperties[]']:checked"), function () {
            PropertyName.push($(this).val());
        });

        if (PropertyName == "") {
            alert("Select atleast 1 Parameter");
            return false;
        }

        var Properties = PropertyName.join('~');

        console.log(Properties);

        var value = JSON.stringify({
            'Urn': Urn,
            'Properties': Properties
        });

        $("#Updateloading").show();

        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: '@Url.Action("GetUpdateFeederDetails", "Electrical360")',
            data: value,
            dataType: "json",
            success: function (data) {

                console.log(data);

                $("#TblBlankFeederId").show();
                $("#TblMultipleFeederId").show();
                $("#TblUpdatedFeederId").show();
                $("#TblIsolatedFeederId").show();

                $("#TblBlankFeederId tbody").html('');
                $("#TblMultipleFeederId tbody").html('');
                $("#TblUpdatedFeederId tbody").html('');
                $("#TblIsolatedFeederId tbody").html('');

                //for (var i = 0; i < data.Table.length; i++)
                //{
                //    var Blank_Ids = data.Table[i].Blank_Ids;
                //    var Blank_Values = data.Table[i].Blank_Values;

                //    var idss = '';
                //    var Data = Blank_Ids.split('|');
                //    if (Data.length > 0)
                //    {
                //        for (var j = 0; j < Data.length; j++) {
                //            idss += '<input style="" type ="button" value = ' + Data[j] + '  id =' + Data[j] + ' onclick="window.parent.Forgeid(this.id)"/>';
                //        }
                //    }

                //    $("#TblBlankFeederId tbody").append('<tr><td style="width:2%;">' + idss + '</td><td style="width:2%">' + Blank_Values + '</td></tr>');
                //}

                //for (var i = 0; i < data.Table1.length; i++)
                //{
                //    var Multiple_Ids = data.Table1[i].Multiple_Ids;
                //    var Multiple_Values = data.Table1[i].Multiple_Values;

                //    var idss = '';
                //    var Data = Multiple_Ids.split('|');
                //    if (Data.length > 0)
                //    {
                //        for (var j = 0; j < Data.length; j++) {
                //            idss += '<input style="" type ="button" value = ' + Data[j] + '  id =' + Data[j] + ' onclick="window.parent.Forgeid(this.id)"/>';
                //        }
                //    }

                //    $("#TblMultipleFeederId tbody").append('<tr><td style="width:2%;">' + idss + '</td><td style="width:2%">' + Multiple_Values + '</td></tr>');
                //}

                //for (var i = 0; i < data.Table2.length; i++)
                //{
                //    var Updated_Ids = data.Table2[i].Updated_Ids;
                //    var Updated_Values = data.Table2[i].Updated_Values;

                //    $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + Updated_Ids + '  id =' + Updated_Ids + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + Updated_Values + '</td></tr>');
                //}

                for (var i = 0; i < data.Table1.length; i++) {
                    var Isolated_Ids = data.Table1[i].IsolatedConduitsForgeid;
                    $("#TblIsolatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + Isolated_Ids + '  id =' + Isolated_Ids + ' onclick="window.parent.Forgeid(this.id)"/></td></tr>');
                }


                var ConduitsForgeid = "";
                var ConduitsFittingForgeid = "";


                var perivousConFitforgeid = null;
                var perivousConforgeid = null;

                var perivousConFitfeederid = '';
                var perivousConfeederid = '';

                var WithoutFeederIdRun = '';
                var RunPropName = '';

                var MultipleRun = '';
                var MultipleValue = '';

                var CFPointsArray = [];
                var TotalCFPointsArray = [];

                var UpdatedIdsArray = [];

       
                TotalCFPointsArray = data.Table;

                while (TotalCFPointsArray.length > 0) {
                    var cheak = 1;
                    CFPointsArray = [];

                    for (var i = 0; i < TotalCFPointsArray.length; i++) {
                        ConduitsForgeid = TotalCFPointsArray[i].ConduitsForgeid;
                        ConduitsFittingForgeid = TotalCFPointsArray[i].ConduitsFittingForgeid;

                        perivousConfeederid = TotalCFPointsArray[i].ConduitsFeederid;
                        perivousConFitfeederid = TotalCFPointsArray[i].ConduitsFittingFeederid;

                        RunPropName = TotalCFPointsArray[i].Property_Name;

                        if (i == 0) {

                            perivousConFitforgeid = ConduitsFittingForgeid;
                            perivousConforgeid = ConduitsForgeid;

                            CFPointsArray.push(TotalCFPointsArray[i]);

                            if (perivousConFitfeederid == '' && perivousConfeederid == '') {
                                WithoutFeederIdRun += perivousConforgeid + '|' + perivousConFitforgeid
                            }

                            if (((perivousConFitfeederid == '' && perivousConfeederid != '') || (perivousConFitfeederid != '' && perivousConfeederid == '')
                            || (perivousConFitfeederid != '' && perivousConfeederid != '')) && perivousConFitforgeid.indexOf("One") == -1)
                            {
                                MultipleRun = perivousConforgeid + '|' + perivousConFitforgeid;

                                if (perivousConFitfeederid != '' && perivousConfeederid == '') {

                                    MultipleValue = perivousConFitfeederid;

                                    if (UpdatedIdsArray.indexOf(perivousConforgeid) == -1)
                                    {
                                        UpdatedIdsArray.push(perivousConforgeid);

                                        $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConforgeid + '  id =' + perivousConforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                    }
                                   
                                }
                                else if (perivousConFitfeederid == '' && perivousConfeederid != '') {

                                    MultipleValue = perivousConfeederid;

                                    if (UpdatedIdsArray.indexOf(perivousConFitforgeid) == -1) {
                                        UpdatedIdsArray.push(perivousConFitforgeid);
                                        $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConFitforgeid + '  id =' + perivousConFitforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                    }
                                }
                                else if(perivousConFitfeederid==perivousConfeederid)
                                    MultipleValue = perivousConfeederid

                                else if(perivousConFitfeederid!=perivousConfeederid && perivousConFitfeederid!='' && perivousConfeederid!='')
                                  MultipleValue=MultipleValue+perivousConfeederid+'|'+perivousConFitfeederid


                            }
                        }
                        else {

                            for (var j = 0; j < TotalCFPointsArray.length; j++) {

                                var ConduitsForgeidcheck = TotalCFPointsArray[j].ConduitsForgeid;
                                var ConduitsFittingForgeidcheck = TotalCFPointsArray[j].ConduitsFittingForgeid;

                                RunPropName = TotalCFPointsArray[j].Property_Name;
                                
                                perivousConfeederid = TotalCFPointsArray[j].ConduitsFeederid;
                                perivousConFitfeederid = TotalCFPointsArray[j].ConduitsFittingFeederid;

                                if (ConduitsFittingForgeidcheck == perivousConFitforgeid && perivousConforgeid != ConduitsForgeidcheck && cheak == 1) {

                                    perivousConFitforgeid = ConduitsFittingForgeidcheck;
                                    perivousConforgeid = ConduitsForgeidcheck;
                                    cheak = 0;

                                    CFPointsArray.push(TotalCFPointsArray[j]);

                                    if (perivousConFitfeederid == '' && perivousConfeederid == '') {
                                        WithoutFeederIdRun += '|' + perivousConforgeid
                                    }

                                    if(((perivousConFitfeederid=='' && perivousConfeederid!='') || (perivousConFitfeederid!='' && perivousConfeederid=='')
                                    || (perivousConFitfeederid != '' && perivousConfeederid != '')) && perivousConFitforgeid.indexOf("One") == -1)
                                    {
                                        MultipleRun=MultipleRun+'|'+ConduitsForgeidcheck

                                        if(perivousConFitfeederid !='' && perivousConfeederid=='')
                                        {
                                            if (UpdatedIdsArray.indexOf(perivousConforgeid) == -1) {
                                                UpdatedIdsArray.push(perivousConforgeid);
                                                $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConforgeid + '  id =' + perivousConforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                            }

                                            if(MultipleValue==perivousConFitfeederid)
                                            {

                                                MultipleValue=perivousConFitfeederid;

                                            }
                                            else
                                                MultipleValue=MultipleValue+'|'+perivousConFitfeederid;
                                        }
                                        else if(perivousConFitfeederid=='' && perivousConfeederid !='')
                                        {

                                            if (UpdatedIdsArray.indexOf(perivousConFitforgeid) == -1) {
                                                UpdatedIdsArray.push(perivousConFitforgeid);
                                                $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConFitforgeid + '  id =' + perivousConFitforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                            }

                                            if(MultipleValue==perivousConfeederid)
                                            {
                                                MultipleValue=perivousConfeederid
                                            }
                                            else
                                                MultipleValue=MultipleValue+'|'+perivousConfeederid
                                        }
                                        else if(perivousConFitfeederid==perivousConfeederid)
                                            MultipleValue=perivousConfeederid
                                        else if(perivousConFitfeederid !=perivousConfeederid)
                                            MultipleValue=MultipleValue+perivousConfeederid+'|'+perivousConFitfeederid

                                    }

                                }
                                else if (ConduitsFittingForgeidcheck != perivousConFitforgeid && perivousConforgeid == ConduitsForgeidcheck && cheak == 0) {

                                    perivousConFitforgeid = ConduitsFittingForgeidcheck;
                                    perivousConforgeid = ConduitsForgeidcheck;
                                    cheak = 1;

                                    CFPointsArray.push(TotalCFPointsArray[j]);

                                    if (perivousConFitfeederid == '' && perivousConfeederid == '') {
                                        WithoutFeederIdRun += '|' + perivousConFitforgeid
                                    }


                                    if (((perivousConFitfeederid == '' && perivousConfeederid != '') || (perivousConFitfeederid != '' && perivousConfeederid == '')
                                    || (perivousConFitfeederid != '' && perivousConfeederid != '')) && perivousConFitforgeid.indexOf("One") == -1) {
                                        MultipleRun = MultipleRun + '|' + ConduitsForgeidcheck

                                        if (perivousConFitfeederid != '' && perivousConfeederid == '') {

                                            
                                            if (UpdatedIdsArray.indexOf(perivousConforgeid) == -1) {
                                                UpdatedIdsArray.push(perivousConforgeid);
                                                $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConforgeid + '  id =' + perivousConforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                            }

                                            if (MultipleValue == perivousConFitfeederid) {

                                                MultipleValue = perivousConFitfeederid;

                                            }
                                            else
                                                MultipleValue = MultipleValue + '|' + perivousConFitfeederid;
                                        }
                                        else if (perivousConFitfeederid == '' && perivousConfeederid != '') {

                                            if (UpdatedIdsArray.indexOf(perivousConFitforgeid) == -1) {
                                                UpdatedIdsArray.push(perivousConFitforgeid);
                                                $("#TblUpdatedFeederId tbody").append('<tr><td style="width:2%;"><input style="" type ="button" value = ' + perivousConFitforgeid + '  id =' + perivousConFitforgeid + ' onclick="window.parent.Forgeid(this.id)"/></td><td style="width:2%">' + RunPropName + '</td></tr>');
                                            }

                                            if (MultipleValue == perivousConfeederid) {
                                                MultipleValue = perivousConfeederid
                                            }
                                            else
                                                MultipleValue = MultipleValue + '|' + perivousConfeederid
                                        }
                                        else if (perivousConFitfeederid == perivousConfeederid)
                                            MultipleValue = perivousConfeederid
                                        else if (perivousConFitfeederid != perivousConfeederid)
                                            MultipleValue = MultipleValue + perivousConfeederid + '|' + perivousConFitfeederid

                                    }

                                }

                            }

                        }

                    }

                    if (WithoutFeederIdRun != '') {
                        var idss = '';
                        var Data = WithoutFeederIdRun.split('|');
                        if (Data.length > 0) {
                            for (var j = 0; j < Data.length; j++) {
                                idss += '<input style="" type ="button" value = ' + Data[j] + '  id =' + Data[j] + ' onclick="window.parent.Forgeid(this.id)"/>';
                            }
                        }

                        $("#TblBlankFeederId tbody").append('<tr><td style="width:2%;">' + idss + '</td><td style="width:2%">' + RunPropName + '</td></tr>');
                    }

                    if (MultipleValue.indexOf('|') != -1)
                    {
                            var idss = '';
                            var Data = MultipleRun.split('|');
                            if (Data.length > 0)
                            {
                                for (var j = 0; j < Data.length; j++) {
                                    idss += '<input style="" type ="button" value = ' + Data[j] + '  id =' + Data[j] + ' onclick="window.parent.Forgeid(this.id)"/>';
                                }
                            }

                            $("#TblMultipleFeederId tbody").append('<tr><td style="width:2%;">' + idss + '</td><td style="width:2%">' + RunPropName + '</td></tr>');
                    }

                    for (var i = 0; i < CFPointsArray.length; i++) {
                        var obj = CFPointsArray[i];
                        console.log(obj);
                        TotalCFPointsArray = removeA(TotalCFPointsArray, obj);
                    }

                    MultipleRun=''
                    MultipleValue=''

                    WithoutFeederIdRun=''
                }




                $("#TblBlankFeederId").tableHeadFixer({});
                $("#TblMultipleFeederId").tableHeadFixer({});
                $("#TblUpdatedFeederId").tableHeadFixer({});
                $("#TblIsolatedFeederId").tableHeadFixer({});

                $("#TblBlankFeederId").show();
                $("#TblMultipleFeederId").show();
                $("#TblUpdatedFeederId").show();
                $("#TblIsolatedFeederId").show();

                $("#Updateloading").hide();

            },
            error: function (result) {
                alert("Error Occur");
                $("#Updateloading").hide();
            }
        });


    });

</script>

@*Script For AutoPopulate File*@
<script>
    var urn = sessionStorage.getItem("urn");
    var filename = sessionStorage.getItem("filename");
    function GetFileName() {
        var dropdownlist = $("#searchfiletype").data("kendoDropDownList");
        dropdownlist.text('' + filename.trim() + '');
      
        var ddl = $("#searchversiontype").data("kendoDropDownList");
        ddl.dataSource.read();

    }

    function GetFileName1() {
     
        var dropdownlist = $("#filetype").data("kendoDropDownList");
        dropdownlist.text('' + filename.trim() + '');

        var ddl = $("#versiontype").data("kendoDropDownList");
        ddl.dataSource.read();
    }
    function GetFileName2() {
        var dropdownlist = $("#ddlUpdatefiletype").data("kendoDropDownList");
        dropdownlist.text('' + filename.trim() + '');
        var ddl = $("#ddlUpdateversiontype").data("kendoDropDownList");
        ddl.dataSource.read();
    }

    function GetFileName3() {
        var dropdownlist = $("#FeederIdfiletype").data("kendoDropDownList");
        dropdownlist.text('' + filename.trim() + '');
        var ddl = $("#FeederIdversiontype").data("kendoDropDownList");
        ddl.dataSource.read();
    }

    function GetFileName4() {
        var dropdownlist = $("#ddlFeederIdfiletype").data("kendoDropDownList");
        dropdownlist.text('' + filename.trim() + '');
        var ddl = $("#ddlFeederIdversiontype").data("kendoDropDownList");
        ddl.dataSource.read();
    }

    function Getversion1() {
        this.select(1);
        GridSearchModelData();
        onVersionChange();
    }

    function Getversion2() {
        this.select(1);
        UpdateGridSearchModelData();
        onUpdateVersionChange();
    }
    function Getversion() {
        this.select(1);
        DDLSearchFileData();
        onSearchVersionChange();
    }
    function Getversion3() {
        this.select(1);
        FeederIdGridSearchModelData();
        onFeederIdVersionChange();
    }

    function Getversion4() {
        this.select(1);
        GridFeederidSearchModelData();
        onFeederidVersionChange();
    }

    
</script>