//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SanveoAIO.Domain.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SanveoInspireEntities : DbContext
    {
        public SanveoInspireEntities()
            : base("name=SanveoInspireEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int GetSaveModelDataAll(string level, string p_Name, string c_Name, string p_Value, string condition)
        {
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var p_NameParameter = p_Name != null ?
                new ObjectParameter("P_Name", p_Name) :
                new ObjectParameter("P_Name", typeof(string));
    
            var c_NameParameter = c_Name != null ?
                new ObjectParameter("C_Name", c_Name) :
                new ObjectParameter("C_Name", typeof(string));
    
            var p_ValueParameter = p_Value != null ?
                new ObjectParameter("P_Value", p_Value) :
                new ObjectParameter("P_Value", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSaveModelDataAll", levelParameter, p_NameParameter, c_NameParameter, p_ValueParameter, conditionParameter);
        }
    
        public virtual int SP_DeleteFileUpload(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteFileUpload", idParameter);
        }
    
        public virtual int SP_LoginAIO(string userName, string password, ObjectParameter error, ObjectParameter validity)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LoginAIO", userNameParameter, passwordParameter, error, validity);
        }
    
        public virtual int SaveSearchData(Nullable<int> iD, string cATEGORY, string pROPERTY, string cONDITION, string vALUE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cATEGORYParameter = cATEGORY != null ?
                new ObjectParameter("CATEGORY", cATEGORY) :
                new ObjectParameter("CATEGORY", typeof(string));
    
            var pROPERTYParameter = pROPERTY != null ?
                new ObjectParameter("PROPERTY", pROPERTY) :
                new ObjectParameter("PROPERTY", typeof(string));
    
            var cONDITIONParameter = cONDITION != null ?
                new ObjectParameter("CONDITION", cONDITION) :
                new ObjectParameter("CONDITION", typeof(string));
    
            var vALUEParameter = vALUE != null ?
                new ObjectParameter("VALUE", vALUE) :
                new ObjectParameter("VALUE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveSearchData", iDParameter, cATEGORYParameter, pROPERTYParameter, cONDITIONParameter, vALUEParameter);
        }
    
        public virtual int SP_UpdateFlag(Nullable<int> id, string col, Nullable<bool> value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var colParameter = col != null ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateFlag", idParameter, colParameter, valueParameter);
        }
    
        public virtual int GetSaveModelData(string level, string p_Name, string c_Name, string p_Value, string condition)
        {
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var p_NameParameter = p_Name != null ?
                new ObjectParameter("P_Name", p_Name) :
                new ObjectParameter("P_Name", typeof(string));
    
            var c_NameParameter = c_Name != null ?
                new ObjectParameter("C_Name", c_Name) :
                new ObjectParameter("C_Name", typeof(string));
    
            var p_ValueParameter = p_Value != null ?
                new ObjectParameter("P_Value", p_Value) :
                new ObjectParameter("P_Value", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSaveModelData", levelParameter, p_NameParameter, c_NameParameter, p_ValueParameter, conditionParameter);
        }
    
        public virtual int sp_GetModelDataBySearch(string sarechText)
        {
            var sarechTextParameter = sarechText != null ?
                new ObjectParameter("sarechText", sarechText) :
                new ObjectParameter("sarechText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetModelDataBySearch", sarechTextParameter);
        }
    
        public virtual ObjectResult<GetSaveSearchData_Result> GetSaveSearchData(string guid)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaveSearchData_Result>("GetSaveSearchData", guidParameter);
        }
    
        public virtual ObjectResult<GetFilterSearchData_Result> GetFilterSearchData(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilterSearchData_Result>("GetFilterSearchData", idParameter);
        }
    
        public virtual int SP_GetCategoryExcel(string propertyName, Nullable<int> itemid, string mGuid, ObjectParameter result, Nullable<int> compId, string template, string ruleName)
        {
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("Itemid", itemid) :
                new ObjectParameter("Itemid", typeof(int));
    
            var mGuidParameter = mGuid != null ?
                new ObjectParameter("MGuid", mGuid) :
                new ObjectParameter("MGuid", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var templateParameter = template != null ?
                new ObjectParameter("Template", template) :
                new ObjectParameter("Template", typeof(string));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetCategoryExcel", propertyNameParameter, itemidParameter, mGuidParameter, result, compIdParameter, templateParameter, ruleNameParameter);
        }
    
        public virtual int SP_GetCategoryExcel1(string propertyName, Nullable<int> itemid, string mGuid, ObjectParameter result, Nullable<int> compId, string template, string ruleName)
        {
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("Itemid", itemid) :
                new ObjectParameter("Itemid", typeof(int));
    
            var mGuidParameter = mGuid != null ?
                new ObjectParameter("MGuid", mGuid) :
                new ObjectParameter("MGuid", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var templateParameter = template != null ?
                new ObjectParameter("Template", template) :
                new ObjectParameter("Template", typeof(string));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetCategoryExcel1", propertyNameParameter, itemidParameter, mGuidParameter, result, compIdParameter, templateParameter, ruleNameParameter);
        }
    
        public virtual ObjectResult<string> GetcategorySearch(string modelid, string filename, Nullable<int> compId, string ruleName)
        {
            var modelidParameter = modelid != null ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetcategorySearch", modelidParameter, filenameParameter, compIdParameter, ruleNameParameter);
        }
    
        public virtual ObjectResult<sp_GetMultipleSearch_Result> sp_GetMultipleSearch(string sarechText, string sarechText1, string sarechText2, string id)
        {
            var sarechTextParameter = sarechText != null ?
                new ObjectParameter("sarechText", sarechText) :
                new ObjectParameter("sarechText", typeof(string));
    
            var sarechText1Parameter = sarechText1 != null ?
                new ObjectParameter("sarechText1", sarechText1) :
                new ObjectParameter("sarechText1", typeof(string));
    
            var sarechText2Parameter = sarechText2 != null ?
                new ObjectParameter("sarechText2", sarechText2) :
                new ObjectParameter("sarechText2", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMultipleSearch_Result>("sp_GetMultipleSearch", sarechTextParameter, sarechText1Parameter, sarechText2Parameter, idParameter);
        }
    
        public virtual ObjectResult<sp_GetMultipleSearch1_Result> sp_GetMultipleSearch1(string sarechText, string sarechText1, string sarechText2, string id)
        {
            var sarechTextParameter = sarechText != null ?
                new ObjectParameter("sarechText", sarechText) :
                new ObjectParameter("sarechText", typeof(string));
    
            var sarechText1Parameter = sarechText1 != null ?
                new ObjectParameter("sarechText1", sarechText1) :
                new ObjectParameter("sarechText1", typeof(string));
    
            var sarechText2Parameter = sarechText2 != null ?
                new ObjectParameter("sarechText2", sarechText2) :
                new ObjectParameter("sarechText2", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMultipleSearch1_Result>("sp_GetMultipleSearch1", sarechTextParameter, sarechText1Parameter, sarechText2Parameter, idParameter);
        }
    
        public virtual int SP_BulkModelData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BulkModelData");
        }
    
        public virtual ObjectResult<SP_GetRuleData_Result> SP_GetRuleData(string ruleName, Nullable<int> compId)
        {
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRuleData_Result>("SP_GetRuleData", ruleNameParameter, compIdParameter);
        }
    
        public virtual ObjectResult<GetItemidSearch_Result> GetItemidSearch(string categoryName, string mGuid, string familyType, Nullable<int> compId)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var mGuidParameter = mGuid != null ?
                new ObjectParameter("MGuid", mGuid) :
                new ObjectParameter("MGuid", typeof(string));
    
            var familyTypeParameter = familyType != null ?
                new ObjectParameter("FamilyType", familyType) :
                new ObjectParameter("FamilyType", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemidSearch_Result>("GetItemidSearch", categoryNameParameter, mGuidParameter, familyTypeParameter, compIdParameter);
        }
    
        public virtual int DeleteModelUrnDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModelUrnDetails");
        }
    
        public virtual int DeleteExcelCategoryData(string fileName, Nullable<int> currentUserId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExcelCategoryData", fileNameParameter, currentUserIdParameter);
        }
    
        public virtual int SaveModelData(Nullable<int> currentUserId)
        {
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveModelData", currentUserIdParameter);
        }
    
        public virtual ObjectResult<GetModelDetailsReults_Result> GetModelDetailsReults(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModelDetailsReults_Result>("GetModelDetailsReults", urnParameter);
        }
    
        public virtual ObjectResult<GetPropertyName_Result2> GetPropertyName(string guid, string category)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropertyName_Result2>("GetPropertyName", guidParameter, categoryParameter);
        }
    
        public virtual ObjectResult<string> sp_GetAutoCompleteData(string text, string urn, string categoryName, string propertyName)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetAutoCompleteData", textParameter, urnParameter, categoryNameParameter, propertyNameParameter);
        }
    
        public virtual ObjectResult<sp_GetAutoCompleteData1_Result> sp_GetAutoCompleteData1(string text, string urn, string categoryName, string propertyName)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAutoCompleteData1_Result>("sp_GetAutoCompleteData1", textParameter, urnParameter, categoryNameParameter, propertyNameParameter);
        }
    
        public virtual ObjectResult<Sp_GetCompanyID_Result> Sp_GetCompanyID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCompanyID_Result>("Sp_GetCompanyID");
        }
    
        public virtual ObjectResult<Sp_GetUserGroup_Result> Sp_GetUserGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetUserGroup_Result>("Sp_GetUserGroup");
        }
    
        public virtual ObjectResult<SP_GetGroup_Result> SP_GetGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGroup_Result>("SP_GetGroup");
        }
    
        public virtual int SP_SaveGroup(Nullable<int> id, string gName, Nullable<int> currentUserId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var gNameParameter = gName != null ?
                new ObjectParameter("GName", gName) :
                new ObjectParameter("GName", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveGroup", idParameter, gNameParameter, currentUserIdParameter);
        }
    
        public virtual int SP_DeleteGroup(Nullable<int> id, Nullable<int> u_ID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteGroup", idParameter, u_IDParameter);
        }
    
        public virtual int DeleteRuleData(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRuleData", fileNameParameter);
        }
    
        public virtual int SP_SaveFolderDetails(string foldername, string projectName, Nullable<int> userid)
        {
            var foldernameParameter = foldername != null ?
                new ObjectParameter("foldername", foldername) :
                new ObjectParameter("foldername", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveFolderDetails", foldernameParameter, projectNameParameter, useridParameter);
        }
    
        public virtual ObjectResult<Sp_GetAdminUserGroup_Result> Sp_GetAdminUserGroup(Nullable<int> group_Id)
        {
            var group_IdParameter = group_Id.HasValue ?
                new ObjectParameter("Group_Id", group_Id) :
                new ObjectParameter("Group_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetAdminUserGroup_Result>("Sp_GetAdminUserGroup", group_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetProfileInfo_Result> SP_GetProfileInfo(Nullable<int> userId, Nullable<int> userGroupId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userGroupIdParameter = userGroupId.HasValue ?
                new ObjectParameter("UserGroupId", userGroupId) :
                new ObjectParameter("UserGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProfileInfo_Result>("SP_GetProfileInfo", userIdParameter, userGroupIdParameter);
        }
    
        public virtual ObjectResult<SP_GetNodeDetils_Result> SP_GetNodeDetils(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNodeDetils_Result>("SP_GetNodeDetils", useridParameter);
        }
    
        public virtual int SaveProjectid(string projectName, string projectId, Nullable<int> currentUserId)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveProjectid", projectNameParameter, projectIdParameter, currentUserIdParameter);
        }
    
        public virtual int GetRuleDetails(string fileName, Nullable<int> compid, string ruleName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRuleDetails", fileNameParameter, compidParameter, ruleNameParameter);
        }
    
        public virtual ObjectResult<SP_GetNodeUrnDetails_Result> SP_GetNodeUrnDetails(Nullable<int> compid, Nullable<int> userid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNodeUrnDetails_Result>("SP_GetNodeUrnDetails", compidParameter, useridParameter);
        }
    
        public virtual ObjectResult<SP_GetVersionwiseDiff_Result> SP_GetVersionwiseDiff(string fileName, string categoryName, string baseversion, Nullable<int> compId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var baseversionParameter = baseversion != null ?
                new ObjectParameter("baseversion", baseversion) :
                new ObjectParameter("baseversion", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetVersionwiseDiff_Result>("SP_GetVersionwiseDiff", fileNameParameter, categoryNameParameter, baseversionParameter, compIdParameter);
        }
    
        public virtual int SaveRuleExcelCategory(string fileName, string category_Name, Nullable<int> compid, Nullable<int> currentUserId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var category_NameParameter = category_Name != null ?
                new ObjectParameter("Category_Name", category_Name) :
                new ObjectParameter("Category_Name", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRuleExcelCategory", fileNameParameter, category_NameParameter, compidParameter, currentUserIdParameter);
        }
    
        public virtual int DeleteModelDetailsData(string id, string versionNo, Nullable<int> compId, Nullable<int> currentUserId)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("versionNo", versionNo) :
                new ObjectParameter("versionNo", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModelDetailsData", idParameter, versionNoParameter, compIdParameter, currentUserIdParameter);
        }
    
        public virtual int SP_SaveModelUrnDetailsCheck(string urn, string versionno, Nullable<int> compId, Nullable<int> currentID)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var versionnoParameter = versionno != null ?
                new ObjectParameter("versionno", versionno) :
                new ObjectParameter("versionno", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveModelUrnDetailsCheck", urnParameter, versionnoParameter, compIdParameter, currentIDParameter);
        }
    
        public virtual ObjectResult<GetQuantity2GridModelData_Result> GetQuantity2GridModelData(string filename, string categoryName, string version, Nullable<int> compId)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuantity2GridModelData_Result>("GetQuantity2GridModelData", filenameParameter, categoryNameParameter, versionParameter, compIdParameter);
        }
    
        public virtual int Deletefolder(Nullable<int> compid, string folderid, Nullable<int> currentUserId)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var folderidParameter = folderid != null ?
                new ObjectParameter("folderid", folderid) :
                new ObjectParameter("folderid", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletefolder", compidParameter, folderidParameter, currentUserIdParameter);
        }
    
        public virtual int DeleteModelHistoryData(string modelName, string versionNo, Nullable<int> compid, Nullable<int> currentUserId, string ruleName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("versionNo", versionNo) :
                new ObjectParameter("versionNo", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModelHistoryData", modelNameParameter, versionNoParameter, compidParameter, currentUserIdParameter, ruleNameParameter);
        }
    
        public virtual int DeleteRuleDetails(string fileName, Nullable<int> compid, Nullable<int> currentUserId, string ruleName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRuleDetails", fileNameParameter, compidParameter, currentUserIdParameter, ruleNameParameter);
        }
    
        public virtual ObjectResult<GetCategoryHighLight_Result> GetCategoryHighLight(string urn, string categoryName, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryHighLight_Result>("GetCategoryHighLight", urnParameter, categoryNameParameter, compIdParameter);
        }
    
        public virtual ObjectResult<string> GetCommonCategory(string urn, Nullable<int> compid)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCommonCategory", urnParameter, compidParameter);
        }
    
        public virtual ObjectResult<string> GetCompanyType(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCompanyType", compidParameter);
        }
    
        public virtual ObjectResult<string> GetExtraCategoryName(string guid, string filename, Nullable<int> compId, string ruleName)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetExtraCategoryName", guidParameter, filenameParameter, compIdParameter, ruleNameParameter);
        }
    
        public virtual ObjectResult<string> GetFamilyName(string guid, string category)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetFamilyName", guidParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetFilterCategory_Result> GetFilterCategory(string filename, Nullable<int> compid, string ruleName)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilterCategory_Result>("GetFilterCategory", filenameParameter, compidParameter, ruleNameParameter);
        }
    
        public virtual int GetPropertySearchData(string urn, string categoryName, string propertyName)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertySearchData", urnParameter, categoryNameParameter, propertyNameParameter);
        }
    
        public virtual int SP_ChangePassword(Nullable<int> u_ID, string @new, string old, ObjectParameter error)
        {
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            var newParameter = @new != null ?
                new ObjectParameter("new", @new) :
                new ObjectParameter("new", typeof(string));
    
            var oldParameter = old != null ?
                new ObjectParameter("old", old) :
                new ObjectParameter("old", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ChangePassword", u_IDParameter, newParameter, oldParameter, error);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetAdminId(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetAdminId", compidParameter);
        }
    
        public virtual int sp_GetAutoGridData(string text, string urn, string categoryName, string propertyName)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAutoGridData", textParameter, urnParameter, categoryNameParameter, propertyNameParameter);
        }
    
        public virtual ObjectResult<SP_GetCategoryCount_Result> SP_GetCategoryCount(string filename, string version, Nullable<int> compId)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCategoryCount_Result>("SP_GetCategoryCount", filenameParameter, versionParameter, compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetExcelHistoryRuleData_Result> SP_GetExcelHistoryRuleData(string fileName, string versionNo, string modelName, Nullable<int> compId, string rulename)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var rulenameParameter = rulename != null ?
                new ObjectParameter("Rulename", rulename) :
                new ObjectParameter("Rulename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetExcelHistoryRuleData_Result>("SP_GetExcelHistoryRuleData", fileNameParameter, versionNoParameter, modelNameParameter, compIdParameter, rulenameParameter);
        }
    
        public virtual ObjectResult<SP_GetFamilyCount_Result> SP_GetFamilyCount(string filename, string categoryName, string version, Nullable<int> compId)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFamilyCount_Result>("SP_GetFamilyCount", filenameParameter, categoryNameParameter, versionParameter, compIdParameter);
        }
    
        public virtual int SP_GetFolderDetials(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetFolderDetials", useridParameter);
        }
    
        public virtual ObjectResult<SP_GetFolderNodes_Result> SP_GetFolderNodes(Nullable<int> compid, Nullable<int> folderid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var folderidParameter = folderid.HasValue ?
                new ObjectParameter("Folderid", folderid) :
                new ObjectParameter("Folderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFolderNodes_Result>("SP_GetFolderNodes", compidParameter, folderidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetIDByCategory(string urn, string category)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetIDByCategory", urnParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SP_GetLogActivity_Result> SP_GetLogActivity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLogActivity_Result>("SP_GetLogActivity");
        }
    
        public virtual int SP_GetPropertywiseDiff(string fileName, string categoryName, string baseversion, Nullable<int> compId, string propvalue)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var baseversionParameter = baseversion != null ?
                new ObjectParameter("baseversion", baseversion) :
                new ObjectParameter("baseversion", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var propvalueParameter = propvalue != null ?
                new ObjectParameter("Propvalue", propvalue) :
                new ObjectParameter("Propvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetPropertywiseDiff", fileNameParameter, categoryNameParameter, baseversionParameter, compIdParameter, propvalueParameter);
        }
    
        public virtual int sp_GetRuleCategoryByModelID(string model_id)
        {
            var model_idParameter = model_id != null ?
                new ObjectParameter("Model_id", model_id) :
                new ObjectParameter("Model_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRuleCategoryByModelID", model_idParameter);
        }
    
        public virtual int SP_InsertActivityLog(Nullable<int> u_Id, string module, string description, Nullable<int> task, string tableName, Nullable<int> columnID, string operation, string columnName)
        {
            var u_IdParameter = u_Id.HasValue ?
                new ObjectParameter("U_Id", u_Id) :
                new ObjectParameter("U_Id", typeof(int));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnIDParameter = columnID.HasValue ?
                new ObjectParameter("ColumnID", columnID) :
                new ObjectParameter("ColumnID", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertActivityLog", u_IdParameter, moduleParameter, descriptionParameter, taskParameter, tableNameParameter, columnIDParameter, operationParameter, columnNameParameter);
        }
    
        public virtual int SP_SaveExcelCategoryDataFinal(string fileName, string modelName, string version, Nullable<int> currentID)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveExcelCategoryDataFinal", fileNameParameter, modelNameParameter, versionParameter, currentIDParameter);
        }
    
        public virtual int SP_SaveExcelRuleData(string cATEGORY, string ruleValue, string fileName, string versionNo, string modelName, string ruleName, Nullable<int> compid)
        {
            var cATEGORYParameter = cATEGORY != null ?
                new ObjectParameter("CATEGORY", cATEGORY) :
                new ObjectParameter("CATEGORY", typeof(string));
    
            var ruleValueParameter = ruleValue != null ?
                new ObjectParameter("RuleValue", ruleValue) :
                new ObjectParameter("RuleValue", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveExcelRuleData", cATEGORYParameter, ruleValueParameter, fileNameParameter, versionNoParameter, modelNameParameter, ruleNameParameter, compidParameter);
        }
    
        public virtual int SP_SaveFolderFiles(Nullable<int> compid, Nullable<int> folderid, string filesName, Nullable<int> currentUserId)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var folderidParameter = folderid.HasValue ?
                new ObjectParameter("Folderid", folderid) :
                new ObjectParameter("Folderid", typeof(int));
    
            var filesNameParameter = filesName != null ?
                new ObjectParameter("FilesName", filesName) :
                new ObjectParameter("FilesName", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveFolderFiles", compidParameter, folderidParameter, filesNameParameter, currentUserIdParameter);
        }
    
        public virtual int SP_SaveModelUrnDetailsCrossCheck(string fileName, string urn, string versionNo, Nullable<System.DateTime> modifiedDate, ObjectParameter message, Nullable<int> compid)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveModelUrnDetailsCrossCheck", fileNameParameter, urnParameter, versionNoParameter, modifiedDateParameter, message, compidParameter);
        }
    
        public virtual int sp_UpdateProperyData(string forgeid, string header, string textValue, string uRN, Nullable<int> currentID)
        {
            var forgeidParameter = forgeid != null ?
                new ObjectParameter("Forgeid", forgeid) :
                new ObjectParameter("Forgeid", typeof(string));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var textValueParameter = textValue != null ?
                new ObjectParameter("TextValue", textValue) :
                new ObjectParameter("TextValue", typeof(string));
    
            var uRNParameter = uRN != null ?
                new ObjectParameter("URN", uRN) :
                new ObjectParameter("URN", typeof(string));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProperyData", forgeidParameter, headerParameter, textValueParameter, uRNParameter, currentIDParameter);
        }
    
        [DbFunction("SanveoInspireEntities", "Split")]
        public virtual IQueryable<string> Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[SanveoInspireEntities].[Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        [DbFunction("SanveoInspireEntities", "splitparameter")]
        public virtual IQueryable<splitparameter_Result> splitparameter(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitparameter_Result>("[SanveoInspireEntities].[splitparameter](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<SP_Getversion_Result> SP_Getversion(string file, Nullable<int> compId)
        {
            var fileParameter = file != null ?
                new ObjectParameter("file", file) :
                new ObjectParameter("file", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Getversion_Result>("SP_Getversion", fileParameter, compIdParameter);
        }
    
        public virtual ObjectResult<GetCategoryName_Result> GetCategoryName(string guid)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryName_Result>("GetCategoryName", guidParameter);
        }
    
        public virtual ObjectResult<GetFiledetails_Result> GetFiledetails(string modelName, Nullable<int> versionno, Nullable<int> compid, string ruleName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var versionnoParameter = versionno.HasValue ?
                new ObjectParameter("Versionno", versionno) :
                new ObjectParameter("Versionno", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var ruleNameParameter = ruleName != null ?
                new ObjectParameter("RuleName", ruleName) :
                new ObjectParameter("RuleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFiledetails_Result>("GetFiledetails", modelNameParameter, versionnoParameter, compidParameter, ruleNameParameter);
        }
    
        public virtual int sp_DeleteUser(Nullable<int> u_ID, Nullable<int> currentUserId, ObjectParameter error)
        {
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUser", u_IDParameter, currentUserIdParameter, error);
        }
    
        public virtual int SP_SaveFolderName(string foldername, Nullable<int> compid, Nullable<int> currentUserId)
        {
            var foldernameParameter = foldername != null ?
                new ObjectParameter("foldername", foldername) :
                new ObjectParameter("foldername", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveFolderName", foldernameParameter, compidParameter, currentUserIdParameter);
        }
    
        public virtual int SP_SaveModelUrnDetails(string fileName, string urn, string versionNo, Nullable<System.DateTime> modifiedDate, string fileSize, Nullable<int> compid, string itemId, Nullable<int> flag, Nullable<int> currentUserId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var itemIdParameter = itemId != null ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveModelUrnDetails", fileNameParameter, urnParameter, versionNoParameter, modifiedDateParameter, fileSizeParameter, compidParameter, itemIdParameter, flagParameter, currentUserIdParameter);
        }
    
        public virtual int SP_SaveNodeDetails(string hUbid, Nullable<int> userid, Nullable<int> currentUserId)
        {
            var hUbidParameter = hUbid != null ?
                new ObjectParameter("HUbid", hUbid) :
                new ObjectParameter("HUbid", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveNodeDetails", hUbidParameter, useridParameter, currentUserIdParameter);
        }
    
        public virtual int SP_SaveNodeFolderDetails(string projectid, string projectName, string folderid, Nullable<int> userid, Nullable<int> currentID)
        {
            var projectidParameter = projectid != null ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var folderidParameter = folderid != null ?
                new ObjectParameter("folderid", folderid) :
                new ObjectParameter("folderid", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveNodeFolderDetails", projectidParameter, projectNameParameter, folderidParameter, useridParameter, currentIDParameter);
        }
    
        public virtual int SP_SavePersonalModelUrnDetails(string fileName, string urn, string versionNo, Nullable<System.DateTime> modifiedDate, string fileSize, Nullable<int> compid, Nullable<int> currentUserId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SavePersonalModelUrnDetails", fileNameParameter, urnParameter, versionNoParameter, modifiedDateParameter, fileSizeParameter, compidParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SP_GetFiles_Result> SP_GetFiles(Nullable<int> compid, Nullable<int> userid, Nullable<int> groupid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFiles_Result>("SP_GetFiles", compidParameter, useridParameter, groupidParameter);
        }
    
        public virtual int SP_DeleteCompany(Nullable<int> id, Nullable<int> u_ID, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteCompany", idParameter, u_IDParameter, error);
        }
    
        public virtual int SP_InsertActivityLog1(Nullable<int> u_Id, string module, string description, Nullable<int> task, string tableName, Nullable<int> columnID, string operation, string columnName)
        {
            var u_IdParameter = u_Id.HasValue ?
                new ObjectParameter("U_Id", u_Id) :
                new ObjectParameter("U_Id", typeof(int));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnIDParameter = columnID.HasValue ?
                new ObjectParameter("ColumnID", columnID) :
                new ObjectParameter("ColumnID", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertActivityLog1", u_IdParameter, moduleParameter, descriptionParameter, taskParameter, tableNameParameter, columnIDParameter, operationParameter, columnNameParameter);
        }
    
        public virtual int SP_SaveGlobalThemeName(string themeval, Nullable<int> userId)
        {
            var themevalParameter = themeval != null ?
                new ObjectParameter("themeval", themeval) :
                new ObjectParameter("themeval", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveGlobalThemeName", themevalParameter, userIdParameter);
        }
    
        public virtual int SP_SaveKendoThemeName(string themeval, Nullable<int> userId)
        {
            var themevalParameter = themeval != null ?
                new ObjectParameter("themeval", themeval) :
                new ObjectParameter("themeval", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveKendoThemeName", themevalParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_GetBothTheme_Result> SP_GetBothTheme(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBothTheme_Result>("SP_GetBothTheme", userIdParameter);
        }
    
        public virtual ObjectResult<SP_GetVersionList_Result> SP_GetVersionList(string urn, Nullable<int> compid)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetVersionList_Result>("SP_GetVersionList", urnParameter, compidParameter);
        }
    
        public virtual ObjectResult<string> sp_GetAutoCompleteDataForge(string text, string urn, string categoryName)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetAutoCompleteDataForge", textParameter, urnParameter, categoryNameParameter);
        }
    
        public virtual ObjectResult<sp_GetAutoCompleteDataForge1_Result> sp_GetAutoCompleteDataForge1(string text, string urn, string categoryName)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAutoCompleteDataForge1_Result>("sp_GetAutoCompleteDataForge1", textParameter, urnParameter, categoryNameParameter);
        }
    
        public virtual ObjectResult<SP_GetGlueDocDetails_Result> SP_GetGlueDocDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGlueDocDetails_Result>("SP_GetGlueDocDetails");
        }
    
        public virtual int SP_InsertGlueDocDetails(string glueFolderPath, string glueFolderID, string glueFileName, string glueVersion, string docFolderPath, string docFolderID, string docFileName, string tagName)
        {
            var glueFolderPathParameter = glueFolderPath != null ?
                new ObjectParameter("GlueFolderPath", glueFolderPath) :
                new ObjectParameter("GlueFolderPath", typeof(string));
    
            var glueFolderIDParameter = glueFolderID != null ?
                new ObjectParameter("GlueFolderID", glueFolderID) :
                new ObjectParameter("GlueFolderID", typeof(string));
    
            var glueFileNameParameter = glueFileName != null ?
                new ObjectParameter("GlueFileName", glueFileName) :
                new ObjectParameter("GlueFileName", typeof(string));
    
            var glueVersionParameter = glueVersion != null ?
                new ObjectParameter("GlueVersion", glueVersion) :
                new ObjectParameter("GlueVersion", typeof(string));
    
            var docFolderPathParameter = docFolderPath != null ?
                new ObjectParameter("DocFolderPath", docFolderPath) :
                new ObjectParameter("DocFolderPath", typeof(string));
    
            var docFolderIDParameter = docFolderID != null ?
                new ObjectParameter("DocFolderID", docFolderID) :
                new ObjectParameter("DocFolderID", typeof(string));
    
            var docFileNameParameter = docFileName != null ?
                new ObjectParameter("DocFileName", docFileName) :
                new ObjectParameter("DocFileName", typeof(string));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertGlueDocDetails", glueFolderPathParameter, glueFolderIDParameter, glueFileNameParameter, glueVersionParameter, docFolderPathParameter, docFolderIDParameter, docFileNameParameter, tagNameParameter);
        }
    
        public virtual ObjectResult<Sp_GetTagName_Result> Sp_GetTagName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetTagName_Result>("Sp_GetTagName");
        }
    
        public virtual int SaveTagNameTxt(string tagName)
        {
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTagNameTxt", tagNameParameter);
        }
    
        public virtual int SP_DeleteTagName(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteTagName", idParameter);
        }
    
        public virtual ObjectResult<string> SP_GetHubIdTxtBox()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetHubIdTxtBox");
        }
    
        public virtual ObjectResult<SP_GetGlueDocTag_Result> SP_GetGlueDocTag()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGlueDocTag_Result>("SP_GetGlueDocTag");
        }
    
        public virtual int SP_SaveTagName(Nullable<int> id, string tagName, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveTagName", idParameter, tagNameParameter, error);
        }
    
        public virtual ObjectResult<GetGlueProjects_Result> GetGlueProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGlueProjects_Result>("GetGlueProjects");
        }
    
        public virtual int SP_InsertGlueDocDetailsNew(Nullable<int> id, string docFileName, string tagName, string modelid, Nullable<int> modelversion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var docFileNameParameter = docFileName != null ?
                new ObjectParameter("DocFileName", docFileName) :
                new ObjectParameter("DocFileName", typeof(string));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var modelidParameter = modelid != null ?
                new ObjectParameter("Modelid", modelid) :
                new ObjectParameter("Modelid", typeof(string));
    
            var modelversionParameter = modelversion.HasValue ?
                new ObjectParameter("Modelversion", modelversion) :
                new ObjectParameter("Modelversion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertGlueDocDetailsNew", idParameter, docFileNameParameter, tagNameParameter, modelidParameter, modelversionParameter);
        }
    
        public virtual int DeleteGlueDocDetails(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGlueDocDetails", idParameter, error);
        }
    
        public virtual ObjectResult<SP_GetGlueDocNewDetails_Result> SP_GetGlueDocNewDetails(Nullable<int> mapID)
        {
            var mapIDParameter = mapID.HasValue ?
                new ObjectParameter("MapID", mapID) :
                new ObjectParameter("MapID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGlueDocNewDetails_Result>("SP_GetGlueDocNewDetails", mapIDParameter);
        }
    
        public virtual ObjectResult<SP_GetMappingName_Result> SP_GetMappingName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMappingName_Result>("SP_GetMappingName");
        }
    
        public virtual int SP_SaveCompany(Nullable<int> id, string cName, Nullable<bool> active, Nullable<int> currentUserId, string compType, string fileName, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cNameParameter = cName != null ?
                new ObjectParameter("CName", cName) :
                new ObjectParameter("CName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var compTypeParameter = compType != null ?
                new ObjectParameter("CompType", compType) :
                new ObjectParameter("CompType", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveCompany", idParameter, cNameParameter, activeParameter, currentUserIdParameter, compTypeParameter, fileNameParameter, error);
        }
    
        public virtual int SP_DeleteProfile(Nullable<int> id, Nullable<int> currentUserId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteProfile", idParameter, currentUserIdParameter, error);
        }
    
        public virtual int sp_SaveUser(Nullable<int> u_ID, string firstName, string lastName, string username, string password, string emailid, string mobileNo, Nullable<int> comp_Id, Nullable<int> group_Id, Nullable<bool> active, Nullable<int> currentID, string expireDate, ObjectParameter error, string profile)
        {
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var comp_IdParameter = comp_Id.HasValue ?
                new ObjectParameter("Comp_Id", comp_Id) :
                new ObjectParameter("Comp_Id", typeof(int));
    
            var group_IdParameter = group_Id.HasValue ?
                new ObjectParameter("Group_Id", group_Id) :
                new ObjectParameter("Group_Id", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var profileParameter = profile != null ?
                new ObjectParameter("Profile", profile) :
                new ObjectParameter("Profile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveUser", u_IDParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter, emailidParameter, mobileNoParameter, comp_IdParameter, group_IdParameter, activeParameter, currentIDParameter, expireDateParameter, error, profileParameter);
        }
    
        public virtual ObjectResult<GetSaveModelUrnDetails_Result> GetSaveModelUrnDetails(Nullable<int> compid, Nullable<int> versionno, Nullable<int> userid, string fileName)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var versionnoParameter = versionno.HasValue ?
                new ObjectParameter("Versionno", versionno) :
                new ObjectParameter("Versionno", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaveModelUrnDetails_Result>("GetSaveModelUrnDetails", compidParameter, versionnoParameter, useridParameter, fileNameParameter);
        }
    
        public virtual int SP_DeleteExcelRuleData(string cATEGORY, string ruleValue, string fileName, string versionNo, string modelName, Nullable<int> compid)
        {
            var cATEGORYParameter = cATEGORY != null ?
                new ObjectParameter("CATEGORY", cATEGORY) :
                new ObjectParameter("CATEGORY", typeof(string));
    
            var ruleValueParameter = ruleValue != null ?
                new ObjectParameter("RuleValue", ruleValue) :
                new ObjectParameter("RuleValue", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var versionNoParameter = versionNo != null ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteExcelRuleData", cATEGORYParameter, ruleValueParameter, fileNameParameter, versionNoParameter, modelNameParameter, compidParameter);
        }
    
        public virtual int SP_DeleteExistingRule(string rulename, Nullable<int> compid)
        {
            var rulenameParameter = rulename != null ?
                new ObjectParameter("Rulename", rulename) :
                new ObjectParameter("Rulename", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteExistingRule", rulenameParameter, compidParameter);
        }
    
        public virtual ObjectResult<Sp_GetUsers_Result> Sp_GetUsers(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetUsers_Result>("Sp_GetUsers", compidParameter);
        }
    
        public virtual ObjectResult<SP_GetCompany_Result> SP_GetCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCompany_Result>("SP_GetCompany");
        }
    
        public virtual int SP_DeleteTradeName(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteTradeName", idParameter);
        }
    
        public virtual int sp_SaveProfile(Nullable<int> id, string profile, string color, Nullable<int> currentID, Nullable<int> compId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var profileParameter = profile != null ?
                new ObjectParameter("Profile", profile) :
                new ObjectParameter("Profile", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveProfile", idParameter, profileParameter, colorParameter, currentIDParameter, compIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetUserProfile_Result> SP_GetUserProfile(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserProfile_Result>("SP_GetUserProfile", compIdParameter);
        }
    
        public virtual int SP_SaveTrade(Nullable<int> id, string tradeName, Nullable<int> compId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var tradeNameParameter = tradeName != null ?
                new ObjectParameter("TradeName", tradeName) :
                new ObjectParameter("TradeName", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveTrade", idParameter, tradeNameParameter, compIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetTrade_Result> SP_GetTrade(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTrade_Result>("SP_GetTrade", compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetUserTrade_Result> SP_GetUserTrade(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserTrade_Result>("SP_GetUserTrade", compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetModules_Result> SP_GetModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetModules_Result>("SP_GetModules");
        }
    
        public virtual int SaveCategoryFilter(string filename, string categoryName, string categoryFilter, string catMaping, Nullable<int> compid, Nullable<int> currentUserId, string rulename, Nullable<int> tradeId)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var categoryFilterParameter = categoryFilter != null ?
                new ObjectParameter("categoryFilter", categoryFilter) :
                new ObjectParameter("categoryFilter", typeof(string));
    
            var catMapingParameter = catMaping != null ?
                new ObjectParameter("catMaping", catMaping) :
                new ObjectParameter("catMaping", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var rulenameParameter = rulename != null ?
                new ObjectParameter("rulename", rulename) :
                new ObjectParameter("rulename", typeof(string));
    
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCategoryFilter", filenameParameter, categoryNameParameter, categoryFilterParameter, catMapingParameter, compidParameter, currentUserIdParameter, rulenameParameter, tradeIdParameter);
        }
    
        public virtual int SP_SaveRuleData(string rulename, string propertyName, string categoryIndex, string startIndex, string endIndex, string fileName, Nullable<int> startRowIndex, Nullable<int> sheetNumber, Nullable<int> compid, Nullable<int> currentUserId, Nullable<int> profile, string verify, Nullable<int> trade)
        {
            var rulenameParameter = rulename != null ?
                new ObjectParameter("Rulename", rulename) :
                new ObjectParameter("Rulename", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var categoryIndexParameter = categoryIndex != null ?
                new ObjectParameter("CategoryIndex", categoryIndex) :
                new ObjectParameter("CategoryIndex", typeof(string));
    
            var startIndexParameter = startIndex != null ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(string));
    
            var endIndexParameter = endIndex != null ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var sheetNumberParameter = sheetNumber.HasValue ?
                new ObjectParameter("SheetNumber", sheetNumber) :
                new ObjectParameter("SheetNumber", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var profileParameter = profile.HasValue ?
                new ObjectParameter("Profile", profile) :
                new ObjectParameter("Profile", typeof(int));
    
            var verifyParameter = verify != null ?
                new ObjectParameter("Verify", verify) :
                new ObjectParameter("Verify", typeof(string));
    
            var tradeParameter = trade.HasValue ?
                new ObjectParameter("Trade", trade) :
                new ObjectParameter("Trade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveRuleData", rulenameParameter, propertyNameParameter, categoryIndexParameter, startIndexParameter, endIndexParameter, fileNameParameter, startRowIndexParameter, sheetNumberParameter, compidParameter, currentUserIdParameter, profileParameter, verifyParameter, tradeParameter);
        }
    
        public virtual int Sp_SaveEditRunEngine(string filename, string rulename, string categoryIndex, string startIndex, string endIndex, Nullable<int> startRowIndex, Nullable<int> sheetNumber, Nullable<int> compid, Nullable<int> currentUserId, string propName, Nullable<int> profile, string verify)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var rulenameParameter = rulename != null ?
                new ObjectParameter("Rulename", rulename) :
                new ObjectParameter("Rulename", typeof(string));
    
            var categoryIndexParameter = categoryIndex != null ?
                new ObjectParameter("CategoryIndex", categoryIndex) :
                new ObjectParameter("CategoryIndex", typeof(string));
    
            var startIndexParameter = startIndex != null ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(string));
    
            var endIndexParameter = endIndex != null ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var sheetNumberParameter = sheetNumber.HasValue ?
                new ObjectParameter("SheetNumber", sheetNumber) :
                new ObjectParameter("SheetNumber", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var propNameParameter = propName != null ?
                new ObjectParameter("PropName", propName) :
                new ObjectParameter("PropName", typeof(string));
    
            var profileParameter = profile.HasValue ?
                new ObjectParameter("Profile", profile) :
                new ObjectParameter("Profile", typeof(int));
    
            var verifyParameter = verify != null ?
                new ObjectParameter("Verify", verify) :
                new ObjectParameter("Verify", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SaveEditRunEngine", filenameParameter, rulenameParameter, categoryIndexParameter, startIndexParameter, endIndexParameter, startRowIndexParameter, sheetNumberParameter, compidParameter, currentUserIdParameter, propNameParameter, profileParameter, verifyParameter);
        }
    
        public virtual ObjectResult<SP_GetTradeType_Result> SP_GetTradeType(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTradeType_Result>("SP_GetTradeType", compIdParameter);
        }
    
        public virtual ObjectResult<string> GetModelUrnDetails(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetModelUrnDetails", compidParameter);
        }
    
        public virtual ObjectResult<GetModelUrnDetails_Result> GetModelUrnDetails1(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModelUrnDetails_Result>("GetModelUrnDetails1", compidParameter);
        }
    
        public virtual int sp_DeleteFile(string fileName, Nullable<int> currentUserId, Nullable<int> compid, ObjectParameter error)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteFile", fileNameParameter, currentUserIdParameter, compidParameter, error);
        }
    
        public virtual ObjectResult<SP_GetFolderAccess_Result> SP_GetFolderAccess(Nullable<int> compId, Nullable<int> folderId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFolderAccess_Result>("SP_GetFolderAccess", compIdParameter, folderIdParameter);
        }
    
        public virtual int SP_UpdateFolderAccess(Nullable<int> compId, Nullable<int> folderId, Nullable<int> userId, Nullable<int> isassign, Nullable<int> isViewAssign, Nullable<int> currentUserId, ObjectParameter error)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isassignParameter = isassign.HasValue ?
                new ObjectParameter("Isassign", isassign) :
                new ObjectParameter("Isassign", typeof(int));
    
            var isViewAssignParameter = isViewAssign.HasValue ?
                new ObjectParameter("IsViewAssign", isViewAssign) :
                new ObjectParameter("IsViewAssign", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateFolderAccess", compIdParameter, folderIdParameter, userIdParameter, isassignParameter, isViewAssignParameter, currentUserIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetCategoryNew_Result> SP_GetCategoryNew(string urn, string version, Nullable<int> compId, string propertyName)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCategoryNew_Result>("SP_GetCategoryNew", urnParameter, versionParameter, compIdParameter, propertyNameParameter);
        }
    
        public virtual ObjectResult<SP_GetPropertyNameForVisibility_Result> SP_GetPropertyNameForVisibility(string urn, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPropertyNameForVisibility_Result>("SP_GetPropertyNameForVisibility", urnParameter, versionParameter, compIdParameter);
        }
    
        public virtual int SP_UpdateVisibility(Nullable<int> visible_ID, string property_Value, Nullable<bool> visibility)
        {
            var visible_IDParameter = visible_ID.HasValue ?
                new ObjectParameter("Visible_ID", visible_ID) :
                new ObjectParameter("Visible_ID", typeof(int));
    
            var property_ValueParameter = property_Value != null ?
                new ObjectParameter("Property_Value", property_Value) :
                new ObjectParameter("Property_Value", typeof(string));
    
            var visibilityParameter = visibility.HasValue ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateVisibility", visible_IDParameter, property_ValueParameter, visibilityParameter);
        }
    
        public virtual ObjectResult<SP_GetDistinctProperty_Result> SP_GetDistinctProperty(string urn, string version, Nullable<int> compId, Nullable<int> tradeId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDistinctProperty_Result>("SP_GetDistinctProperty", urnParameter, versionParameter, compIdParameter, tradeIdParameter);
        }
    
        public virtual ObjectResult<GetRuleGridDetails_Result> GetRuleGridDetails(Nullable<int> compid, Nullable<int> id, Nullable<int> tradeid, Nullable<int> groupId)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var tradeidParameter = tradeid.HasValue ?
                new ObjectParameter("Tradeid", tradeid) :
                new ObjectParameter("Tradeid", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRuleGridDetails_Result>("GetRuleGridDetails", compidParameter, idParameter, tradeidParameter, groupIdParameter);
        }
    
        public virtual int SP_SaveExcelColor(Nullable<int> id, string name, string color, Nullable<int> currentUserId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveExcelColor", idParameter, nameParameter, colorParameter, currentUserIdParameter, error);
        }
    
        public virtual int SP_UpdateSecurity(Nullable<int> id, string col, Nullable<int> currentUserId, Nullable<bool> value, Nullable<int> compid, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var colParameter = col != null ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(bool));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateSecurity", idParameter, colParameter, currentUserIdParameter, valueParameter, compidParameter, error);
        }
    
        public virtual ObjectResult<GetSecurity_Result> GetSecurity(Nullable<int> m_ID, Nullable<int> compid)
        {
            var m_IDParameter = m_ID.HasValue ?
                new ObjectParameter("M_ID", m_ID) :
                new ObjectParameter("M_ID", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecurity_Result>("GetSecurity", m_IDParameter, compidParameter);
        }
    
        public virtual ObjectResult<SP_GetExcelColors_Result> SP_GetExcelColors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetExcelColors_Result>("SP_GetExcelColors");
        }
    
        public virtual ObjectResult<SP_GetPropertyNameValue_Result> SP_GetPropertyNameValue(string guid, string category, string propertyName)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPropertyNameValue_Result>("SP_GetPropertyNameValue", guidParameter, categoryParameter, propertyNameParameter);
        }
    
        public virtual ObjectResult<GetPropertyMapName_Result> GetPropertyMapName(string guid, string category)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropertyMapName_Result>("GetPropertyMapName", guidParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SP_GetPersonalFolderPath_Result> SP_GetPersonalFolderPath(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPersonalFolderPath_Result>("SP_GetPersonalFolderPath", compidParameter);
        }
    
        public virtual int SP_SaveProjectName(string projectName, Nullable<int> com_Id, ObjectParameter error)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var com_IdParameter = com_Id.HasValue ?
                new ObjectParameter("Com_Id", com_Id) :
                new ObjectParameter("Com_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveProjectName", projectNameParameter, com_IdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetPersonalCompPrj_Result> SP_GetPersonalCompPrj(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPersonalCompPrj_Result>("SP_GetPersonalCompPrj", compidParameter);
        }
    
        public virtual int SP_SaveAllPersonalModelUrn(string filename, string originalFileName, string urn, string filesize, Nullable<System.DateTime> modifiedDate, string bucketKey, Nullable<int> compid)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var originalFileNameParameter = originalFileName != null ?
                new ObjectParameter("OriginalFileName", originalFileName) :
                new ObjectParameter("OriginalFileName", typeof(string));
    
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var filesizeParameter = filesize != null ?
                new ObjectParameter("filesize", filesize) :
                new ObjectParameter("filesize", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var bucketKeyParameter = bucketKey != null ?
                new ObjectParameter("BucketKey", bucketKey) :
                new ObjectParameter("BucketKey", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveAllPersonalModelUrn", filenameParameter, originalFileNameParameter, urnParameter, filesizeParameter, modifiedDateParameter, bucketKeyParameter, compidParameter);
        }
    
        public virtual int SP_DeleteEmailId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteEmailId", idParameter);
        }
    
        public virtual ObjectResult<SP_GetEmail_Result> SP_GetEmail(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmail_Result>("SP_GetEmail", compIdParameter);
        }
    
        public virtual int SP_SaveEmail(Nullable<int> id, string emailId, Nullable<int> compId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveEmail", idParameter, emailIdParameter, compIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetFolderFiles_Result> SP_GetFolderFiles(Nullable<int> compid, Nullable<int> userid, Nullable<int> groupid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFolderFiles_Result>("SP_GetFolderFiles", compidParameter, useridParameter, groupidParameter);
        }
    
        public virtual ObjectResult<SP_GetPropertyMapDetails_Result> SP_GetPropertyMapDetails(string urn, Nullable<int> compid)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPropertyMapDetails_Result>("SP_GetPropertyMapDetails", urnParameter, compidParameter);
        }
    
        public virtual ObjectResult<SP_GetCategory_Result> SP_GetCategory(string urn, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCategory_Result>("SP_GetCategory", urnParameter, versionParameter, compIdParameter);
        }
    
        public virtual ObjectResult<GetPropertyValue_Result> GetPropertyValue(string guid, string category, string propname, string getprop)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("Guid", guid) :
                new ObjectParameter("Guid", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var propnameParameter = propname != null ?
                new ObjectParameter("propname", propname) :
                new ObjectParameter("propname", typeof(string));
    
            var getpropParameter = getprop != null ?
                new ObjectParameter("getprop", getprop) :
                new ObjectParameter("getprop", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropertyValue_Result>("GetPropertyValue", guidParameter, categoryParameter, propnameParameter, getpropParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomQuantities_Result> SP_GetCustomQuantities(string urn, string category, string propertyName, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomQuantities_Result>("SP_GetCustomQuantities", urnParameter, categoryParameter, propertyNameParameter, compIdParameter);
        }
    
        public virtual ObjectResult<GetQuantityGridModelData_Result> GetQuantityGridModelData(string filename, string version, Nullable<int> compId)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuantityGridModelData_Result>("GetQuantityGridModelData", filenameParameter, versionParameter, compIdParameter);
        }
    
        public virtual ObjectResult<GetCatPropertyMapName_Result> GetCatPropertyMapName(string urn, string category)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCatPropertyMapName_Result>("GetCatPropertyMapName", urnParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SP_GetCategoryPropertyMap_Result> SP_GetCategoryPropertyMap(string urn, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCategoryPropertyMap_Result>("SP_GetCategoryPropertyMap", urnParameter, compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetModelRooms_Result> SP_GetModelRooms(string urn, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetModelRooms_Result>("SP_GetModelRooms", urnParameter, versionParameter, compIdParameter);
        }
    
        public virtual int SP_DeleteMeasurementUnit(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMeasurementUnit", idParameter);
        }
    
        public virtual ObjectResult<SP_GetMeasurementUnit_Result> SP_GetMeasurementUnit(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMeasurementUnit_Result>("SP_GetMeasurementUnit", compIdParameter);
        }
    
        public virtual int SP_SaveMeasurementUnit(Nullable<int> id, string measurementUnitName, Nullable<double> scaleUnit, Nullable<int> compId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var measurementUnitNameParameter = measurementUnitName != null ?
                new ObjectParameter("MeasurementUnitName", measurementUnitName) :
                new ObjectParameter("MeasurementUnitName", typeof(string));
    
            var scaleUnitParameter = scaleUnit.HasValue ?
                new ObjectParameter("ScaleUnit", scaleUnit) :
                new ObjectParameter("ScaleUnit", typeof(double));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveMeasurementUnit", idParameter, measurementUnitNameParameter, scaleUnitParameter, compIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetMeasurmentName_Result> SP_GetMeasurmentName(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMeasurmentName_Result>("SP_GetMeasurmentName", compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEleExcelParameter_Result> SP_GetEleExcelParameter(Nullable<int> compid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEleExcelParameter_Result>("SP_GetEleExcelParameter", compidParameter);
        }
    
        public virtual int SP_DeleteStdBends(Nullable<int> id, Nullable<int> compId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteStdBends", idParameter, compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetstdBends_Result> SP_GetstdBends(Nullable<int> compId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetstdBends_Result>("SP_GetstdBends", compIdParameter);
        }
    
        public virtual int SP_SaveBends(Nullable<int> id, string sTD_Bends, Nullable<int> compId, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var sTD_BendsParameter = sTD_Bends != null ?
                new ObjectParameter("STD_Bends", sTD_Bends) :
                new ObjectParameter("STD_Bends", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveBends", idParameter, sTD_BendsParameter, compIdParameter, error);
        }
    
        public virtual ObjectResult<SP_GetElectricalData_Result> SP_GetElectricalData(string urn, Nullable<int> compid, string categoryName, string propertyName, string propertyValue)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetElectricalData_Result>("SP_GetElectricalData", urnParameter, compidParameter, categoryNameParameter, propertyNameParameter, propertyValueParameter);
        }
    
        public virtual ObjectResult<SP_GetFeederId_Result> SP_GetFeederId(Nullable<int> compid, string urn)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFeederId_Result>("SP_GetFeederId", compidParameter, urnParameter);
        }
    
        public virtual ObjectResult<SP_GetElectricalFamily_Result> SP_GetElectricalFamily(string urn, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetElectricalFamily_Result>("SP_GetElectricalFamily", urnParameter, versionParameter, compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetElectricalPropertiesName_Result> SP_GetElectricalPropertiesName(string urn, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetElectricalPropertiesName_Result>("SP_GetElectricalPropertiesName", urnParameter, versionParameter, compIdParameter);
        }
    
        public virtual int SP_UpdateUSerAccessData(Nullable<int> uID, Nullable<bool> btnDextract, Nullable<bool> btnVersion, Nullable<bool> btnShow2D, Nullable<bool> btnQuantity, Nullable<bool> btnRuleEngine, Nullable<bool> btnReport, Nullable<bool> btnClearance, Nullable<bool> btnProperty, Nullable<bool> btnADAClearance, Nullable<bool> btnElectrial, Nullable<bool> btnAutoSearch)
        {
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(int));
    
            var btnDextractParameter = btnDextract.HasValue ?
                new ObjectParameter("BtnDextract", btnDextract) :
                new ObjectParameter("BtnDextract", typeof(bool));
    
            var btnVersionParameter = btnVersion.HasValue ?
                new ObjectParameter("BtnVersion", btnVersion) :
                new ObjectParameter("BtnVersion", typeof(bool));
    
            var btnShow2DParameter = btnShow2D.HasValue ?
                new ObjectParameter("BtnShow2D", btnShow2D) :
                new ObjectParameter("BtnShow2D", typeof(bool));
    
            var btnQuantityParameter = btnQuantity.HasValue ?
                new ObjectParameter("BtnQuantity", btnQuantity) :
                new ObjectParameter("BtnQuantity", typeof(bool));
    
            var btnRuleEngineParameter = btnRuleEngine.HasValue ?
                new ObjectParameter("BtnRuleEngine", btnRuleEngine) :
                new ObjectParameter("BtnRuleEngine", typeof(bool));
    
            var btnReportParameter = btnReport.HasValue ?
                new ObjectParameter("BtnReport", btnReport) :
                new ObjectParameter("BtnReport", typeof(bool));
    
            var btnClearanceParameter = btnClearance.HasValue ?
                new ObjectParameter("BtnClearance", btnClearance) :
                new ObjectParameter("BtnClearance", typeof(bool));
    
            var btnPropertyParameter = btnProperty.HasValue ?
                new ObjectParameter("BtnProperty", btnProperty) :
                new ObjectParameter("BtnProperty", typeof(bool));
    
            var btnADAClearanceParameter = btnADAClearance.HasValue ?
                new ObjectParameter("BtnADAClearance", btnADAClearance) :
                new ObjectParameter("BtnADAClearance", typeof(bool));
    
            var btnElectrialParameter = btnElectrial.HasValue ?
                new ObjectParameter("BtnElectrial", btnElectrial) :
                new ObjectParameter("BtnElectrial", typeof(bool));
    
            var btnAutoSearchParameter = btnAutoSearch.HasValue ?
                new ObjectParameter("BtnAutoSearch", btnAutoSearch) :
                new ObjectParameter("BtnAutoSearch", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateUSerAccessData", uIDParameter, btnDextractParameter, btnVersionParameter, btnShow2DParameter, btnQuantityParameter, btnRuleEngineParameter, btnReportParameter, btnClearanceParameter, btnPropertyParameter, btnADAClearanceParameter, btnElectrialParameter, btnAutoSearchParameter);
        }
    
        public virtual ObjectResult<GetQuantityGridModelDataNew_Result> GetQuantityGridModelDataNew(string urn, string filename, string categoryName, string version, Nullable<int> compId)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("urn", urn) :
                new ObjectParameter("urn", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuantityGridModelDataNew_Result>("GetQuantityGridModelDataNew", urnParameter, filenameParameter, categoryNameParameter, versionParameter, compIdParameter);
        }
    
        public virtual ObjectResult<SP_GetUSerAccessData_Result> SP_GetUSerAccessData(string compid)
        {
            var compidParameter = compid != null ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUSerAccessData_Result>("SP_GetUSerAccessData", compidParameter);
        }
    
        public virtual ObjectResult<SP_GetSupplyChainMasterDetails_Result> SP_GetSupplyChainMasterDetails(string urn, string category_Name)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var category_NameParameter = category_Name != null ?
                new ObjectParameter("Category_Name", category_Name) :
                new ObjectParameter("Category_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSupplyChainMasterDetails_Result>("SP_GetSupplyChainMasterDetails", urnParameter, category_NameParameter);
        }
    
        public virtual ObjectResult<GetPropertyValueByPropName_Result> GetPropertyValueByPropName(string urn, string category, string propname)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var propnameParameter = propname != null ?
                new ObjectParameter("propname", propname) :
                new ObjectParameter("propname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropertyValueByPropName_Result>("GetPropertyValueByPropName", urnParameter, categoryParameter, propnameParameter);
        }
    
        public virtual int SP_InsertSupplyChainMaster(string urn, string cat_name, string prop_Name, string prop_Value, Nullable<bool> isGroup, string report_Id)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var cat_nameParameter = cat_name != null ?
                new ObjectParameter("Cat_name", cat_name) :
                new ObjectParameter("Cat_name", typeof(string));
    
            var prop_NameParameter = prop_Name != null ?
                new ObjectParameter("Prop_Name", prop_Name) :
                new ObjectParameter("Prop_Name", typeof(string));
    
            var prop_ValueParameter = prop_Value != null ?
                new ObjectParameter("Prop_Value", prop_Value) :
                new ObjectParameter("Prop_Value", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var report_IdParameter = report_Id != null ?
                new ObjectParameter("Report_Id", report_Id) :
                new ObjectParameter("Report_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertSupplyChainMaster", urnParameter, cat_nameParameter, prop_NameParameter, prop_ValueParameter, isGroupParameter, report_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetReferrenceLevelByUrn_Result> SP_GetReferrenceLevelByUrn(string urn, string category)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetReferrenceLevelByUrn_Result>("SP_GetReferrenceLevelByUrn", urnParameter, categoryParameter);
        }
    
        public virtual int SP_INSERT_UpdateQuantitySetting(string urn, string category, string level, string standard, string group, Nullable<long> iD)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var standardParameter = standard != null ?
                new ObjectParameter("Standard", standard) :
                new ObjectParameter("Standard", typeof(string));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_UpdateQuantitySetting", urnParameter, categoryParameter, levelParameter, standardParameter, groupParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_GetQuantitySetting_Result> SP_GetQuantitySetting(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQuantitySetting_Result>("SP_GetQuantitySetting", urnParameter);
        }
    
        public virtual ObjectResult<Sp_GetCompanyUsers_Result> Sp_GetCompanyUsers(string c_ID, Nullable<int> userId, Nullable<int> user_type)
        {
            var c_IDParameter = c_ID != null ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var user_typeParameter = user_type.HasValue ?
                new ObjectParameter("User_type", user_type) :
                new ObjectParameter("User_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCompanyUsers_Result>("Sp_GetCompanyUsers", c_IDParameter, userIdParameter, user_typeParameter);
        }
    
        public virtual ObjectResult<SP_GetConduitMaterialByUrn_Result> SP_GetConduitMaterialByUrn(string urn, string category, string level)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetConduitMaterialByUrn_Result>("SP_GetConduitMaterialByUrn", urnParameter, categoryParameter, levelParameter);
        }
    
        public virtual int sp_SaveCompanyUser(Nullable<int> u_ID, string firstName, string lastName, string username, string password, string emailid, string mobileNo, Nullable<int> group_Id, Nullable<bool> active, Nullable<int> currentID, ObjectParameter error, Nullable<int> profile, Nullable<int> trade, Nullable<bool> isEmail)
        {
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var group_IdParameter = group_Id.HasValue ?
                new ObjectParameter("Group_Id", group_Id) :
                new ObjectParameter("Group_Id", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var currentIDParameter = currentID.HasValue ?
                new ObjectParameter("CurrentID", currentID) :
                new ObjectParameter("CurrentID", typeof(int));
    
            var profileParameter = profile.HasValue ?
                new ObjectParameter("Profile", profile) :
                new ObjectParameter("Profile", typeof(int));
    
            var tradeParameter = trade.HasValue ?
                new ObjectParameter("Trade", trade) :
                new ObjectParameter("Trade", typeof(int));
    
            var isEmailParameter = isEmail.HasValue ?
                new ObjectParameter("IsEmail", isEmail) :
                new ObjectParameter("IsEmail", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveCompanyUser", u_IDParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter, emailidParameter, mobileNoParameter, group_IdParameter, activeParameter, currentIDParameter, error, profileParameter, tradeParameter, isEmailParameter);
        }
    
        public virtual ObjectResult<SP_GetConsolidatedSCMData_Result> SP_GetConsolidatedSCMData(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetConsolidatedSCMData_Result>("SP_GetConsolidatedSCMData", urnParameter);
        }
    
        public virtual ObjectResult<SP_GET_CONSOLIDATED_DESC_Result> SP_GET_CONSOLIDATED_DESC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CONSOLIDATED_DESC_Result>("SP_GET_CONSOLIDATED_DESC");
        }
    
        public virtual ObjectResult<SP_GET_SettingDataDesc_Result> SP_GET_SettingDataDesc(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_SettingDataDesc_Result>("SP_GET_SettingDataDesc", urnParameter);
        }
    
        public virtual int SP_ADDUPDATE_SettingDataDesc(string urn, string cat_Name, string description, Nullable<long> iD)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var cat_NameParameter = cat_Name != null ?
                new ObjectParameter("Cat_Name", cat_Name) :
                new ObjectParameter("Cat_Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADDUPDATE_SettingDataDesc", urnParameter, cat_NameParameter, descriptionParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_GetConsolidatedSCMDataNew_Result> SP_GetConsolidatedSCMDataNew(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetConsolidatedSCMDataNew_Result>("SP_GetConsolidatedSCMDataNew", urnParameter);
        }
    
        public virtual int SP_ADDUPDATE_MaterialGBDescription(string urn, string dESCRIPTION, string uOM, string qTY_Needed, string gBID, string gB_Description)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var dESCRIPTIONParameter = dESCRIPTION != null ?
                new ObjectParameter("DESCRIPTION", dESCRIPTION) :
                new ObjectParameter("DESCRIPTION", typeof(string));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var qTY_NeededParameter = qTY_Needed != null ?
                new ObjectParameter("QTY_Needed", qTY_Needed) :
                new ObjectParameter("QTY_Needed", typeof(string));
    
            var gBIDParameter = gBID != null ?
                new ObjectParameter("GBID", gBID) :
                new ObjectParameter("GBID", typeof(string));
    
            var gB_DescriptionParameter = gB_Description != null ?
                new ObjectParameter("GB_Description", gB_Description) :
                new ObjectParameter("GB_Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADDUPDATE_MaterialGBDescription", urnParameter, dESCRIPTIONParameter, uOMParameter, qTY_NeededParameter, gBIDParameter, gB_DescriptionParameter);
        }
    
        public virtual ObjectResult<SP_GetGbId_GBDescListByCategory_Result> SP_GetGbId_GBDescListByCategory(string urn, string searchtextDesc)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var searchtextDescParameter = searchtextDesc != null ?
                new ObjectParameter("SearchtextDesc", searchtextDesc) :
                new ObjectParameter("SearchtextDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGbId_GBDescListByCategory_Result>("SP_GetGbId_GBDescListByCategory", urnParameter, searchtextDescParameter);
        }
    
        public virtual ObjectResult<SP_GetGB_DescriptionByGBID_Result> SP_GetGB_DescriptionByGBID(string urn, string searchtext)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            var searchtextParameter = searchtext != null ?
                new ObjectParameter("Searchtext", searchtext) :
                new ObjectParameter("Searchtext", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGB_DescriptionByGBID_Result>("SP_GetGB_DescriptionByGBID", urnParameter, searchtextParameter);
        }
    
        public virtual ObjectResult<SP_GetConsolidatedGBData_Result> SP_GetConsolidatedGBData(string urn)
        {
            var urnParameter = urn != null ?
                new ObjectParameter("Urn", urn) :
                new ObjectParameter("Urn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetConsolidatedGBData_Result>("SP_GetConsolidatedGBData", urnParameter);
        }
    }
}
